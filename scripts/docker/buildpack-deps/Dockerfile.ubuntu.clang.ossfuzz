# vim:syntax=dockerfile
#------------------------------------------------------------------------------
# Dockerfile for building and testing Solidity Compiler on CI
# Target: Ubuntu ossfuzz Clang variant
# URL: https://hub.docker.com/r/ethereum/solidity-buildpack-deps
#
# This file is part of solidity.
#
# solidity is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# solidity is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with solidity.  If not, see <http://www.gnu.org/licenses/>
#
# (c) 2016-2021 solidity contributors.
#------------------------------------------------------------------------------
FROM gcr.io/oss-fuzz-base/base-clang:latest as base
LABEL version="7"

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update; \
	apt-get -qqy install --no-install-recommends \
		automake \
		bison \
		build-essential \
		curl \
		git \
		jq \
		libbz2-dev \
		liblzma-dev \
		libtool \
		lsof \
		m4 \
		mlton \
		ninja-build \
		openjdk-8-jdk \
		pkg-config \
		python3-pip \
		software-properties-common \
		sudo \
		texinfo \
		unzip \
		uuid-dev \
		wget \
		zlib1g-dev; \
	pip3 install \
		codecov \
		colorama \
		deepdiff \
		parsec \
		pygments-lexer-solidity \
		pylint \
		requests \
		tabulate \
		z3-solver;

# Install cmake 3.21.2 (minimum requirement is cmake 3.10)
RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.2/cmake-3.21.2-Linux-x86_64.sh; \
    test "$(sha256sum cmake-3.21.2-Linux-x86_64.sh)" = "3310362c6fe4d4b2dc00823835f3d4a7171bbd73deb7d059738494761f1c908c  cmake-3.21.2-Linux-x86_64.sh"; \
    chmod +x cmake-3.21.2-Linux-x86_64.sh; \
    ./cmake-3.21.2-Linux-x86_64.sh --skip-license --prefix="/usr"

FROM base AS libraries

# Boost
RUN set -ex; \
    cd /usr/src; \
    wget -q 'https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.tar.bz2' -O boost.tar.bz2; \
    test "$(sha256sum boost.tar.bz2)" = "83bfc1507731a0906e387fc28b7ef5417d591429e51e788417fe9ff025e116b1  boost.tar.bz2" && \
    tar -xf boost.tar.bz2; \
    rm boost.tar.bz2; \
    cd boost_1_74_0; \
    CXXFLAGS="-stdlib=libc++ -pthread" LDFLAGS="-stdlib=libc++" ./bootstrap.sh --with-toolset=clang --prefix=/usr; \
    ./b2 toolset=clang cxxflags="-stdlib=libc++ -pthread" linkflags="-stdlib=libc++ -pthread" headers; \
    ./b2 toolset=clang cxxflags="-stdlib=libc++ -pthread" linkflags="-stdlib=libc++ -pthread" \
        link=static variant=release runtime-link=static \
        system filesystem unit_test_framework program_options \
        install -j $(($(nproc)/2)); \
    rm -rf /usr/src/boost_1_74_0

# Z3
RUN set -ex; \
    git clone --depth 1 -b z3-4.12.1 https://github.com/Z3Prover/z3.git \
    /usr/src/z3; \
    cd /usr/src/z3; \
    mkdir build; \
    cd build; \
    LDFLAGS=$CXXFLAGS cmake -DZ3_BUILD_LIBZ3_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release ..; \
    make libz3 -j; \
    make install; \
    rm -rf /usr/src/z3

# Eldarica
RUN set -ex; \
	apt-get update; \
	apt-get install -qy unzip openjdk-11-jre; \
	eldarica_version="2.1"; \
	wget "https://github.com/uuverifiers/eldarica/releases/download/v${eldarica_version}/eldarica-bin-${eldarica_version}.zip" -O /opt/eld_binaries.zip; \
	test "$(sha256sum /opt/eld_binaries.zip)" = "0ac43f45c0925383c9d2077f62bbb515fd792375f3b2b101b30c9e81dcd7785c  /opt/eld_binaries.zip"; \
	unzip /opt/eld_binaries.zip -d /opt; \
	rm -f /opt/eld_binaries.zip;

# CVC5
RUN set -ex; \
	cvc5_version="1.1.2"; \
	wget "https://github.com/cvc5/cvc5/releases/download/cvc5-${cvc5_version}/cvc5-Linux-static.zip" -O /opt/cvc5.zip; \
	test "$(sha256sum /opt/cvc5.zip)" = "cf291aef67da8eaa8d425a51f67f3f72f36db8b1040655dc799b64e3d69e6086  /opt/cvc5.zip"; \
	unzip /opt/cvc5.zip -x "cvc5-Linux-static/lib/cmake/*" -d /opt; \
	mv /opt/cvc5-Linux-static/bin/* /usr/bin; \
	mv /opt/cvc5-Linux-static/include/* /usr/include; \
	mv /opt/cvc5-Linux-static/lib/* /usr/lib; \
	rm -rf /opt/cvc5-Linux-static /opt/cvc5.zip;

# OSSFUZZ: libprotobuf-mutator
RUN set -ex; \
	git clone https://github.com/google/libprotobuf-mutator.git \
	    /usr/src/libprotobuf-mutator; \
	cd /usr/src/libprotobuf-mutator; \
	git checkout 3521f47a2828da9ace403e4ecc4aece1a84feb36; \
	mkdir build; \
	cd build; \
	cmake .. -GNinja -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON \
        -DLIB_PROTO_MUTATOR_TESTING=OFF -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="/usr"; \
	ninja; \
	cp -vpr external.protobuf/bin/* /usr/bin/; \
	cp -vpr external.protobuf/include/* /usr/include/; \
	cp -vpr external.protobuf/lib/* /usr/lib/; \
	ninja install/strip; \
	rm -rf /usr/src/libprotobuf-mutator

# EVMONE
RUN set -ex; \
	cd /usr/src; \
	git clone --branch="v0.11.0" --recurse-submodules https://github.com/ethereum/evmone.git; \
	cd evmone; \
	mkdir build; \
	cd build; \
	CXX=clang++ cmake -G Ninja -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="/usr" ..; \
	ninja; \
	ninja install/strip; \
	rm -rf /usr/src/evmone

# gmp
RUN set -ex; \
    # Replace system installed libgmp static library
    # with sanitized version. Do not perform apt
    # remove because it removes mlton as well that
    # we need for building libabicoder
    cd /usr/src/; \
    git clone --depth 1 --branch gmp-6.2.1 https://github.com/gmp-mirror/gmp-6.2 gmp/; \
    rm -r gmp/.git/; \
    test \
        "$(tar --create gmp/ --sort=name --mtime=1970-01-01Z --owner=0 --group=0 --numeric-owner | sha256sum)" = \
        "d606ff6a4ce98692f9920031e85ea8fcf4a65ce1426f6f0048b8794aefed174b  -"; \
    # NOTE: This removes also libgmp.so, which git depends on
    rm -f /usr/lib/x86_64-linux-gnu/libgmp.*; \
    rm -f /usr/include/x86_64-linux-gnu/gmp.h; \
    cd gmp/; \
    autoreconf -i; \
    ./configure --prefix=/usr --enable-static=yes --enable-maintainer-mode; \
    make -j; \
    make check; \
    make install; \
    rm -rf /usr/src/gmp/

# libabicoder
RUN set -ex; \
    cd /usr/src; \
    git clone https://github.com/ekpyron/Yul-Isabelle; \
    cd Yul-Isabelle; \
    cd libabicoder; \
    CXX=clang++ CXXFLAGS="-stdlib=libc++ -pthread" make; \
    cp libabicoder.a /usr/lib; \
    cp abicoder.hpp /usr/include; \
    rm -rf /usr/src/Yul-Isabelle

FROM base
COPY --from=libraries /usr/lib /usr/lib
COPY --from=libraries /usr/bin /usr/bin
COPY --from=libraries /usr/include /usr/include
COPY --from=libraries /opt/eldarica /opt/eldarica
ENV PATH="$PATH:/opt/eldarica"
