// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  function ui_1d(uint256[3] memory a, uint256 i) private returns (uint256) {
    return a[i];
  }
  function ui_2d(uint256[3][4] memory a, uint256 i) private returns (uint256) {
    return a[i][i];
  }

  function malloc_1d() private {
    uint256[3] memory a;
  }
  function malloc_2d() private {
    uint256[3][4] memory a;
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #Contract = #sol<ContractKind Contract>
// CHECK-NEXT: #NonPayable = #sol<StateMutability NonPayable>
// CHECK-NEXT: #loc3 = loc({{.*}}:3:17)
// CHECK-NEXT: #loc4 = loc({{.*}}:3:38)
// CHECK-NEXT: #loc9 = loc({{.*}}:6:17)
// CHECK-NEXT: #loc10 = loc({{.*}}:6:41)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_61 {
// CHECK-NEXT:     sol.func @ui_1d_16(%arg0: !sol.array<3 x ui256, Memory> loc({{.*}}:3:17), %arg1: ui256 loc({{.*}}:3:38)) -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.array<3 x ui256, Memory>, Stack> loc(#loc3)
// CHECK-NEXT:       sol.store %arg0, %0 : !sol.array<3 x ui256, Memory>, !sol.ptr<!sol.array<3 x ui256, Memory>, Stack> loc(#loc3)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc4)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc4)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<!sol.array<3 x ui256, Memory>, Stack>, !sol.array<3 x ui256, Memory> loc(#loc5)
// CHECK-NEXT:       %3 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc6)
// CHECK-NEXT:       %4 = sol.gep %2, %3 : !sol.array<3 x ui256, Memory>, ui256, !sol.ptr<ui256, Memory> loc(#loc5)
// CHECK-NEXT:       %5 = sol.load %4 : !sol.ptr<ui256, Memory>, ui256 loc(#loc5)
// CHECK-NEXT:       sol.return %5 : ui256 loc(#loc7)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     sol.func @ui_2d_36(%arg0: !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory> loc({{.*}}:6:17), %arg1: ui256 loc({{.*}}:6:41)) -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, Stack> loc(#loc9)
// CHECK-NEXT:       sol.store %arg0, %0 : !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, !sol.ptr<!sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, Stack> loc(#loc9)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc10)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc10)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<!sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, Stack>, !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory> loc(#loc11)
// CHECK-NEXT:       %3 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc12)
// CHECK-NEXT:       %4 = sol.gep %2, %3 : !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, ui256, !sol.array<3 x ui256, Memory> loc(#loc11)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc13)
// CHECK-NEXT:       %6 = sol.gep %4, %5 : !sol.array<3 x ui256, Memory>, ui256, !sol.ptr<ui256, Memory> loc(#loc11)
// CHECK-NEXT:       %7 = sol.load %6 : !sol.ptr<ui256, Memory>, ui256 loc(#loc11)
// CHECK-NEXT:       sol.return %7 : ui256 loc(#loc14)
// CHECK-NEXT:     } loc(#loc8)
// CHECK-NEXT:     sol.func @malloc_1d_47() attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.array<3 x ui256, Memory>, Stack> loc(#loc16)
// CHECK-NEXT:       %1 = sol.malloc zero_init : !sol.array<3 x ui256, Memory> loc(#loc16)
// CHECK-NEXT:       sol.store %1, %0 : !sol.array<3 x ui256, Memory>, !sol.ptr<!sol.array<3 x ui256, Memory>, Stack> loc(#loc16)
// CHECK-NEXT:       sol.return loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     sol.func @malloc_2d_60() attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, Stack> loc(#loc18)
// CHECK-NEXT:       %1 = sol.malloc zero_init : !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory> loc(#loc18)
// CHECK-NEXT:       sol.store %1, %0 : !sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, !sol.ptr<!sol.array<4 x !sol.array<3 x ui256, Memory>, Memory>, Stack> loc(#loc18)
// CHECK-NEXT:       sol.return loc(#loc17)
// CHECK-NEXT:     } loc(#loc17)
// CHECK-NEXT:   } {interface_fns = [], kind = #Contract} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc5 = loc({{.*}}:4:11)
// CHECK-NEXT: #loc6 = loc({{.*}}:4:13)
// CHECK-NEXT: #loc7 = loc({{.*}}:4:4)
// CHECK-NEXT: #loc8 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc11 = loc({{.*}}:7:11)
// CHECK-NEXT: #loc12 = loc({{.*}}:7:13)
// CHECK-NEXT: #loc13 = loc({{.*}}:7:16)
// CHECK-NEXT: #loc14 = loc({{.*}}:7:4)
// CHECK-NEXT: #loc15 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc16 = loc({{.*}}:11:4)
// CHECK-NEXT: #loc17 = loc({{.*}}:13:2)
// CHECK-NEXT: #loc18 = loc({{.*}}:14:4)
// CHECK-EMPTY:
