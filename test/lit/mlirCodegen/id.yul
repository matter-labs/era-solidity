// RUN: solc --strict-assembly --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

object "Test" {
  code {
    let a := mload(64)
    return(a, 0)
  }
  object "Test_deployed" {
    code {
      let a := mload(64)
      return(a, 0)
    }
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   sol.object @Test {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc3)
// CHECK-NEXT:     %1 = sol.mload %c64_i256 loc(#loc4)
// CHECK-NEXT:     llvm.store %1, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc6)
// CHECK-NEXT:     sol.builtin_ret %2, %c0_i256 loc(#loc7)
// CHECK-NEXT:     sol.object @Test_deployed {
// CHECK-NEXT:       %c1_i256_0 = arith.constant 1 : i256 loc(#loc8)
// CHECK-NEXT:       %3 = llvm.alloca %c1_i256_0 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:       %c64_i256_1 = arith.constant 64 : i256 loc(#loc10)
// CHECK-NEXT:       %4 = sol.mload %c64_i256_1 loc(#loc11)
// CHECK-NEXT:       llvm.store %4, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc8)
// CHECK-NEXT:       %5 = llvm.load %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc12)
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       sol.builtin_ret %5, %c0_i256_2 loc(#loc14)
// CHECK-NEXT:     } loc(#loc)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:0:49)
// CHECK-NEXT: #loc2 = loc({{.*}}:0:53)
// CHECK-NEXT: #loc3 = loc({{.*}}:0:64)
// CHECK-NEXT: #loc4 = loc({{.*}}:0:58)
// CHECK-NEXT: #loc5 = loc({{.*}}:0:87)
// CHECK-NEXT: #loc6 = loc({{.*}}:0:90)
// CHECK-NEXT: #loc7 = loc({{.*}}:0:80)
// CHECK-NEXT: #loc8 = loc({{.*}}:7:8)
// CHECK-NEXT: #loc9 = loc({{.*}}:7:12)
// CHECK-NEXT: #loc10 = loc({{.*}}:7:23)
// CHECK-NEXT: #loc11 = loc({{.*}}:7:17)
// CHECK-NEXT: #loc12 = loc({{.*}}:9:12)
// CHECK-NEXT: #loc13 = loc({{.*}}:9:15)
// CHECK-NEXT: #loc14 = loc({{.*}}:9:5)
// CHECK-EMPTY:
