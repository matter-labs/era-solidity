// RUN: solc --mlir-action=print-llvm-ir --mlir-target=eravm %s | FileCheck %s
// RUN: solc --mlir-action=print-asm --mlir-target=eravm %s | FileCheck --check-prefix=ASM %s

contract C {
  string m;
  function f0() public pure returns (uint) { return 42; }
  function f1() public view returns (string memory) {
    return m;
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: ; ModuleID = 'LLVMDialectModule'
// CHECK-NEXT: source_filename = "LLVMDialectModule"
// CHECK-NEXT: target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
// CHECK-NEXT: target triple = "eravm-unknown-unknown"
// CHECK-EMPTY:
// CHECK-NEXT: @ptr_decommit = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_return_data = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_calldata = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_active = private global [16 x ptr addrspace(3)] undef
// CHECK-NEXT: @extra_abi_data = private global [10 x i256] zeroinitializer
// CHECK-NEXT: @call_flags = private global i256 0
// CHECK-NEXT: @returndatasize = private global i256 0
// CHECK-NEXT: @calldatasize = private global i256 0
// CHECK-NEXT: @memory_pointer = private global i256 0
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define private void @.unreachable() #0 personality ptr @__personality {
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define private void @__deploy() #0 personality ptr @__personality {
// CHECK-NEXT:   store i256 128, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %1 = call i256 @llvm.eravm.getu128()
// CHECK-NEXT:   %2 = icmp ne i256 %1, 0
// CHECK-NEXT:   br i1 %2, label %3, label %4
// CHECK-EMPTY:
// CHECK-NEXT: 3:                                                ; preds = %0
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 2)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %4
// CHECK-EMPTY:
// CHECK-NEXT: 4:                                                ; preds = %3, %0
// CHECK-NEXT:   %5 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %6 = inttoptr i256 %5 to ptr addrspace(1)
// CHECK-NEXT:   %7 = load ptr addrspace(3), ptr @ptr_calldata, align 32
// CHECK-NEXT:   %8 = getelementptr i8, ptr addrspace(3) %7, i256 0
// CHECK-NEXT:   call void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) %6, ptr addrspace(3) %8, i256 0, i1 false)
// CHECK-NEXT:   store i256 32, ptr addrspace(2) inttoptr (i256 256 to ptr addrspace(2)), align 1
// CHECK-NEXT:   store i256 0, ptr addrspace(2) inttoptr (i256 288 to ptr addrspace(2)), align 1
// CHECK-NEXT:   call void @__return(i256 256, i256 64, i256 2)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define private void @__runtime() #0 personality ptr @__personality {
// CHECK-NEXT:   store i256 128, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %1 = load i256, ptr @calldatasize, align 32
// CHECK-NEXT:   %2 = icmp uge i256 %1, 4
// CHECK-NEXT:   br i1 %2, label %3, label %44
// CHECK-EMPTY:
// CHECK-NEXT: 3:                                                ; preds = %0
// CHECK-NEXT:   %4 = load ptr addrspace(3), ptr @ptr_calldata, align 32
// CHECK-NEXT:   %5 = getelementptr i8, ptr addrspace(3) %4, i256 0
// CHECK-NEXT:   %6 = load i256, ptr addrspace(3) %5, align 1
// CHECK-NEXT:   %7 = lshr i256 %6, 224
// CHECK-NEXT:   %8 = trunc i256 %7 to i32
// CHECK-NEXT:   switch i32 %8, label %42 [
// CHECK-NEXT:     i32 -1518009227, label %9
// CHECK-NEXT:     i32 -1031814395, label %19
// CHECK-NEXT:   ]
// CHECK-EMPTY:
// CHECK-NEXT: 9:                                                ; preds = %3
// CHECK-NEXT:   %10 = call i256 @llvm.eravm.getu128()
// CHECK-NEXT:   %11 = icmp ne i256 %10, 0
// CHECK-NEXT:   br i1 %11, label %12, label %13
// CHECK-EMPTY:
// CHECK-NEXT: 12:                                               ; preds = %9
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %13
// CHECK-EMPTY:
// CHECK-NEXT: 13:                                               ; preds = %12, %9
// CHECK-NEXT:   %14 = call i256 @f0_10()
// CHECK-NEXT:   %15 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %16 = add i256 %15, 32
// CHECK-NEXT:   %17 = inttoptr i256 %15 to ptr addrspace(1)
// CHECK-NEXT:   store i256 %14, ptr addrspace(1) %17, align 1
// CHECK-NEXT:   %18 = add i256 %15, 32
// CHECK-NEXT:   call void @__return(i256 %15, i256 32, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %43
// CHECK-EMPTY:
// CHECK-NEXT: 19:                                               ; preds = %3
// CHECK-NEXT:   %20 = call i256 @llvm.eravm.getu128()
// CHECK-NEXT:   %21 = icmp ne i256 %20, 0
// CHECK-NEXT:   br i1 %21, label %22, label %23
// CHECK-EMPTY:
// CHECK-NEXT: 22:                                               ; preds = %19
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %23
// CHECK-EMPTY:
// CHECK-NEXT: 23:                                               ; preds = %22, %19
// CHECK-NEXT:   %24 = call i256 @f1_18()
// CHECK-NEXT:   %25 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %26 = add i256 %25, 32
// CHECK-NEXT:   %27 = inttoptr i256 %25 to ptr addrspace(1)
// CHECK-NEXT:   store i256 32, ptr addrspace(1) %27, align 1
// CHECK-NEXT:   %28 = inttoptr i256 %24 to ptr addrspace(1)
// CHECK-NEXT:   %29 = load i256, ptr addrspace(1) %28, align 1
// CHECK-NEXT:   %30 = inttoptr i256 %26 to ptr addrspace(1)
// CHECK-NEXT:   store i256 %29, ptr addrspace(1) %30, align 1
// CHECK-NEXT:   %31 = add i256 %24, 32
// CHECK-NEXT:   %32 = add i256 %26, 32
// CHECK-NEXT:   %33 = inttoptr i256 %32 to ptr addrspace(1)
// CHECK-NEXT:   %34 = inttoptr i256 %31 to ptr addrspace(1)
// CHECK-NEXT:   call void @llvm.memmove.p1.p1.i256(ptr addrspace(1) %33, ptr addrspace(1) %34, i256 %29, i1 false)
// CHECK-NEXT:   %35 = add i256 %32, %29
// CHECK-NEXT:   %36 = inttoptr i256 %35 to ptr addrspace(1)
// CHECK-NEXT:   store i256 0, ptr addrspace(1) %36, align 1
// CHECK-NEXT:   %37 = add i256 %29, 31
// CHECK-NEXT:   %38 = and i256 %37, -32
// CHECK-NEXT:   %39 = add i256 %32, %38
// CHECK-NEXT:   %40 = add i256 %25, 32
// CHECK-NEXT:   %41 = sub i256 %39, %25
// CHECK-NEXT:   call void @__return(i256 %25, i256 %41, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %43
// CHECK-EMPTY:
// CHECK-NEXT: 42:                                               ; preds = %3
// CHECK-NEXT:   br label %43
// CHECK-EMPTY:
// CHECK-NEXT: 43:                                               ; preds = %42, %13, %23
// CHECK-NEXT:   br label %44
// CHECK-EMPTY:
// CHECK-NEXT: 44:                                               ; preds = %43, %0
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define i256 @__entry(ptr addrspace(3) %0, i256 %1, i256 %2, i256 %3, i256 %4, i256 %5, i256 %6, i256 %7, i256 %8, i256 %9, i256 %10, i256 %11) #0 personality ptr @__personality {
// CHECK-NEXT:   store i256 0, ptr @memory_pointer, align 32
// CHECK-NEXT:   store i256 0, ptr @calldatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @returndatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @call_flags, align 32
// CHECK-NEXT:   store <10 x i256> zeroinitializer, ptr @extra_abi_data, align 512
// CHECK-NEXT:   store ptr addrspace(3) %0, ptr @ptr_calldata, align 32
// CHECK-NEXT:   store i256 and (i256 lshr (i256 ptrtoint (ptr @ptr_calldata to i256), i256 96), i256 4294967295), ptr @calldatasize, align 32
// CHECK-NEXT:   %13 = load i256, ptr @calldatasize, align 32
// CHECK-NEXT:   %14 = getelementptr i8, ptr addrspace(3) %0, i256 %13
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_return_data, align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_decommit, align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_active, align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 1), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 2), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 3), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 4), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 5), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 6), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 7), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 8), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 9), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 10), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 11), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 12), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 13), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 14), align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr getelementptr ([16 x i256], ptr @ptr_active, i256 0, i256 15), align 32
// CHECK-NEXT:   store i256 %1, ptr @call_flags, align 32
// CHECK-NEXT:   store i256 %2, ptr @extra_abi_data, align 32
// CHECK-NEXT:   store i256 %3, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 1), align 32
// CHECK-NEXT:   store i256 %4, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 2), align 32
// CHECK-NEXT:   store i256 %5, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 3), align 32
// CHECK-NEXT:   store i256 %6, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 4), align 32
// CHECK-NEXT:   store i256 %7, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 5), align 32
// CHECK-NEXT:   store i256 %8, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 6), align 32
// CHECK-NEXT:   store i256 %9, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 7), align 32
// CHECK-NEXT:   store i256 %10, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 8), align 32
// CHECK-NEXT:   store i256 %11, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 9), align 32
// CHECK-NEXT:   %15 = and i256 %1, 1
// CHECK-NEXT:   %16 = icmp eq i256 %15, 1
// CHECK-NEXT:   br i1 %16, label %17, label %18
// CHECK-EMPTY:
// CHECK-NEXT: 17:                                               ; preds = %12
// CHECK-NEXT:   call void @__deploy()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 18:                                               ; preds = %12
// CHECK-NEXT:   call void @__runtime()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 19:                                               ; preds = %17, %18
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define private i256 @f0_10() #0 personality ptr @__personality {
// CHECK-NEXT:   ret i256 42
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: define private i256 @f1_18() #0 personality ptr @__personality {
// CHECK-NEXT:   store i256 0, ptr addrspace(1) null, align 1
// CHECK-NEXT:   %1 = call i256 @__sha3(ptr addrspace(1) null, i256 32, i1 false)
// CHECK-NEXT:   %2 = load i256, ptr addrspace(5) null, align 1
// CHECK-NEXT:   %3 = add i256 %2, 31
// CHECK-NEXT:   %4 = and i256 %3, -32
// CHECK-NEXT:   %5 = add i256 %4, 32
// CHECK-NEXT:   %6 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %7 = add i256 %6, %5
// CHECK-NEXT:   %8 = icmp ugt i256 %7, 18446744073709551615
// CHECK-NEXT:   %9 = icmp ult i256 %7, %6
// CHECK-NEXT:   %10 = or i1 %8, %9
// CHECK-NEXT:   br i1 %10, label %11, label %12
// CHECK-EMPTY:
// CHECK-NEXT: 11:                                               ; preds = %0
// CHECK-NEXT:   store i256 35408467139433450592217433187231851964531694900788300625387963629091585785856, ptr addrspace(1) null, align 1
// CHECK-NEXT:   store i256 65, ptr addrspace(1) inttoptr (i256 4 to ptr addrspace(1)), align 1
// CHECK-NEXT:   call void @__revert(i256 0, i256 24, i256 0)
// CHECK-NEXT:   call void @.unreachable()
// CHECK-NEXT:   br label %12
// CHECK-EMPTY:
// CHECK-NEXT: 12:                                               ; preds = %11, %0
// CHECK-NEXT:   store i256 %7, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1
// CHECK-NEXT:   %13 = inttoptr i256 %6 to ptr addrspace(1)
// CHECK-NEXT:   store i256 %2, ptr addrspace(1) %13, align 1
// CHECK-NEXT:   %14 = add i256 %6, 32
// CHECK-NEXT:   %15 = add i256 %2, 31
// CHECK-NEXT:   %16 = and i256 %15, -32
// CHECK-NEXT:   br label %17
// CHECK-EMPTY:
// CHECK-NEXT: 17:                                               ; preds = %20, %12
// CHECK-NEXT:   %18 = phi i256 [ 0, %12 ], [ %27, %20 ]
// CHECK-NEXT:   %19 = icmp slt i256 %18, %16
// CHECK-NEXT:   br i1 %19, label %20, label %28
// CHECK-EMPTY:
// CHECK-NEXT: 20:                                               ; preds = %17
// CHECK-NEXT:   %21 = add i256 %1, %18
// CHECK-NEXT:   %22 = inttoptr i256 %21 to ptr addrspace(5)
// CHECK-NEXT:   %23 = load i256, ptr addrspace(5) %22, align 1
// CHECK-NEXT:   %24 = mul i256 %18, 32
// CHECK-NEXT:   %25 = add i256 %14, %24
// CHECK-NEXT:   %26 = inttoptr i256 %25 to ptr addrspace(1)
// CHECK-NEXT:   store i256 %23, ptr addrspace(1) %26, align 1
// CHECK-NEXT:   %27 = add i256 %18, 1
// CHECK-NEXT:   br label %17
// CHECK-EMPTY:
// CHECK-NEXT: 28:                                               ; preds = %17
// CHECK-NEXT:   ret i256 %6
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid
// CHECK-NEXT: declare i32 @__personality() #0
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nounwind willreturn memory(none)
// CHECK-NEXT: declare i256 @llvm.eravm.getu128() #1
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
// CHECK-NEXT: declare void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(3) noalias nocapture readonly, i256, i1 immarg) #2
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
// CHECK-NEXT: declare void @llvm.memmove.p1.p1.i256(ptr addrspace(1) nocapture writeonly, ptr addrspace(1) nocapture readonly, i256, i1 immarg) #2
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noinline noreturn
// CHECK-NEXT: define internal void @__cxa_throw(ptr %addr, ptr %0, ptr %1) #3 {
// CHECK-NEXT:   %addrval = ptrtoint ptr %addr to i256
// CHECK-NEXT:   call void @llvm.eravm.throw(i256 %addrval)
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noreturn
// CHECK-NEXT: declare void @llvm.eravm.throw(i256) #4
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noreturn nounwind
// CHECK-NEXT: define internal void @__revert(i256 %0, i256 %1, i256 %2) #5 personality ptr @__personality {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %3 = call i256 @llvm.umin.i256(i256 %0, i256 4294967295)
// CHECK-NEXT:   %4 = call i256 @llvm.umin.i256(i256 %1, i256 4294967295)
// CHECK-NEXT:   %offset_shifted.i = shl nuw nsw i256 %3, 64
// CHECK-NEXT:   %length_shifted.i = shl nuw nsw i256 %4, 96
// CHECK-NEXT:   %mode_shifted.i = shl nuw nsw i256 %2, 224
// CHECK-NEXT:   %tmp.i = add i256 %offset_shifted.i, %length_shifted.i
// CHECK-NEXT:   %abi.i = add i256 %tmp.i, %mode_shifted.i
// CHECK-NEXT:   tail call void @llvm.eravm.revert(i256 %abi.i)
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noreturn nounwind
// CHECK-NEXT: declare void @llvm.eravm.revert(i256) #6
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
// CHECK-NEXT: declare i256 @llvm.umin.i256(i256, i256) #7
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noreturn nounwind
// CHECK-NEXT: define internal void @__return(i256 %0, i256 %1, i256 %2) #5 personality ptr @__personality {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %3 = call i256 @llvm.umin.i256(i256 %0, i256 4294967295)
// CHECK-NEXT:   %4 = call i256 @llvm.umin.i256(i256 %1, i256 4294967295)
// CHECK-NEXT:   %offset_shifted.i = shl nuw nsw i256 %3, 64
// CHECK-NEXT:   %length_shifted.i = shl nuw nsw i256 %4, 96
// CHECK-NEXT:   %mode_shifted.i = shl nuw nsw i256 %2, 224
// CHECK-NEXT:   %tmp.i = add i256 %offset_shifted.i, %length_shifted.i
// CHECK-NEXT:   %abi.i = add i256 %tmp.i, %mode_shifted.i
// CHECK-NEXT:   tail call void @llvm.eravm.return(i256 %abi.i)
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: noreturn nounwind
// CHECK-NEXT: declare void @llvm.eravm.return(i256) #6
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid memory(argmem: read)
// CHECK-NEXT: define internal i256 @__sha3(ptr addrspace(1) nocapture nofree noundef %0, i256 %1, i1 %throw_at_failure) #8 personality ptr @__personality {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %addr_int = ptrtoint ptr addrspace(1) %0 to i256
// CHECK-NEXT:   %2 = tail call i256 @llvm.umin.i256(i256 %addr_int, i256 4294967295)
// CHECK-NEXT:   %3 = tail call i256 @llvm.umin.i256(i256 %1, i256 4294967295)
// CHECK-NEXT:   %gas_left = tail call i256 @llvm.eravm.gasleft()
// CHECK-NEXT:   %4 = tail call i256 @llvm.umin.i256(i256 %gas_left, i256 4294967295)
// CHECK-NEXT:   %abi_data_input_offset_shifted = shl nuw nsw i256 %2, 64
// CHECK-NEXT:   %abi_data_input_length_shifted = shl nuw nsw i256 %3, 96
// CHECK-NEXT:   %abi_data_gas_shifted = shl nuw nsw i256 %4, 192
// CHECK-NEXT:   %abi_data_offset_and_length = add i256 %abi_data_input_length_shifted, %abi_data_input_offset_shifted
// CHECK-NEXT:   %abi_data_add_gas = add i256 %abi_data_gas_shifted, %abi_data_offset_and_length
// CHECK-NEXT:   %abi_data_add_system_call_marker = add i256 %abi_data_add_gas, 904625697166532776746648320380374280103671755200316906558262375061821325312
// CHECK-NEXT:   %call_external = tail call { ptr addrspace(3), i1 } @__staticcall(i256 %abi_data_add_system_call_marker, i256 32784, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef, i256 undef)
// CHECK-NEXT:   %status_code = extractvalue { ptr addrspace(3), i1 } %call_external, 1
// CHECK-NEXT:   br i1 %status_code, label %success_block, label %failure_block
// CHECK-EMPTY:
// CHECK-NEXT: success_block:                                    ; preds = %entry
// CHECK-NEXT:   %abi_data_pointer = extractvalue { ptr addrspace(3), i1 } %call_external, 0
// CHECK-NEXT:   %data_pointer = bitcast ptr addrspace(3) %abi_data_pointer to ptr addrspace(3)
// CHECK-NEXT:   %keccak256_child_data = load i256, ptr addrspace(3) %data_pointer, align 1
// CHECK-NEXT:   ret i256 %keccak256_child_data
// CHECK-EMPTY:
// CHECK-NEXT: failure_block:                                    ; preds = %entry
// CHECK-NEXT:   br i1 %throw_at_failure, label %throw_block, label %revert_block
// CHECK-EMPTY:
// CHECK-NEXT: revert_block:                                     ; preds = %failure_block
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0)
// CHECK-NEXT:   unreachable
// CHECK-EMPTY:
// CHECK-NEXT: throw_block:                                      ; preds = %failure_block
// CHECK-NEXT:   call void @__cxa_throw(ptr noalias nocapture nofree align 32 null, ptr noalias nocapture nofree align 32 undef, ptr noalias nocapture nofree align 32 undef)
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nomerge nounwind willreturn memory(inaccessiblemem: readwrite)
// CHECK-NEXT: declare i256 @llvm.eravm.gasleft() #9
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nofree null_pointer_is_valid memory(argmem: read)
// CHECK-NEXT: declare { ptr addrspace(3), i1 } @__staticcall(i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) #10
// CHECK-EMPTY:
// CHECK-NEXT: attributes #0 = { nofree null_pointer_is_valid }
// CHECK-NEXT: attributes #1 = { nounwind willreturn memory(none) }
// CHECK-NEXT: attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
// CHECK-NEXT: attributes #3 = { noinline noreturn }
// CHECK-NEXT: attributes #4 = { noreturn }
// CHECK-NEXT: attributes #5 = { noreturn nounwind "noinline-oz" }
// CHECK-NEXT: attributes #6 = { noreturn nounwind }
// CHECK-NEXT: attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
// CHECK-NEXT: attributes #8 = { nofree null_pointer_is_valid memory(argmem: read) "noinline-oz" }
// CHECK-NEXT: attributes #9 = { nomerge nounwind willreturn memory(inaccessiblemem: readwrite) }
// CHECK-NEXT: attributes #10 = { nofree null_pointer_is_valid memory(argmem: read) }
// CHECK-EMPTY:
// CHECK-NEXT: !llvm.module.flags = !{!0}
// CHECK-EMPTY:
// CHECK-NEXT: !0 = !{i32 2, !"Debug Info Version", i32 3}
// CHECK-EMPTY:
// ASM: 	.text
// ASM-NEXT: 	incsp	33
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: .unreachable:
// ASM-NEXT: .func_begin0:
// ASM-NEXT: .func_end0:
// ASM-EMPTY:
// ASM-NEXT: __deploy:
// ASM-NEXT: .func_begin1:
// ASM-NEXT: 	add	128, r0, r1
// ASM-NEXT: 	stm.h	64, r1
// ASM-NEXT: 	ldvl	r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB1_2
// ASM-NEXT: 	jump	@.BB1_1
// ASM-NEXT: .BB1_1:
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB1_2
// ASM-NEXT: .BB1_2:
// ASM-NEXT: 	add	32, r0, r1
// ASM-NEXT: 	stm.ah	256, r1
// ASM-NEXT: 	stm.ah	288, r0
// ASM-NEXT: 	add	256, r0, r1
// ASM-NEXT: 	add	64, r0, r2
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .func_end1:
// ASM-EMPTY:
// ASM-NEXT: __runtime:
// ASM-NEXT: .func_begin2:
// ASM-NEXT: 	incsp	18
// ASM-NEXT: 	add	128, r0, r1
// ASM-NEXT: 	stm.h	64, r1
// ASM-NEXT: 	add	stack[@calldatasize], r0, r1
// ASM-NEXT: 	sub.s!	4, r1, r1
// ASM-NEXT: 	jump.lt	@.BB2_22
// ASM-NEXT: 	jump	@.BB2_1
// ASM-NEXT: .BB2_1:
// ASM-NEXT: 	addp	stack[@ptr_calldata], r0, r1
// ASM-NEXT: 	addp.s	0, r1, r1
// ASM-NEXT: 	ldp	r1, r1
// ASM-NEXT: 	shr.s	224, r1, r1
// ASM-NEXT: 	add	r1, r0, stack-[18]
// ASM-NEXT: 	sub.s!	code[@CPI2_0], r1, r1
// ASM-NEXT: 	jump.eq	@.BB2_2
// ASM-NEXT: 	jump	@.BB2_23
// ASM-NEXT: .BB2_23:
// ASM-NEXT: 	add	stack-[18], r0, r1
// ASM-NEXT: 	and	code[@CPI2_1], r1, r1
// ASM-NEXT: 	sub.s!	code[@CPI2_2], r1, r1
// ASM-NEXT: 	jump.eq	@.BB2_5
// ASM-NEXT: 	jump	@.BB2_20
// ASM-NEXT: .BB2_2:
// ASM-NEXT: 	ldvl	r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB2_4
// ASM-NEXT: 	jump	@.BB2_3
// ASM-NEXT: .BB2_3:
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB2_4
// ASM-NEXT: .BB2_4:
// ASM-NEXT: 	call	r0, @f0_10, @DEFAULT_UNWIND
// ASM-NEXT: 	add	r1, r0, r2
// ASM-NEXT: 	ldm.h	64, r1
// ASM-NEXT: 	stm.h	r1, r2
// ASM-NEXT: 	add	32, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB2_21
// ASM-NEXT: .BB2_5:
// ASM-NEXT: 	ldvl	r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB2_7
// ASM-NEXT: 	jump	@.BB2_6
// ASM-NEXT: .BB2_6:
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB2_7
// ASM-NEXT: .BB2_7:
// ASM-NEXT: 	call	r0, @f1_18, @DEFAULT_UNWIND
// ASM-NEXT: 	ldm.h	64, r2
// ASM-NEXT: 	add	r2, r0, stack-[9]
// ASM-NEXT: 	add	32, r2, r4
// ASM-NEXT: 	add	32, r0, r3
// ASM-NEXT: 	stm.h	r2, r3
// ASM-NEXT: 	ldm.h	r1, r3
// ASM-NEXT: 	add	r3, r0, stack-[10]
// ASM-NEXT: 	stm.h	r4, r3
// ASM-NEXT: 	add	32, r1, r1
// ASM-NEXT: 	add	r1, r0, stack-[11]
// ASM-NEXT: 	add	64, r2, r2
// ASM-NEXT: 	add	r2, r0, stack-[12]
// ASM-NEXT: 	add	r2, r0, stack-[13]
// ASM-NEXT: 	and	code[@CPI2_3], r3, r4
// ASM-NEXT: 	add	r4, r0, stack-[14]
// ASM-NEXT: 	and	31, r3, r3
// ASM-NEXT: 	add	r3, r0, stack-[15]
// ASM-NEXT: 	sub!	r4, r0, r4
// ASM-NEXT: 	add	0, r0, r4
// ASM-NEXT: 	add.eq	1, r0, r4
// ASM-NEXT: 	add	r4, r0, stack-[16]
// ASM-NEXT: 	sub!	r3, r0, r3
// ASM-NEXT: 	add	0, r0, r3
// ASM-NEXT: 	add.eq	1, r0, r3
// ASM-NEXT: 	add	r3, r0, stack-[17]
// ASM-NEXT: 	sub!	r1, r2, r1
// ASM-NEXT: 	jump.ge	@.BB2_12
// ASM-NEXT: 	jump	@.BB2_8
// ASM-NEXT: .BB2_8:
// ASM-NEXT: 	add	stack-[16], r0, r1
// ASM-NEXT: 	and	1, r1, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB2_10
// ASM-NEXT: 	jump	@.BB2_9
// ASM-NEXT: .BB2_9:
// ASM-NEXT: 	add	stack-[17], r0, r3
// ASM-NEXT: 	and	1, r3, r3
// ASM-NEXT: 	sub!	r3, r0, r3
// ASM-NEXT: 	add	stack-[11], r0, stack-[7]
// ASM-NEXT: 	add	stack-[13], r0, stack-[8]
// ASM-NEXT: 	jump.ne	@.BB2_19
// ASM-NEXT: 	jump	@.BB2_18
// ASM-NEXT: .BB2_10:
// ASM-NEXT: 	add	stack-[15], r0, r3
// ASM-NEXT: 	add	stack-[11], r3, r4
// ASM-NEXT: 	sub.s!	32, r4, stack-[4]
// ASM-NEXT: 	add	stack-[13], r3, r2
// ASM-NEXT: 	sub.s!	32, r2, stack-[5]
// ASM-NEXT: 	add	stack-[14], r0, stack-[6]
// ASM-NEXT: 	jump	@.BB2_11
// ASM-NEXT: .BB2_11:
// ASM-NEXT: 	add	stack-[6], r0, r1
// ASM-NEXT: 	add	stack-[4], r1, r3
// ASM-NEXT: 	ldm.h	r3, r3
// ASM-NEXT: 	add	stack-[5], r1, r2
// ASM-NEXT: 	stm.h	r2, r3
// ASM-NEXT: 	sub.s!	32, r1, stack-[6]
// ASM-NEXT: 	sub!	stack-[6], r0, r2
// ASM-NEXT: 	jump.eq	@.BB2_9
// ASM-NEXT: 	jump	@.BB2_11
// ASM-NEXT: .BB2_12:
// ASM-NEXT: 	add	stack-[16], r0, r1
// ASM-NEXT: 	add	stack-[14], r0, r3
// ASM-NEXT: 	add	stack-[13], r3, stack-[3]
// ASM-NEXT: 	and	1, r1, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB2_14
// ASM-NEXT: 	jump	@.BB2_13
// ASM-NEXT: .BB2_13:
// ASM-NEXT: 	add	stack-[17], r0, r1
// ASM-NEXT: 	and	1, r1, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.ne	@.BB2_19
// ASM-NEXT: 	jump	@.BB2_17
// ASM-NEXT: .BB2_14:
// ASM-NEXT: 	add	stack-[11], r0, stack-[1]
// ASM-NEXT: 	add	stack-[13], r0, stack-[2]
// ASM-NEXT: 	jump	@.BB2_15
// ASM-NEXT: .BB2_15:
// ASM-NEXT: 	add	stack-[2], r0, r4
// ASM-NEXT: 	add	stack-[1], r0, r5
// ASM-NEXT: 	add	32, r5, stack-[1]
// ASM-NEXT: 	add	32, r4, r1
// ASM-NEXT: 	ldm.h	r5, r5
// ASM-NEXT: 	stm.h	r4, r5
// ASM-NEXT: 	sub.s!	stack-[3], r1, r3
// ASM-NEXT: 	add	r1, r0, stack-[2]
// ASM-NEXT: 	jump.ne	@.BB2_15
// ASM-NEXT: 	jump	@.BB2_16
// ASM-NEXT: .BB2_16:
// ASM-NEXT: 	jump	@.BB2_13
// ASM-NEXT: .BB2_17:
// ASM-NEXT: 	add	stack-[14], r0, r3
// ASM-NEXT: 	add	stack-[11], r3, stack-[7]
// ASM-NEXT: 	add	stack-[3], r0, stack-[8]
// ASM-NEXT: 	jump	@.BB2_18
// ASM-NEXT: .BB2_18:
// ASM-NEXT: 	add	stack-[15], r0, r3
// ASM-NEXT: 	add	stack-[7], r0, r2
// ASM-NEXT: 	add	stack-[8], r0, r1
// ASM-NEXT: 	ldm.h	r2, r2
// ASM-NEXT: 	shl.s	3, r3, r4
// ASM-NEXT: 	sub	256, r4, r3
// ASM-NEXT: 	shr	r2, r3, r2
// ASM-NEXT: 	shl	r2, r3, r2
// ASM-NEXT: 	ldm.h	r1, r3
// ASM-NEXT: 	shl	r3, r4, r3
// ASM-NEXT: 	shr	r3, r4, r3
// ASM-NEXT: 	or	r2, r3, r2
// ASM-NEXT: 	stm.h	r1, r2
// ASM-NEXT: 	jump	@.BB2_19
// ASM-NEXT: .BB2_19:
// ASM-NEXT: 	add	stack-[9], r0, r1
// ASM-NEXT: 	add	stack-[10], r0, r3
// ASM-NEXT: 	add	stack-[12], r3, r4
// ASM-NEXT: 	stm.h	r4, r0
// ASM-NEXT: 	add	31, r3, r3
// ASM-NEXT: 	and	code[@CPI2_3], r3, r3
// ASM-NEXT: 	add	stack-[12], r3, r2
// ASM-NEXT: 	sub!	r2, r1, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB2_21
// ASM-NEXT: .BB2_20:
// ASM-NEXT: 	jump	@.BB2_21
// ASM-NEXT: .BB2_21:
// ASM-NEXT: 	jump	@.BB2_22
// ASM-NEXT: .BB2_22:
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .func_end2:
// ASM-EMPTY:
// ASM-NEXT: 	.globl	__entry
// ASM-NEXT: __entry:
// ASM-NEXT: .func_begin3:
// ASM-NEXT: 	incsp	2
// ASM-NEXT: 	addp	r1, r0, stack-[1]
// ASM-NEXT: 	add	0, r0, stack[@memory_pointer]
// ASM-NEXT: 	add	0, r0, stack[@calldatasize]
// ASM-NEXT: 	add	0, r0, stack[@returndatasize]
// ASM-NEXT: 	add	0, r0, stack[@call_flags]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 9]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 8]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 7]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 6]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 5]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 4]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 3]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 2]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data + 1]
// ASM-NEXT: 	add	0, r0, stack[@extra_abi_data]
// ASM-NEXT: 	addp	r1, r0, stack[@ptr_calldata]
// ASM-NEXT: 	add	stack[@ptr_calldata + r0], r0, r13
// ASM-NEXT: 	shr.s	96, r13, r13
// ASM-NEXT: 	and	code[@CPI3_0], r13, stack[@calldatasize]
// ASM-NEXT: 	add	stack[@calldatasize], r0, r13
// ASM-NEXT: 	add	r13, r0, stack-[2]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_return_data]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_decommit]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 1]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 2]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 3]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 4]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 5]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 6]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 7]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 8]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 9]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 10]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 11]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 12]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 13]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 14]
// ASM-NEXT: 	addp	r1, r13, stack[@ptr_active + 15]
// ASM-NEXT: 	add	r2, r0, stack[@call_flags]
// ASM-NEXT: 	add	r3, r0, stack[@extra_abi_data]
// ASM-NEXT: 	add	r4, r0, stack[@extra_abi_data + 1]
// ASM-NEXT: 	add	r5, r0, stack[@extra_abi_data + 2]
// ASM-NEXT: 	add	r6, r0, stack[@extra_abi_data + 3]
// ASM-NEXT: 	add	r7, r0, stack[@extra_abi_data + 4]
// ASM-NEXT: 	add	r8, r0, stack[@extra_abi_data + 5]
// ASM-NEXT: 	add	r9, r0, stack[@extra_abi_data + 6]
// ASM-NEXT: 	add	r10, r0, stack[@extra_abi_data + 7]
// ASM-NEXT: 	add	r11, r0, stack[@extra_abi_data + 8]
// ASM-NEXT: 	add	r12, r0, stack[@extra_abi_data + 9]
// ASM-NEXT: 	and	1, r2, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB3_2
// ASM-NEXT: 	jump	@.BB3_1
// ASM-NEXT: .BB3_1:
// ASM-NEXT: 	call	r0, @__deploy, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB3_3
// ASM-NEXT: .BB3_2:
// ASM-NEXT: 	call	r0, @__runtime, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB3_3
// ASM-NEXT: .BB3_3:
// ASM-NEXT: .func_end3:
// ASM-EMPTY:
// ASM-NEXT: f0_10:
// ASM-NEXT: .func_begin4:
// ASM-NEXT: 	add	42, r0, r1
// ASM-NEXT: 	ret
// ASM-NEXT: .func_end4:
// ASM-EMPTY:
// ASM-NEXT: f1_18:
// ASM-NEXT: .func_begin5:
// ASM-NEXT: 	incsp	8
// ASM-NEXT: 	stm.h	0, r0
// ASM-NEXT: 	add	32, r0, r2
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__sha3, @DEFAULT_UNWIND
// ASM-NEXT: 	add	r1, r0, stack-[5]
// ASM-NEXT: 	lds	r0, r1
// ASM-NEXT: 	add	r1, r0, stack-[6]
// ASM-NEXT: 	add	31, r1, r1
// ASM-NEXT: 	and	code[@CPI5_3], r1, r1
// ASM-NEXT: 	ldm.h	64, r2
// ASM-NEXT: 	add	r2, r0, stack-[7]
// ASM-NEXT: 	add	r1, r2, r1
// ASM-NEXT: 	add	32, r1, r1
// ASM-NEXT: 	add	r1, r0, stack-[8]
// ASM-NEXT: 	sub.s!	code[@CPI5_0], r1, r1
// ASM-NEXT: 	jump.gt	@.BB5_1
// ASM-NEXT: 	jump	@.BB5_6
// ASM-NEXT: .BB5_6:
// ASM-NEXT: 	add	stack-[7], r0, r2
// ASM-NEXT: 	sub!	stack-[8], r2, r1
// ASM-NEXT: 	jump.ge	@.BB5_2
// ASM-NEXT: 	jump	@.BB5_1
// ASM-NEXT: .BB5_1:
// ASM-NEXT: 	add	code[@CPI5_1], r0, r1
// ASM-NEXT: 	stm.h	0, r1
// ASM-NEXT: 	add	65, r0, r1
// ASM-NEXT: 	stm.h	4, r1
// ASM-NEXT: 	add	24, r0, r2
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: 	jump	@.BB5_2
// ASM-NEXT: .BB5_2:
// ASM-NEXT: 	add	stack-[6], r0, r1
// ASM-NEXT: 	add	stack-[7], r0, r2
// ASM-NEXT: 	add	stack-[8], r0, r3
// ASM-NEXT: 	stm.h	64, r3
// ASM-NEXT: 	stm.h	r2, r1
// ASM-NEXT: 	add	32, r2, stack-[2]
// ASM-NEXT: 	add	31, r1, r1
// ASM-NEXT: 	and	code[@CPI5_3], r1, stack-[3]
// ASM-NEXT: 	add	r0, r0, stack-[4]
// ASM-NEXT: 	jump	@.BB5_3
// ASM-NEXT: .BB5_3:
// ASM-NEXT: 	add	stack-[3], r0, r3
// ASM-NEXT: 	add	stack-[4], r0, r1
// ASM-NEXT: 	add	r1, r0, stack-[1]
// ASM-NEXT: 	sub!	r1, r3, r2
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add.ge	code[@CPI5_2], r0, r2
// ASM-NEXT: 	and	code[@CPI5_2], r3, r4
// ASM-NEXT: 	and	code[@CPI5_2], r1, r1
// ASM-NEXT: 	xor	r1, r4, r3
// ASM-NEXT: 	sub!	r1, r4, r1
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add.lt	code[@CPI5_2], r0, r1
// ASM-NEXT: 	sub.s!	code[@CPI5_2], r3, r3
// ASM-NEXT: 	add.ne	r2, r0, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.ne	@.BB5_5
// ASM-NEXT: 	jump	@.BB5_4
// ASM-NEXT: .BB5_4:
// ASM-NEXT: 	add	stack-[1], r0, r1
// ASM-NEXT: 	add	stack-[5], r1, r3
// ASM-NEXT: 	lds	r3, r3
// ASM-NEXT: 	shl.s	5, r1, r4
// ASM-NEXT: 	add	stack-[2], r4, r2
// ASM-NEXT: 	stm.h	r2, r3
// ASM-NEXT: 	add	1, r1, stack-[4]
// ASM-NEXT: 	jump	@.BB5_3
// ASM-NEXT: .BB5_5:
// ASM-NEXT: 	add	stack-[7], r0, r1
// ASM-NEXT: 	ret
// ASM-NEXT: .func_end5:
// ASM-EMPTY:
// ASM-NEXT: __cxa_throw:
// ASM-NEXT: 	rev
// ASM-EMPTY:
// ASM-NEXT: __revert:
// ASM-NEXT: .func_begin6:
// ASM-NEXT: 	incsp	1
// ASM-NEXT: 	add	r3, r0, stack-[1]
// ASM-NEXT: 	add	r2, r0, r3
// ASM-NEXT: 	add	stack-[1], r0, r2
// ASM-NEXT: 	sub.s!	code[@CPI7_0], r1, r4
// ASM-NEXT: 	add.ge	code[@CPI7_0], r0, r1
// ASM-NEXT: 	sub.s!	code[@CPI7_0], r3, r4
// ASM-NEXT: 	add.ge	code[@CPI7_0], r0, r3
// ASM-NEXT: 	shl.s	64, r1, r1
// ASM-NEXT: 	shl.s	96, r3, r3
// ASM-NEXT: 	shl.s	224, r2, r2
// ASM-NEXT: 	or	r1, r3, r1
// ASM-NEXT: 	or	r1, r2, r1
// ASM-NEXT: 	revl	@DEFAULT_FAR_REVERT
// ASM-NEXT: .func_end6:
// ASM-EMPTY:
// ASM-NEXT: __return:
// ASM-NEXT: .func_begin7:
// ASM-NEXT: 	incsp	1
// ASM-NEXT: 	add	r3, r0, stack-[1]
// ASM-NEXT: 	add	r2, r0, r3
// ASM-NEXT: 	add	stack-[1], r0, r2
// ASM-NEXT: 	sub.s!	code[@CPI8_0], r1, r4
// ASM-NEXT: 	add.ge	code[@CPI8_0], r0, r1
// ASM-NEXT: 	sub.s!	code[@CPI8_0], r3, r4
// ASM-NEXT: 	add.ge	code[@CPI8_0], r0, r3
// ASM-NEXT: 	shl.s	64, r1, r1
// ASM-NEXT: 	shl.s	96, r3, r3
// ASM-NEXT: 	shl.s	224, r2, r2
// ASM-NEXT: 	or	r1, r3, r1
// ASM-NEXT: 	or	r1, r2, r1
// ASM-NEXT: 	retl	@DEFAULT_FAR_RETURN
// ASM-NEXT: .func_end7:
// ASM-EMPTY:
// ASM-NEXT: __sha3:
// ASM-NEXT: .func_begin8:
// ASM-NEXT: 	incsp	3
// ASM-NEXT: 	add	r3, r0, stack-[1]
// ASM-NEXT: 	sub.s!	code[@CPI9_0], r1, r3
// ASM-NEXT: 	add	code[@CPI9_0], r0, r3
// ASM-NEXT: 	add.lt	r1, r0, r3
// ASM-NEXT: 	sub.s!	code[@CPI9_0], r2, r1
// ASM-NEXT: 	add.ge	code[@CPI9_0], r0, r2
// ASM-NEXT: 	ergs	r1
// ASM-NEXT: 	sub.s!	code[@CPI9_0], r1, r4
// ASM-NEXT: 	add.ge	code[@CPI9_0], r0, r1
// ASM-NEXT: 	shl.s	64, r3, r3
// ASM-NEXT: 	shl.s	96, r2, r2
// ASM-NEXT: 	shl.s	192, r1, r1
// ASM-NEXT: 	or	r2, r3, r2
// ASM-NEXT: 	or	r1, r2, r1
// ASM-NEXT: 	or	code[@CPI9_1], r1, r1
// ASM-NEXT: 	add	32784, r0, r2
// ASM-NEXT: 	call	r0, @__staticcall, @DEFAULT_UNWIND
// ASM-NEXT: 	addp	r1, r0, stack-[2]
// ASM-NEXT: 	add	r2, r0, r3
// ASM-NEXT: 	and	1, r3, r1
// ASM-NEXT: 	addp	stack-[2], r0, stack-[3]
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB9_2
// ASM-NEXT: 	jump	@.BB9_1
// ASM-NEXT: .BB9_1:
// ASM-NEXT: 	addp	stack-[3], r0, r1
// ASM-NEXT: 	ldp	r1, r1
// ASM-NEXT: 	ret
// ASM-NEXT: .BB9_2:
// ASM-NEXT: 	add	stack-[1], r0, r1
// ASM-NEXT: 	and	1, r1, r1
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.ne	@.BB9_4
// ASM-NEXT: 	jump	@.BB9_3
// ASM-NEXT: .BB9_3:
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: .BB9_4:
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	rev
// ASM-NEXT: .func_end8:
// ASM-EMPTY:
// ASM-NEXT: __staticcall:
// ASM-NEXT: .func_begin9:
// ASM-NEXT: 	incsp	2
// ASM-NEXT: .tmp0:
// ASM-NEXT: 	callf.st	r1, r2, @.BB10_2
// ASM-NEXT: 	addp	r1, r0, stack-[1]
// ASM-NEXT: 	addp	stack-[1], r0, r1
// ASM-NEXT: .tmp1:
// ASM-NEXT: 	addp	r1, r0, stack-[2]
// ASM-NEXT: 	jump	@.BB10_1
// ASM-NEXT: .BB10_1:
// ASM-NEXT: 	addp	stack-[2], r0, r1
// ASM-NEXT: 	add	1, r0, r2
// ASM-NEXT: 	ret
// ASM-NEXT: .BB10_2:
// ASM-NEXT: .tmp2:
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	ret
// ASM-NEXT: .func_end9:
// ASM-EMPTY:
// ASM-NEXT: 	.data
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: ptr_decommit:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: ptr_return_data:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: ptr_calldata:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: ptr_active:
// ASM-NEXT: 	.zero	512
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: extra_abi_data:
// ASM-NEXT: 	.zero	320
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: call_flags:
// ASM-NEXT: 	.cell	0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: returndatasize:
// ASM-NEXT: 	.cell	0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: calldatasize:
// ASM-NEXT: 	.cell	0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5, 0x0
// ASM-NEXT: memory_pointer:
// ASM-NEXT: 	.cell	0
// ASM-EMPTY:
// ASM-NEXT: 	.rodata
// ASM-NEXT: CPI2_0:
// ASM-NEXT: 	.cell	2776958069
// ASM-NEXT: CPI2_1:
// ASM-NEXT: CPI3_0:
// ASM-NEXT: CPI7_0:
// ASM-NEXT: CPI8_0:
// ASM-NEXT: CPI9_0:
// ASM-NEXT: 	.cell	4294967295
// ASM-NEXT: CPI2_2:
// ASM-NEXT: 	.cell	3263152901
// ASM-NEXT: CPI2_3:
// ASM-NEXT: CPI5_3:
// ASM-NEXT: 	.cell	-32
// ASM-NEXT: CPI5_0:
// ASM-NEXT: 	.cell	18446744073709551615
// ASM-NEXT: CPI5_1:
// ASM-NEXT: 	.cell	35408467139433450592217433187231851964531694900788300625387963629091585785856
// ASM-NEXT: CPI5_2:
// ASM-NEXT: 	.cell	-57896044618658097711785492504343953926634992332820282019728792003956564819968
// ASM-NEXT: CPI9_1:
// ASM-NEXT: 	.cell	904625697166532776746648320380374280103671755200316906558262375061821325312
// ASM-NEXT: 	.text
// ASM-NEXT: DEFAULT_UNWIND:
// ASM-NEXT: 	pncl	@DEFAULT_UNWIND
// ASM-NEXT: DEFAULT_FAR_RETURN:
// ASM-NEXT: 	retl	@DEFAULT_FAR_RETURN
// ASM-NEXT: DEFAULT_FAR_REVERT:
// ASM-NEXT: 	revl	@DEFAULT_FAR_REVERT
// ASM-EMPTY:
