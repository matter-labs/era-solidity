// RUN: solc --mlir-action=print-std-mlir --mlir-target=eravm --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  uint ui;
  mapping(address => uint) m0;
  mapping(address => mapping(address => uint256)) m1;
  string s;

  function get_ui() private returns (uint) { return ui; }
  function get_m0(address a) private returns (uint) { return m0[a]; }
  function get_m1(address a, address b) private returns (uint) { return m1[a][b]; }
  function get_s() private returns (string memory) { return s; }

  function set_s(string memory a) private { s = a; }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc = loc(unknown)
// CHECK-NEXT: #loc2 = loc({{.*}}:2:0)
// CHECK-NEXT: module {
// CHECK-NEXT:   func.func private @__return(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @".unreachable"() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     llvm.unreachable loc(#loc1)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__revert(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__sha3(!llvm.ptr<1>, i256, i1) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__deploy() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %1 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %2 = arith.cmpi ne, %1, %c0_i256 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %2 {
// CHECK-NEXT:       %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_9 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_8, %c0_i256_8, %c2_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %3 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %5 = llvm.inttoptr %4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %8 = llvm.getelementptr %7[%c0_i256_1] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memcpy"(%5, %8, %c0_i256_2) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c256_i256 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.inttoptr %c256_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c32_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c288_i256 = arith.constant 288 : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.inttoptr %c288_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_3, %10 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %11 = arith.muli %c0_i256_4, %c2_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %12 = arith.addi %11, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:     %c256_i256_6 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_7 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     call @__return(%c256_i256_6, %12, %c2_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__runtime() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     call @__revert(%c0_i256, %c0_i256_0, %c0_i256_1) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_decommit() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_return_data() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_active() {addr_space = 0 : i32} : !llvm.array<16 x ptr<3>> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @extra_abi_data(dense<0> : tensor<10xi256>) {addr_space = 0 : i32} : !llvm.array<10 x i256> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @call_flags(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @returndatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @memory_pointer(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   func.func private @__entry(%arg0: !llvm.ptr<3> loc({{.*}}:2:0), %arg1: i256 loc({{.*}}:2:0), %arg2: i256 loc({{.*}}:2:0), %arg3: i256 loc({{.*}}:2:0), %arg4: i256 loc({{.*}}:2:0), %arg5: i256 loc({{.*}}:2:0), %arg6: i256 loc({{.*}}:2:0), %arg7: i256 loc({{.*}}:2:0), %arg8: i256 loc({{.*}}:2:0), %arg9: i256 loc({{.*}}:2:0), %arg10: i256 loc({{.*}}:2:0), %arg11: i256 loc({{.*}}:2:0)) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %0 = llvm.mlir.addressof @memory_pointer : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_0, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.mlir.addressof @returndatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_1, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %3 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_2, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %5 = llvm.mlir.constant(dense<0> : vector<10xi256>) : vector<10xi256> loc(#loc2)
// CHECK-NEXT:     llvm.store %5, %4 : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg0, %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.ptrtoint %6 : !llvm.ptr<ptr<3>> to i256 loc(#loc2)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:     %8 = llvm.lshr %7, %c96_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.and %8, %c4294967295_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %11 = llvm.load %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %12 = llvm.getelementptr %arg0[%11] : (!llvm.ptr<3>, i256) -> !llvm.ptr, i8 loc(#loc2)
// CHECK-NEXT:     %13 = llvm.mlir.addressof @ptr_return_data : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_decommit : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %15 = llvm.mlir.addressof @ptr_active : !llvm.ptr<array<16 x ptr<3>>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%c0_i256_3, %c0_i256_4] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %16 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %17 = llvm.getelementptr %15[%c0_i256_5, %c1_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %17 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %18 = llvm.getelementptr %15[%c0_i256_6, %c2_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %18 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %19 = llvm.getelementptr %15[%c0_i256_7, %c3_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %19 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %20 = llvm.getelementptr %15[%c0_i256_8, %c4_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %20 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %21 = llvm.getelementptr %15[%c0_i256_9, %c5_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %21 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %22 = llvm.getelementptr %15[%c0_i256_10, %c6_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %22 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %23 = llvm.getelementptr %15[%c0_i256_11, %c7_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %23 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %24 = llvm.getelementptr %15[%c0_i256_12, %c8_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %24 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %25 = llvm.getelementptr %15[%c0_i256_13, %c9_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %25 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc2)
// CHECK-NEXT:     %26 = llvm.getelementptr %15[%c0_i256_14, %c10_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %26 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc2)
// CHECK-NEXT:     %27 = llvm.getelementptr %15[%c0_i256_15, %c11_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %27 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_16 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c12_i256 = arith.constant 12 : i256 loc(#loc2)
// CHECK-NEXT:     %28 = llvm.getelementptr %15[%c0_i256_16, %c12_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %28 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_17 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c13_i256 = arith.constant 13 : i256 loc(#loc2)
// CHECK-NEXT:     %29 = llvm.getelementptr %15[%c0_i256_17, %c13_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %29 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c14_i256 = arith.constant 14 : i256 loc(#loc2)
// CHECK-NEXT:     %30 = llvm.getelementptr %15[%c0_i256_18, %c14_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %30 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c15_i256 = arith.constant 15 : i256 loc(#loc2)
// CHECK-NEXT:     %31 = llvm.getelementptr %15[%c0_i256_19, %c15_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %31 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %32 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg1, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %33 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_20 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %34 = llvm.getelementptr %33[%c0_i256_20, %c0_i256_21] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg2, %34 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_22 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_23 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %35 = llvm.getelementptr %33[%c0_i256_22, %c1_i256_23] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg3, %35 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_24 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_25 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %36 = llvm.getelementptr %33[%c0_i256_24, %c2_i256_25] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg4, %36 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_26 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256_27 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %37 = llvm.getelementptr %33[%c0_i256_26, %c3_i256_27] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg5, %37 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256_29 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %38 = llvm.getelementptr %33[%c0_i256_28, %c4_i256_29] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg6, %38 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_30 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256_31 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %39 = llvm.getelementptr %33[%c0_i256_30, %c5_i256_31] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg7, %39 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_32 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256_33 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %40 = llvm.getelementptr %33[%c0_i256_32, %c6_i256_33] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg8, %40 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_34 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256_35 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %41 = llvm.getelementptr %33[%c0_i256_34, %c7_i256_35] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg9, %41 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_36 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256_37 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %42 = llvm.getelementptr %33[%c0_i256_36, %c8_i256_37] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg10, %42 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_38 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256_39 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %43 = llvm.getelementptr %33[%c0_i256_38, %c9_i256_39] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg11, %43 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c1_i256_40 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %44 = arith.andi %arg1, %c1_i256_40 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_41 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %45 = arith.cmpi eq, %44, %c1_i256_41 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       func.call @__deploy() : () -> () loc(#loc2)
// CHECK-NEXT:     } else {
// CHECK-NEXT:       func.call @__runtime() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func @set_s_68.0(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %2 = llvm.inttoptr %1 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %2 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc6)
// CHECK-NEXT:     %4 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:     %5 = arith.addi %1, %c32_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc6)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     llvm.store %c3_i256, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c32_i256_0, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc6)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc6)
// CHECK-NEXT:     %9 = arith.addi %3, %c31_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc6)
// CHECK-NEXT:     %10 = arith.andi %9, %c-32_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc6)
// CHECK-NEXT:     %11 = arith.index_castui %10 : i256 to index loc(#loc6)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc6)
// CHECK-NEXT:     scf.for %arg1 = %c0 to %11 step %c1 {
// CHECK-NEXT:       %12 = arith.index_castui %arg1 : index to i256 loc(#loc6)
// CHECK-NEXT:       %c32_i256_1 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:       %13 = arith.muli %12, %c32_i256_1 : i256 loc(#loc6)
// CHECK-NEXT:       %14 = arith.addi %5, %13 : i256 loc(#loc6)
// CHECK-NEXT:       %15 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:       %16 = llvm.load %15 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc6)
// CHECK-NEXT:       %17 = arith.addi %8, %12 : i256 loc(#loc6)
// CHECK-NEXT:       %18 = llvm.inttoptr %17 : i256 to !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:       llvm.store %16, %18 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     } loc(#loc6)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func @get_s_58.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc1)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc1)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc8)
// CHECK-NEXT:   } loc(#loc7)
// CHECK-NEXT:   func.func @get_m1_50.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc10)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc11)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc12)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc14)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc14)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %c2_i256, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc14)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc14)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc14)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_1 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc14)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_2 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c64_i256_3 = arith.constant 64 : i256 loc(#loc14)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_1 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %false_4 = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_3, %false_4) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc14)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc14)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc14)
// CHECK-NEXT:     return %13 : i256 loc(#loc16)
// CHECK-NEXT:   } loc(#loc9)
// CHECK-NEXT:   func.func @get_m0_34.0(%arg0: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc19)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %c1_i256_0, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc21)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc21)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc21)
// CHECK-NEXT:     return %7 : i256 loc(#loc22)
// CHECK-NEXT:   } loc(#loc17)
// CHECK-NEXT:   func.func @get_ui_22.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc24)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<5> loc(#loc25)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc25)
// CHECK-NEXT:     return %1 : i256 loc(#loc26)
// CHECK-NEXT:   } loc(#loc23)
// CHECK-NEXT:   func.func @get_ui_22() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc24)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<5> loc(#loc25)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc25)
// CHECK-NEXT:     return %1 : i256 loc(#loc26)
// CHECK-NEXT:   } loc(#loc23)
// CHECK-NEXT:   func.func @get_m0_34(%arg0: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc19)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %c1_i256_0, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc21)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc21)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc21)
// CHECK-NEXT:     return %7 : i256 loc(#loc22)
// CHECK-NEXT:   } loc(#loc17)
// CHECK-NEXT:   func.func @get_m1_50(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc10)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc11)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc12)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc14)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc14)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %c2_i256, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc14)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc14)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc14)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_1 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc14)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_2 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %c64_i256_3 = arith.constant 64 : i256 loc(#loc14)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_1 : i256 to !llvm.ptr<1> loc(#loc14)
// CHECK-NEXT:     %false_4 = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_3, %false_4) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc14)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc14)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc14)
// CHECK-NEXT:     return %13 : i256 loc(#loc16)
// CHECK-NEXT:   } loc(#loc9)
// CHECK-NEXT:   func.func @get_s_58() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc1)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc1)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc8)
// CHECK-NEXT:   } loc(#loc7)
// CHECK-NEXT:   func.func @set_s_68(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %2 = llvm.inttoptr %1 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %2 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc6)
// CHECK-NEXT:     %4 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:     %5 = arith.addi %1, %c32_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc6)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     llvm.store %c3_i256, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c32_i256_0, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc6)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc6)
// CHECK-NEXT:     %9 = arith.addi %3, %c31_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc6)
// CHECK-NEXT:     %10 = arith.andi %9, %c-32_i256 : i256 loc(#loc6)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc6)
// CHECK-NEXT:     %11 = arith.index_castui %10 : i256 to index loc(#loc6)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc6)
// CHECK-NEXT:     scf.for %arg1 = %c0 to %11 step %c1 {
// CHECK-NEXT:       %12 = arith.index_castui %arg1 : index to i256 loc(#loc6)
// CHECK-NEXT:       %c32_i256_1 = arith.constant 32 : i256 loc(#loc6)
// CHECK-NEXT:       %13 = arith.muli %12, %c32_i256_1 : i256 loc(#loc6)
// CHECK-NEXT:       %14 = arith.addi %5, %13 : i256 loc(#loc6)
// CHECK-NEXT:       %15 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc6)
// CHECK-NEXT:       %16 = llvm.load %15 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc6)
// CHECK-NEXT:       %17 = arith.addi %8, %12 : i256 loc(#loc6)
// CHECK-NEXT:       %18 = llvm.inttoptr %17 : i256 to !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:       llvm.store %16, %18 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc6)
// CHECK-NEXT:     } loc(#loc6)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func private @__personality() -> i32 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc1 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:13:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:13:17)
// CHECK-NEXT: #loc5 = loc({{.*}}:13:48)
// CHECK-NEXT: #loc6 = loc({{.*}}:13:44)
// CHECK-NEXT: #loc7 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc8 = loc({{.*}}:11:53)
// CHECK-NEXT: #loc9 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc10 = loc({{.*}}:10:18)
// CHECK-NEXT: #loc11 = loc({{.*}}:10:29)
// CHECK-NEXT: #loc12 = loc({{.*}}:5:2)
// CHECK-NEXT: #loc13 = loc({{.*}}:10:75)
// CHECK-NEXT: #loc14 = loc({{.*}}:10:72)
// CHECK-NEXT: #loc15 = loc({{.*}}:10:78)
// CHECK-NEXT: #loc16 = loc({{.*}}:10:65)
// CHECK-NEXT: #loc17 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc18 = loc({{.*}}:9:18)
// CHECK-NEXT: #loc19 = loc({{.*}}:4:2)
// CHECK-NEXT: #loc20 = loc({{.*}}:9:64)
// CHECK-NEXT: #loc21 = loc({{.*}}:9:61)
// CHECK-NEXT: #loc22 = loc({{.*}}:9:54)
// CHECK-NEXT: #loc23 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc24 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc25 = loc({{.*}}:8:52)
// CHECK-NEXT: #loc26 = loc({{.*}}:8:45)
// CHECK-EMPTY:
