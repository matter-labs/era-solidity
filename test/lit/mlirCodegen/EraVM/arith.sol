// RUN: solc --mlir-action=print-std-mlir --mlir-target=eravm --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  function f_ui(uint256 a) private {}
  function f_si(int256 a) private {}

  function unchk_ui(uint256 a, uint256 b) private {
    unchecked {
      a += b;
      a -= b;
      a *= b;

      f_ui(a + b);
      f_ui(a - b);
      f_ui(a * b);
    }
  }

  function unchk_si(int256 a, int256 b) private {
    unchecked {
      a += b;
      a -= b;
      a *= b;

      f_si(a + b);
      f_si(a - b);
      f_si(a * b);
    }
  }

  function chk_ui(uint256 a, uint256 b) private {
    a += b;
    a -= b;

    f_ui(a + b);
    f_ui(a - b);
  }

  function chk_si(int256 a, int256 b) private {
    a += b;
    a -= b;

    f_si(a + b);
    f_si(a - b);
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc = loc(unknown)
// CHECK-NEXT: #loc2 = loc({{.*}}:2:0)
// CHECK-NEXT: module {
// CHECK-NEXT:   func.func private @__return(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @".unreachable"() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     llvm.unreachable loc(#loc1)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__revert(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__deploy() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %1 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %2 = arith.cmpi ne, %1, %c0_i256 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %2 {
// CHECK-NEXT:       %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_9 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_8, %c0_i256_8, %c2_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %3 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %5 = llvm.inttoptr %4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %8 = llvm.getelementptr %7[%c0_i256_1] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memcpy"(%5, %8, %c0_i256_2) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c256_i256 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.inttoptr %c256_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c32_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c288_i256 = arith.constant 288 : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.inttoptr %c288_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_3, %10 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %11 = arith.muli %c0_i256_4, %c2_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %12 = arith.addi %11, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:     %c256_i256_6 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_7 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     call @__return(%c256_i256_6, %12, %c2_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__runtime() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     call @__revert(%c0_i256, %c0_i256_0, %c0_i256_1) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_decommit() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_return_data() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_active() {addr_space = 0 : i32} : !llvm.array<16 x ptr<3>> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @extra_abi_data(dense<0> : tensor<10xi256>) {addr_space = 0 : i32} : !llvm.array<10 x i256> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @call_flags(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @returndatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @memory_pointer(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   func.func private @__entry(%arg0: !llvm.ptr<3> loc({{.*}}:2:0), %arg1: i256 loc({{.*}}:2:0), %arg2: i256 loc({{.*}}:2:0), %arg3: i256 loc({{.*}}:2:0), %arg4: i256 loc({{.*}}:2:0), %arg5: i256 loc({{.*}}:2:0), %arg6: i256 loc({{.*}}:2:0), %arg7: i256 loc({{.*}}:2:0), %arg8: i256 loc({{.*}}:2:0), %arg9: i256 loc({{.*}}:2:0), %arg10: i256 loc({{.*}}:2:0), %arg11: i256 loc({{.*}}:2:0)) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %0 = llvm.mlir.addressof @memory_pointer : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_0, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.mlir.addressof @returndatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_1, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %3 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_2, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %5 = llvm.mlir.constant(dense<0> : vector<10xi256>) : vector<10xi256> loc(#loc2)
// CHECK-NEXT:     llvm.store %5, %4 : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg0, %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.ptrtoint %6 : !llvm.ptr<ptr<3>> to i256 loc(#loc2)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:     %8 = llvm.lshr %7, %c96_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.and %8, %c4294967295_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %11 = llvm.load %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %12 = llvm.getelementptr %arg0[%11] : (!llvm.ptr<3>, i256) -> !llvm.ptr, i8 loc(#loc2)
// CHECK-NEXT:     %13 = llvm.mlir.addressof @ptr_return_data : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_decommit : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %15 = llvm.mlir.addressof @ptr_active : !llvm.ptr<array<16 x ptr<3>>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%c0_i256_3, %c0_i256_4] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %16 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %17 = llvm.getelementptr %15[%c0_i256_5, %c1_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %17 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %18 = llvm.getelementptr %15[%c0_i256_6, %c2_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %18 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %19 = llvm.getelementptr %15[%c0_i256_7, %c3_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %19 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %20 = llvm.getelementptr %15[%c0_i256_8, %c4_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %20 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %21 = llvm.getelementptr %15[%c0_i256_9, %c5_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %21 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %22 = llvm.getelementptr %15[%c0_i256_10, %c6_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %22 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %23 = llvm.getelementptr %15[%c0_i256_11, %c7_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %23 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %24 = llvm.getelementptr %15[%c0_i256_12, %c8_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %24 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %25 = llvm.getelementptr %15[%c0_i256_13, %c9_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %25 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc2)
// CHECK-NEXT:     %26 = llvm.getelementptr %15[%c0_i256_14, %c10_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %26 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc2)
// CHECK-NEXT:     %27 = llvm.getelementptr %15[%c0_i256_15, %c11_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %27 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_16 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c12_i256 = arith.constant 12 : i256 loc(#loc2)
// CHECK-NEXT:     %28 = llvm.getelementptr %15[%c0_i256_16, %c12_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %28 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_17 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c13_i256 = arith.constant 13 : i256 loc(#loc2)
// CHECK-NEXT:     %29 = llvm.getelementptr %15[%c0_i256_17, %c13_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %29 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c14_i256 = arith.constant 14 : i256 loc(#loc2)
// CHECK-NEXT:     %30 = llvm.getelementptr %15[%c0_i256_18, %c14_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %30 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c15_i256 = arith.constant 15 : i256 loc(#loc2)
// CHECK-NEXT:     %31 = llvm.getelementptr %15[%c0_i256_19, %c15_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %31 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %32 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg1, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %33 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_20 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %34 = llvm.getelementptr %33[%c0_i256_20, %c0_i256_21] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg2, %34 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_22 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_23 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %35 = llvm.getelementptr %33[%c0_i256_22, %c1_i256_23] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg3, %35 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_24 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_25 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %36 = llvm.getelementptr %33[%c0_i256_24, %c2_i256_25] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg4, %36 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_26 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256_27 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %37 = llvm.getelementptr %33[%c0_i256_26, %c3_i256_27] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg5, %37 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256_29 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %38 = llvm.getelementptr %33[%c0_i256_28, %c4_i256_29] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg6, %38 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_30 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256_31 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %39 = llvm.getelementptr %33[%c0_i256_30, %c5_i256_31] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg7, %39 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_32 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256_33 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %40 = llvm.getelementptr %33[%c0_i256_32, %c6_i256_33] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg8, %40 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_34 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256_35 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %41 = llvm.getelementptr %33[%c0_i256_34, %c7_i256_35] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg9, %41 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_36 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256_37 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %42 = llvm.getelementptr %33[%c0_i256_36, %c8_i256_37] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg10, %42 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_38 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256_39 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %43 = llvm.getelementptr %33[%c0_i256_38, %c9_i256_39] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg11, %43 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c1_i256_40 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %44 = arith.andi %arg1, %c1_i256_40 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_41 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %45 = arith.cmpi eq, %44, %c1_i256_41 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       func.call @__deploy() : () -> () loc(#loc2)
// CHECK-NEXT:     } else {
// CHECK-NEXT:       func.call @__runtime() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func @chk_si_146.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:     %5 = arith.cmpi sge, %3, %c0_i256 : i256 loc(#loc7)
// CHECK-NEXT:     %6 = arith.cmpi slt, %4, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %7 = arith.andi %5, %6 : i1 loc(#loc7)
// CHECK-NEXT:     %8 = arith.cmpi slt, %3, %c0_i256 : i256 loc(#loc7)
// CHECK-NEXT:     %9 = arith.cmpi sge, %4, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %10 = arith.andi %8, %9 : i1 loc(#loc7)
// CHECK-NEXT:     %11 = arith.ori %7, %10 : i1 loc(#loc7)
// CHECK-NEXT:     scf.if %11 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc7)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc7)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc7)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc7)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc7)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc7)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc7)
// CHECK-NEXT:     } loc(#loc7)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc8)
// CHECK-NEXT:     %13 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:     %14 = arith.subi %13, %12 : i256 loc(#loc9)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %15 = arith.cmpi sge, %12, %c0_i256_1 : i256 loc(#loc9)
// CHECK-NEXT:     %16 = arith.cmpi sgt, %14, %13 : i256 loc(#loc9)
// CHECK-NEXT:     %17 = arith.andi %15, %16 : i1 loc(#loc9)
// CHECK-NEXT:     %18 = arith.cmpi slt, %12, %c0_i256_1 : i256 loc(#loc9)
// CHECK-NEXT:     %19 = arith.cmpi slt, %14, %13 : i256 loc(#loc9)
// CHECK-NEXT:     %20 = arith.andi %18, %19 : i1 loc(#loc9)
// CHECK-NEXT:     %21 = arith.ori %17, %20 : i1 loc(#loc9)
// CHECK-NEXT:     scf.if %21 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc9)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc9)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc9)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc9)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc9)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc9)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc9)
// CHECK-NEXT:     } loc(#loc9)
// CHECK-NEXT:     llvm.store %14, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:     %22 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %23 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %24 = arith.addi %22, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:     %25 = arith.cmpi sge, %22, %c0_i256_2 : i256 loc(#loc10)
// CHECK-NEXT:     %26 = arith.cmpi slt, %24, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %27 = arith.andi %25, %26 : i1 loc(#loc10)
// CHECK-NEXT:     %28 = arith.cmpi slt, %22, %c0_i256_2 : i256 loc(#loc10)
// CHECK-NEXT:     %29 = arith.cmpi sge, %24, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %30 = arith.andi %28, %29 : i1 loc(#loc10)
// CHECK-NEXT:     %31 = arith.ori %27, %30 : i1 loc(#loc10)
// CHECK-NEXT:     scf.if %31 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc10)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc10)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc10)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc10)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc10)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc10)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc10)
// CHECK-NEXT:     } loc(#loc10)
// CHECK-NEXT:     call @f_si_12.0(%24) : (i256) -> () loc(#loc12)
// CHECK-NEXT:     %32 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %33 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %34 = arith.subi %32, %33 : i256 loc(#loc13)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:     %35 = arith.cmpi sge, %33, %c0_i256_3 : i256 loc(#loc13)
// CHECK-NEXT:     %36 = arith.cmpi sgt, %34, %32 : i256 loc(#loc13)
// CHECK-NEXT:     %37 = arith.andi %35, %36 : i1 loc(#loc13)
// CHECK-NEXT:     %38 = arith.cmpi slt, %33, %c0_i256_3 : i256 loc(#loc13)
// CHECK-NEXT:     %39 = arith.cmpi slt, %34, %32 : i256 loc(#loc13)
// CHECK-NEXT:     %40 = arith.andi %38, %39 : i1 loc(#loc13)
// CHECK-NEXT:     %41 = arith.ori %37, %40 : i1 loc(#loc13)
// CHECK-NEXT:     scf.if %41 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc13)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc13)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc13)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc13)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc13)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc13)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc13)
// CHECK-NEXT:     } loc(#loc13)
// CHECK-NEXT:     call @f_si_12.0(%34) : (i256) -> () loc(#loc15)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func @chk_ui_118.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc17)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.cmpi ugt, %3, %4 : i256 loc(#loc1)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc1)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %6 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %8 = arith.subi %7, %6 : i256 loc(#loc21)
// CHECK-NEXT:     %9 = arith.cmpi ugt, %8, %7 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %9 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc21)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc21)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc21)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc21)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc21)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc21)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     llvm.store %8, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %10 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc22)
// CHECK-NEXT:     %11 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %12 = arith.addi %10, %11 : i256 loc(#loc22)
// CHECK-NEXT:     %13 = arith.cmpi ugt, %10, %12 : i256 loc(#loc22)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc22)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc22)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc22)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc22)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc22)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc22)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc22)
// CHECK-NEXT:     } loc(#loc22)
// CHECK-NEXT:     call @f_ui_6.0(%12) : (i256) -> () loc(#loc24)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc26)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc25)
// CHECK-NEXT:     %17 = arith.cmpi ugt, %16, %14 : i256 loc(#loc25)
// CHECK-NEXT:     scf.if %17 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc25)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc25)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc25)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc25)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc25)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc25)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc25)
// CHECK-NEXT:     } loc(#loc25)
// CHECK-NEXT:     call @f_ui_6.0(%16) : (i256) -> () loc(#loc27)
// CHECK-NEXT:     return loc(#loc16)
// CHECK-NEXT:   } loc(#loc16)
// CHECK-NEXT:   func.func @unchk_si_90.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc29)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc29)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc29)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc30)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc31)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc32)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %5 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %6 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc34)
// CHECK-NEXT:     %7 = arith.subi %6, %5 : i256 loc(#loc34)
// CHECK-NEXT:     llvm.store %7, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc34)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %10 = arith.muli %9, %8 : i256 loc(#loc36)
// CHECK-NEXT:     llvm.store %10, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc38)
// CHECK-NEXT:     %13 = arith.addi %11, %12 : i256 loc(#loc37)
// CHECK-NEXT:     call @f_si_12.0(%13) : (i256) -> () loc(#loc39)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc40)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc41)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc40)
// CHECK-NEXT:     call @f_si_12.0(%16) : (i256) -> () loc(#loc42)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc43)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %19 = arith.muli %17, %18 : i256 loc(#loc43)
// CHECK-NEXT:     call @f_si_12.0(%19) : (i256) -> () loc(#loc45)
// CHECK-NEXT:     return loc(#loc28)
// CHECK-NEXT:   } loc(#loc28)
// CHECK-NEXT:   func.func @unchk_ui_51.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc50)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %5 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc51)
// CHECK-NEXT:     %6 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %7 = arith.subi %6, %5 : i256 loc(#loc52)
// CHECK-NEXT:     llvm.store %7, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc53)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %10 = arith.muli %9, %8 : i256 loc(#loc54)
// CHECK-NEXT:     llvm.store %10, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc55)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %13 = arith.addi %11, %12 : i256 loc(#loc55)
// CHECK-NEXT:     call @f_ui_6.0(%13) : (i256) -> () loc(#loc57)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc58)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc58)
// CHECK-NEXT:     call @f_ui_6.0(%16) : (i256) -> () loc(#loc60)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc61)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %19 = arith.muli %17, %18 : i256 loc(#loc61)
// CHECK-NEXT:     call @f_ui_6.0(%19) : (i256) -> () loc(#loc63)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @f_si_12.0(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc65)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     return loc(#loc64)
// CHECK-NEXT:   } loc(#loc64)
// CHECK-NEXT:   func.func @f_ui_6.0(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc67)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     return loc(#loc66)
// CHECK-NEXT:   } loc(#loc66)
// CHECK-NEXT:   func.func @f_ui_6(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc67)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     return loc(#loc66)
// CHECK-NEXT:   } loc(#loc66)
// CHECK-NEXT:   func.func @f_si_12(%arg0: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc65)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     return loc(#loc64)
// CHECK-NEXT:   } loc(#loc64)
// CHECK-NEXT:   func.func @unchk_ui_51(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc50)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %5 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc51)
// CHECK-NEXT:     %6 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %7 = arith.subi %6, %5 : i256 loc(#loc52)
// CHECK-NEXT:     llvm.store %7, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc53)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %10 = arith.muli %9, %8 : i256 loc(#loc54)
// CHECK-NEXT:     llvm.store %10, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc55)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %13 = arith.addi %11, %12 : i256 loc(#loc55)
// CHECK-NEXT:     call @f_ui_6(%13) : (i256) -> () loc(#loc57)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc58)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc58)
// CHECK-NEXT:     call @f_ui_6(%16) : (i256) -> () loc(#loc60)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc61)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %19 = arith.muli %17, %18 : i256 loc(#loc61)
// CHECK-NEXT:     call @f_ui_6(%19) : (i256) -> () loc(#loc63)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @unchk_si_90(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc29)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc29)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc29)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc30)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc31)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc32)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %5 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %6 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc34)
// CHECK-NEXT:     %7 = arith.subi %6, %5 : i256 loc(#loc34)
// CHECK-NEXT:     llvm.store %7, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc34)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %10 = arith.muli %9, %8 : i256 loc(#loc36)
// CHECK-NEXT:     llvm.store %10, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc38)
// CHECK-NEXT:     %13 = arith.addi %11, %12 : i256 loc(#loc37)
// CHECK-NEXT:     call @f_si_12(%13) : (i256) -> () loc(#loc39)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc40)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc41)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc40)
// CHECK-NEXT:     call @f_si_12(%16) : (i256) -> () loc(#loc42)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc43)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %19 = arith.muli %17, %18 : i256 loc(#loc43)
// CHECK-NEXT:     call @f_si_12(%19) : (i256) -> () loc(#loc45)
// CHECK-NEXT:     return loc(#loc28)
// CHECK-NEXT:   } loc(#loc28)
// CHECK-NEXT:   func.func @chk_ui_118(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc17)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.cmpi ugt, %3, %4 : i256 loc(#loc1)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc1)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c0_i256_2) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %6 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %8 = arith.subi %7, %6 : i256 loc(#loc21)
// CHECK-NEXT:     %9 = arith.cmpi ugt, %8, %7 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %9 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc21)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc21)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc21)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc21)
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c0_i256_2) : (i256, i256, i256) -> () loc(#loc21)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     llvm.store %8, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %10 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc22)
// CHECK-NEXT:     %11 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %12 = arith.addi %10, %11 : i256 loc(#loc22)
// CHECK-NEXT:     %13 = arith.cmpi ugt, %10, %12 : i256 loc(#loc22)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc22)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc22)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc22)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc22)
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c0_i256_2) : (i256, i256, i256) -> () loc(#loc22)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc22)
// CHECK-NEXT:     } loc(#loc22)
// CHECK-NEXT:     call @f_ui_6(%12) : (i256) -> () loc(#loc24)
// CHECK-NEXT:     %14 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc26)
// CHECK-NEXT:     %16 = arith.subi %14, %15 : i256 loc(#loc25)
// CHECK-NEXT:     %17 = arith.cmpi ugt, %16, %14 : i256 loc(#loc25)
// CHECK-NEXT:     scf.if %17 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc25)
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc25)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc25)
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       llvm.store %c17_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc25)
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c0_i256_2) : (i256, i256, i256) -> () loc(#loc25)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc25)
// CHECK-NEXT:     } loc(#loc25)
// CHECK-NEXT:     call @f_ui_6(%16) : (i256) -> () loc(#loc27)
// CHECK-NEXT:     return loc(#loc16)
// CHECK-NEXT:   } loc(#loc16)
// CHECK-NEXT:   func.func @chk_si_146(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %4 = arith.addi %3, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:     %5 = arith.cmpi sge, %3, %c0_i256 : i256 loc(#loc7)
// CHECK-NEXT:     %6 = arith.cmpi slt, %4, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %7 = arith.andi %5, %6 : i1 loc(#loc7)
// CHECK-NEXT:     %8 = arith.cmpi slt, %3, %c0_i256 : i256 loc(#loc7)
// CHECK-NEXT:     %9 = arith.cmpi sge, %4, %2 : i256 loc(#loc7)
// CHECK-NEXT:     %10 = arith.andi %8, %9 : i1 loc(#loc7)
// CHECK-NEXT:     %11 = arith.ori %7, %10 : i1 loc(#loc7)
// CHECK-NEXT:     scf.if %11 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc7)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc7)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc7)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc7)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc7)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc7)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc7)
// CHECK-NEXT:     } loc(#loc7)
// CHECK-NEXT:     llvm.store %4, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc8)
// CHECK-NEXT:     %13 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:     %14 = arith.subi %13, %12 : i256 loc(#loc9)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %15 = arith.cmpi sge, %12, %c0_i256_1 : i256 loc(#loc9)
// CHECK-NEXT:     %16 = arith.cmpi sgt, %14, %13 : i256 loc(#loc9)
// CHECK-NEXT:     %17 = arith.andi %15, %16 : i1 loc(#loc9)
// CHECK-NEXT:     %18 = arith.cmpi slt, %12, %c0_i256_1 : i256 loc(#loc9)
// CHECK-NEXT:     %19 = arith.cmpi slt, %14, %13 : i256 loc(#loc9)
// CHECK-NEXT:     %20 = arith.andi %18, %19 : i1 loc(#loc9)
// CHECK-NEXT:     %21 = arith.ori %17, %20 : i1 loc(#loc9)
// CHECK-NEXT:     scf.if %21 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc9)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc9)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc9)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc9)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc9)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc9)
// CHECK-NEXT:     } loc(#loc9)
// CHECK-NEXT:     llvm.store %14, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:     %22 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %23 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %24 = arith.addi %22, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:     %25 = arith.cmpi sge, %22, %c0_i256_2 : i256 loc(#loc10)
// CHECK-NEXT:     %26 = arith.cmpi slt, %24, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %27 = arith.andi %25, %26 : i1 loc(#loc10)
// CHECK-NEXT:     %28 = arith.cmpi slt, %22, %c0_i256_2 : i256 loc(#loc10)
// CHECK-NEXT:     %29 = arith.cmpi sge, %24, %23 : i256 loc(#loc10)
// CHECK-NEXT:     %30 = arith.andi %28, %29 : i1 loc(#loc10)
// CHECK-NEXT:     %31 = arith.ori %27, %30 : i1 loc(#loc10)
// CHECK-NEXT:     scf.if %31 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc10)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc10)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc10)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc10)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc10)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc10)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc10)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc10)
// CHECK-NEXT:     } loc(#loc10)
// CHECK-NEXT:     call @f_si_12(%24) : (i256) -> () loc(#loc12)
// CHECK-NEXT:     %32 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %33 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %34 = arith.subi %32, %33 : i256 loc(#loc13)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:     %35 = arith.cmpi sge, %33, %c0_i256_3 : i256 loc(#loc13)
// CHECK-NEXT:     %36 = arith.cmpi sgt, %34, %32 : i256 loc(#loc13)
// CHECK-NEXT:     %37 = arith.andi %35, %36 : i1 loc(#loc13)
// CHECK-NEXT:     %38 = arith.cmpi slt, %33, %c0_i256_3 : i256 loc(#loc13)
// CHECK-NEXT:     %39 = arith.cmpi slt, %34, %32 : i256 loc(#loc13)
// CHECK-NEXT:     %40 = arith.andi %38, %39 : i1 loc(#loc13)
// CHECK-NEXT:     %41 = arith.ori %37, %40 : i1 loc(#loc13)
// CHECK-NEXT:     scf.if %41 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc13)
// CHECK-NEXT:       %42 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc13)
// CHECK-NEXT:       %c17_i256 = arith.constant 17 : i256 loc(#loc13)
// CHECK-NEXT:       %43 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       llvm.store %c17_i256, %43 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc13)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc13)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc13)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc13)
// CHECK-NEXT:     } loc(#loc13)
// CHECK-NEXT:     call @f_si_12(%34) : (i256) -> () loc(#loc15)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func private @__personality() -> i32 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc1 = loc({{.*}}:31:4)
// CHECK-NEXT: #loc3 = loc({{.*}}:38:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:38:18)
// CHECK-NEXT: #loc5 = loc({{.*}}:38:28)
// CHECK-NEXT: #loc6 = loc({{.*}}:39:9)
// CHECK-NEXT: #loc7 = loc({{.*}}:39:4)
// CHECK-NEXT: #loc8 = loc({{.*}}:40:9)
// CHECK-NEXT: #loc9 = loc({{.*}}:40:4)
// CHECK-NEXT: #loc10 = loc({{.*}}:42:9)
// CHECK-NEXT: #loc11 = loc({{.*}}:42:13)
// CHECK-NEXT: #loc12 = loc({{.*}}:42:4)
// CHECK-NEXT: #loc13 = loc({{.*}}:43:9)
// CHECK-NEXT: #loc14 = loc({{.*}}:43:13)
// CHECK-NEXT: #loc15 = loc({{.*}}:43:4)
// CHECK-NEXT: #loc16 = loc({{.*}}:30:2)
// CHECK-NEXT: #loc17 = loc({{.*}}:30:18)
// CHECK-NEXT: #loc18 = loc({{.*}}:30:29)
// CHECK-NEXT: #loc19 = loc({{.*}}:31:9)
// CHECK-NEXT: #loc20 = loc({{.*}}:32:9)
// CHECK-NEXT: #loc21 = loc({{.*}}:32:4)
// CHECK-NEXT: #loc22 = loc({{.*}}:34:9)
// CHECK-NEXT: #loc23 = loc({{.*}}:34:13)
// CHECK-NEXT: #loc24 = loc({{.*}}:34:4)
// CHECK-NEXT: #loc25 = loc({{.*}}:35:9)
// CHECK-NEXT: #loc26 = loc({{.*}}:35:13)
// CHECK-NEXT: #loc27 = loc({{.*}}:35:4)
// CHECK-NEXT: #loc28 = loc({{.*}}:18:2)
// CHECK-NEXT: #loc29 = loc({{.*}}:18:20)
// CHECK-NEXT: #loc30 = loc({{.*}}:18:30)
// CHECK-NEXT: #loc31 = loc({{.*}}:20:11)
// CHECK-NEXT: #loc32 = loc({{.*}}:20:6)
// CHECK-NEXT: #loc33 = loc({{.*}}:21:11)
// CHECK-NEXT: #loc34 = loc({{.*}}:21:6)
// CHECK-NEXT: #loc35 = loc({{.*}}:22:11)
// CHECK-NEXT: #loc36 = loc({{.*}}:22:6)
// CHECK-NEXT: #loc37 = loc({{.*}}:24:11)
// CHECK-NEXT: #loc38 = loc({{.*}}:24:15)
// CHECK-NEXT: #loc39 = loc({{.*}}:24:6)
// CHECK-NEXT: #loc40 = loc({{.*}}:25:11)
// CHECK-NEXT: #loc41 = loc({{.*}}:25:15)
// CHECK-NEXT: #loc42 = loc({{.*}}:25:6)
// CHECK-NEXT: #loc43 = loc({{.*}}:26:11)
// CHECK-NEXT: #loc44 = loc({{.*}}:26:15)
// CHECK-NEXT: #loc45 = loc({{.*}}:26:6)
// CHECK-NEXT: #loc46 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc47 = loc({{.*}}:6:20)
// CHECK-NEXT: #loc48 = loc({{.*}}:6:31)
// CHECK-NEXT: #loc49 = loc({{.*}}:8:11)
// CHECK-NEXT: #loc50 = loc({{.*}}:8:6)
// CHECK-NEXT: #loc51 = loc({{.*}}:9:11)
// CHECK-NEXT: #loc52 = loc({{.*}}:9:6)
// CHECK-NEXT: #loc53 = loc({{.*}}:10:11)
// CHECK-NEXT: #loc54 = loc({{.*}}:10:6)
// CHECK-NEXT: #loc55 = loc({{.*}}:12:11)
// CHECK-NEXT: #loc56 = loc({{.*}}:12:15)
// CHECK-NEXT: #loc57 = loc({{.*}}:12:6)
// CHECK-NEXT: #loc58 = loc({{.*}}:13:11)
// CHECK-NEXT: #loc59 = loc({{.*}}:13:15)
// CHECK-NEXT: #loc60 = loc({{.*}}:13:6)
// CHECK-NEXT: #loc61 = loc({{.*}}:14:11)
// CHECK-NEXT: #loc62 = loc({{.*}}:14:15)
// CHECK-NEXT: #loc63 = loc({{.*}}:14:6)
// CHECK-NEXT: #loc64 = loc({{.*}}:4:2)
// CHECK-NEXT: #loc65 = loc({{.*}}:4:16)
// CHECK-NEXT: #loc66 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc67 = loc({{.*}}:3:16)
// CHECK-EMPTY:
