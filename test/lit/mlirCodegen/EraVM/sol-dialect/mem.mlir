// XFAIL: *
// RUN: sol-opt -convert-sol-to-std=target=eravm %s | FileCheck %s

module {
  sol.func @stk(%st : i256) {
    %stk = sol.alloca : !sol.ptr<i256, Stack>
    sol.store %st, %stk : i256, !sol.ptr<i256, Stack>
    %ld = sol.load %stk : !sol.ptr<i256, Stack>, i256
    sol.return
  }

  sol.func @mem(%st : i256) {
    %c0 = arith.constant 0 : i256
    %mem = sol.malloc : !sol.array<3 x i256, Memory>
    sol.store %st, %mem[%c0] : i256, !sol.array<3 x i256, Memory>
    %ld = sol.load %mem[%c0] : !sol.array<3 x i256, Memory>, i256
    sol.return
  }

  sol.func @mem_2d() {
    %mem = sol.malloc : !sol.array<2 x !sol.array<3 x i256, Memory>, Memory>
    sol.return
  }

  sol.func @mem_2d_dyn() {
    %c3 = arith.constant 3 : i256
    %mem = sol.malloc %c3 : !sol.array<? x !sol.array<4 x i256, Memory>, Memory>
    sol.return
  }

  sol.func @mem_1d_dyn(%size : i256, %idx : i256) {
    %mem = sol.malloc %size : !sol.array<? x i256, Memory>
    %ld = sol.load %mem[%idx] : !sol.array<? x i256, Memory>, i256
    sol.return
  }

  sol.func @mem_2d_inner_dyn(%size : i256, %idx : i256) {
    %c0 = arith.constant 0 : i256
    %mem = sol.malloc : !sol.array<2 x !sol.array<? x i256, Memory>, Memory>
    %mem.0 = sol.load %mem[%c0] : !sol.array<2 x !sol.array<? x i256, Memory>, Memory>, !sol.array<? x i256, Memory>
    %mem.0.alloc = sol.malloc %size : !sol.array<? x i256, Memory>
    sol.return
  }

  sol.func @mem_struct(%st : i256) {
    %mem = sol.malloc : !sol.struct<(i256, !sol.array<3 x i256, Memory>), Memory>
    %c0 = arith.constant 0 : i256
    sol.store %st, %mem[%c0] : i256, !sol.struct<(i256, !sol.array<3 x i256, Memory>), Memory>
    %ld.0 = sol.load %mem[%c0] : !sol.struct<(i256, !sol.array<3 x i256, Memory>), Memory>, i256
    %c1 = arith.constant 1 : i256
    %ld.1 = sol.load %mem[%c1] : !sol.struct<(i256, !sol.array<3 x i256, Memory>), Memory>, !sol.array<3 x i256, Memory>
    %ld.1.0 = sol.load %ld.1[%c0] : !sol.array<3 x i256, Memory>, i256
    sol.return
  }

  sol.func @mem_1d_struct() {
    %mem = sol.malloc : !sol.array<2 x !sol.struct<(i256, i256), Memory>, Memory>
    sol.return
  }

  sol.func @dyn_arr() {
    %ten = arith.constant 10 : i256
    %mem = sol.malloc %ten : !sol.array<? x i256, Memory>
    %c0 = arith.constant 0 : i256
    %ld = sol.load %mem[%c0] : !sol.array<? x i256, Memory>, i256
    sol.return
  }

  sol.func @string() {
    %c5 = arith.constant 5 : i256
    %mem = sol.malloc %c5 : !sol.string<Memory>
    sol.return
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() {addr_space = 0 : i32} : !llvm.ptr<3>
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {addr_space = 0 : i32} : i256
// CHECK-NEXT:   func.func private @".unreachable"() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     llvm.unreachable
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func private @__revert(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality}
// CHECK-NEXT:   func.func private @__personality() -> i32 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality}
// CHECK-NEXT:   func.func @stk(%arg0: i256) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256>
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem(%arg0: i256) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %2 = arith.addi %1, %c96_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %3 = arith.cmpi ugt, %2, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %4 = arith.cmpi ult, %2, %1 : i256
// CHECK-NEXT:     %5 = arith.ori %3, %4 : i1
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %18 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %19 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %6 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %2, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256
// CHECK-NEXT:     %7 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %9 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %10 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %11 = llvm.load %10 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %12 = llvm.getelementptr %11[%8] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%9, %12, %c96_i256) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256
// CHECK-NEXT:     %13 = arith.addi %1, %c0_i256_2 : i256
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %arg0, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256
// CHECK-NEXT:     %15 = arith.addi %1, %c0_i256_3 : i256
// CHECK-NEXT:     %16 = llvm.inttoptr %15 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_2d() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %2 = arith.addi %1, %c64_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %3 = arith.cmpi ugt, %2, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %4 = arith.cmpi ult, %2, %1 : i256
// CHECK-NEXT:     %5 = arith.ori %3, %4 : i1
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %36 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %37 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %37 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_11, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %6 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %2, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256
// CHECK-NEXT:     %c64_i256_2 = arith.constant 64 : i256
// CHECK-NEXT:     %7 = llvm.inttoptr %c64_i256_2 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %9 = arith.addi %8, %c96_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_3 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %10 = arith.cmpi ugt, %9, %c18446744073709551615_i256_3 : i256
// CHECK-NEXT:     %11 = arith.cmpi ult, %9, %8 : i256
// CHECK-NEXT:     %12 = arith.ori %10, %11 : i1
// CHECK-NEXT:     scf.if %12 {
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %36 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %37 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %37 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_11, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256
// CHECK-NEXT:     %13 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %9, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %14 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %16 = llvm.inttoptr %8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %17 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %19 = llvm.getelementptr %18[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%16, %19, %c96_i256) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %20 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %8, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %21 = arith.addi %1, %c32_i256 : i256
// CHECK-NEXT:     %c96_i256_5 = arith.constant 96 : i256
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256
// CHECK-NEXT:     %22 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %24 = arith.addi %23, %c96_i256_5 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_7 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %25 = arith.cmpi ugt, %24, %c18446744073709551615_i256_7 : i256
// CHECK-NEXT:     %26 = arith.cmpi ult, %24, %23 : i256
// CHECK-NEXT:     %27 = arith.ori %25, %26 : i1
// CHECK-NEXT:     scf.if %27 {
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %36 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %37 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %37 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_11, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256
// CHECK-NEXT:     %28 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %24, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256
// CHECK-NEXT:     %29 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %30 = llvm.load %29 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %31 = llvm.inttoptr %23 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %32 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %33 = llvm.load %32 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %34 = llvm.getelementptr %33[%30] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%31, %34, %c96_i256_5) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %35 = llvm.inttoptr %21 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %23, %35 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_2d_dyn() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %0 = arith.muli %c3_i256, %c32_i256 : i256
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256
// CHECK-NEXT:     %1 = arith.addi %0, %c32_i256_0 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %2 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %3 = llvm.load %2 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %4 = arith.addi %3, %1 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %5 = arith.cmpi ugt, %4, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %6 = arith.cmpi ult, %4, %3 : i256
// CHECK-NEXT:     %7 = arith.ori %5, %6 : i1
// CHECK-NEXT:     scf.if %7 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %12 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %13 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_3 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_3, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %4, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %9 = llvm.inttoptr %3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c3_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256
// CHECK-NEXT:     %10 = arith.addi %3, %c32_i256_2 : i256
// CHECK-NEXT:     %c0 = arith.constant 0 : index
// CHECK-NEXT:     %11 = arith.index_castui %0 : i256 to index
// CHECK-NEXT:     %c32 = arith.constant 32 : index
// CHECK-NEXT:     scf.for %arg0 = %c0 to %11 step %c32 {
// CHECK-NEXT:       %12 = arith.index_castui %arg0 : index to i256
// CHECK-NEXT:       %13 = arith.addi %10, %12 : i256
// CHECK-NEXT:       %c128_i256 = arith.constant 128 : i256
// CHECK-NEXT:       %c64_i256_3 = arith.constant 64 : i256
// CHECK-NEXT:       %14 = llvm.inttoptr %c64_i256_3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:       %16 = arith.addi %15, %c128_i256 : i256
// CHECK-NEXT:       %c18446744073709551615_i256_4 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:       %17 = arith.cmpi ugt, %16, %c18446744073709551615_i256_4 : i256
// CHECK-NEXT:       %18 = arith.cmpi ult, %16, %15 : i256
// CHECK-NEXT:       %19 = arith.ori %17, %18 : i1
// CHECK-NEXT:       scf.if %19 {
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:         %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:         %28 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1>
// CHECK-NEXT:         llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:         %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:         %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:         %29 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:         llvm.store %c65_i256, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256
// CHECK-NEXT:         %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:         %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:         func.call @__revert(%c0_i256_7, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:         func.call @".unreachable"() : () -> ()
// CHECK-NEXT:       }
// CHECK-NEXT:       %c64_i256_5 = arith.constant 64 : i256
// CHECK-NEXT:       %20 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %16, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:       %21 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:       %22 = llvm.load %21 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:       %23 = llvm.inttoptr %15 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       %24 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:       %25 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:       %26 = llvm.getelementptr %25[%22] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:       "llvm.intr.memcpy"(%23, %26, %c128_i256) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:       %27 = llvm.inttoptr %13 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %15, %27 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     }
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_1d_dyn(%arg0: i256, %arg1: i256) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %0 = arith.muli %arg0, %c32_i256 : i256
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256
// CHECK-NEXT:     %1 = arith.addi %0, %c32_i256_0 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %2 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %3 = llvm.load %2 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %4 = arith.addi %3, %1 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %5 = arith.cmpi ugt, %4, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %6 = arith.cmpi ult, %4, %3 : i256
// CHECK-NEXT:     %7 = arith.ori %5, %6 : i1
// CHECK-NEXT:     scf.if %7 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %25 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %26 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %4, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %9 = llvm.inttoptr %3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %arg0, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256
// CHECK-NEXT:     %10 = arith.addi %3, %c32_i256_2 : i256
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %11 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %13 = llvm.inttoptr %10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%12] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%13, %16, %0) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %17 = llvm.inttoptr %3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %19 = arith.cmpi uge, %arg1, %18 : i256
// CHECK-NEXT:     scf.if %19 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %25 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c50_i256 = arith.constant 50 : i256
// CHECK-NEXT:       %26 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c50_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256
// CHECK-NEXT:     %20 = arith.muli %arg1, %c32_i256_3 : i256
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256
// CHECK-NEXT:     %21 = arith.addi %3, %c32_i256_4 : i256
// CHECK-NEXT:     %22 = arith.addi %21, %20 : i256
// CHECK-NEXT:     %23 = llvm.inttoptr %22 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %24 = llvm.load %23 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_2d_inner_dyn(%arg0: i256, %arg1: i256) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %2 = arith.addi %1, %c64_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %3 = arith.cmpi ugt, %2, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %4 = arith.cmpi ult, %2, %1 : i256
// CHECK-NEXT:     %5 = arith.ori %3, %4 : i1
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %30 = llvm.inttoptr %c0_i256_11 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %31 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %31 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_12 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_12, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %6 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %2, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256
// CHECK-NEXT:     %7 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c96_i256, %7 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %8 = arith.addi %1, %c32_i256 : i256
// CHECK-NEXT:     %c96_i256_2 = arith.constant 96 : i256
// CHECK-NEXT:     %9 = llvm.inttoptr %8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c96_i256_2, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256
// CHECK-NEXT:     %10 = arith.addi %1, %c0_i256_3 : i256
// CHECK-NEXT:     %11 = llvm.inttoptr %10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256
// CHECK-NEXT:     %13 = arith.muli %arg0, %c32_i256_4 : i256
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256
// CHECK-NEXT:     %14 = arith.addi %13, %c32_i256_5 : i256
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256
// CHECK-NEXT:     %15 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %16 = llvm.load %15 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %17 = arith.addi %16, %14 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_7 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %18 = arith.cmpi ugt, %17, %c18446744073709551615_i256_7 : i256
// CHECK-NEXT:     %19 = arith.cmpi ult, %17, %16 : i256
// CHECK-NEXT:     %20 = arith.ori %18, %19 : i1
// CHECK-NEXT:     scf.if %20 {
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %30 = llvm.inttoptr %c0_i256_11 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %31 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %31 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_12 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_12, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256
// CHECK-NEXT:     %21 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %17, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %22 = llvm.inttoptr %16 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %arg0, %22 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256_9 = arith.constant 32 : i256
// CHECK-NEXT:     %23 = arith.addi %16, %c32_i256_9 : i256
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:     %24 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %25 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %26 = llvm.inttoptr %23 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %27 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %28 = llvm.load %27 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %29 = llvm.getelementptr %28[%25] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%26, %29, %13) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_struct(%arg0: i256) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %2 = arith.addi %1, %c64_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %3 = arith.cmpi ugt, %2, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %4 = arith.cmpi ult, %2, %1 : i256
// CHECK-NEXT:     %5 = arith.ori %3, %4 : i1
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %36 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %37 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %37 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_11, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %6 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %2, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %7 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c0_i256, %7 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256
// CHECK-NEXT:     %c64_i256_2 = arith.constant 64 : i256
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256_2 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %10 = arith.addi %9, %c96_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_3 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256_3 : i256
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %36 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %37 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %37 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_11, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256
// CHECK-NEXT:     %15 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %16 = llvm.load %15 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %17 = llvm.inttoptr %9 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %18 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %20 = llvm.getelementptr %19[%16] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%17, %20, %c96_i256) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %21 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %9, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %22 = arith.muli %c0_i256_6, %c32_i256 : i256
// CHECK-NEXT:     %23 = arith.addi %1, %22 : i256
// CHECK-NEXT:     %24 = llvm.inttoptr %23 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %arg0, %24 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256
// CHECK-NEXT:     %25 = arith.muli %c0_i256_6, %c32_i256_7 : i256
// CHECK-NEXT:     %26 = arith.addi %1, %25 : i256
// CHECK-NEXT:     %27 = llvm.inttoptr %26 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256
// CHECK-NEXT:     %c32_i256_8 = arith.constant 32 : i256
// CHECK-NEXT:     %29 = arith.muli %c1_i256, %c32_i256_8 : i256
// CHECK-NEXT:     %30 = arith.addi %1, %29 : i256
// CHECK-NEXT:     %31 = llvm.inttoptr %30 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %32 = llvm.load %31 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256
// CHECK-NEXT:     %33 = arith.addi %32, %c0_i256_9 : i256
// CHECK-NEXT:     %34 = llvm.inttoptr %33 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %35 = llvm.load %34 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @mem_1d_struct() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %2 = arith.addi %1, %c64_i256 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %3 = arith.cmpi ugt, %2, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %4 = arith.cmpi ult, %2, %1 : i256
// CHECK-NEXT:     %5 = arith.ori %3, %4 : i1
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c0_i256_13 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %28 = llvm.inttoptr %c0_i256_13 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %29 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_14 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_14, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %6 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %2, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c64_i256_2 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_3 = arith.constant 64 : i256
// CHECK-NEXT:     %7 = llvm.inttoptr %c64_i256_3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %9 = arith.addi %8, %c64_i256_2 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_4 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %10 = arith.cmpi ugt, %9, %c18446744073709551615_i256_4 : i256
// CHECK-NEXT:     %11 = arith.cmpi ult, %9, %8 : i256
// CHECK-NEXT:     %12 = arith.ori %10, %11 : i1
// CHECK-NEXT:     scf.if %12 {
// CHECK-NEXT:       %c0_i256_13 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %28 = llvm.inttoptr %c0_i256_13 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %29 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_14 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_14, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256
// CHECK-NEXT:     %13 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %9, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %14 = llvm.inttoptr %8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c0_i256, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:     %15 = llvm.inttoptr %8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c0_i256_6, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %16 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %8, %16 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %17 = arith.addi %1, %c32_i256 : i256
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256
// CHECK-NEXT:     %18 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %20 = arith.addi %19, %c64_i256_7 : i256
// CHECK-NEXT:     %c18446744073709551615_i256_9 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %21 = arith.cmpi ugt, %20, %c18446744073709551615_i256_9 : i256
// CHECK-NEXT:     %22 = arith.cmpi ult, %20, %19 : i256
// CHECK-NEXT:     %23 = arith.ori %21, %22 : i1
// CHECK-NEXT:     scf.if %23 {
// CHECK-NEXT:       %c0_i256_13 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %28 = llvm.inttoptr %c0_i256_13 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %29 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_14 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_14, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_10 = arith.constant 64 : i256
// CHECK-NEXT:     %24 = llvm.inttoptr %c64_i256_10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %20, %24 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256
// CHECK-NEXT:     %25 = llvm.inttoptr %19 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c0_i256_11, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256_12 = arith.constant 0 : i256
// CHECK-NEXT:     %26 = llvm.inttoptr %19 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c0_i256_12, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %27 = llvm.inttoptr %17 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %19, %27 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @dyn_arr() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %0 = arith.muli %c10_i256, %c32_i256 : i256
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256
// CHECK-NEXT:     %1 = arith.addi %0, %c32_i256_0 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %2 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %3 = llvm.load %2 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %4 = arith.addi %3, %1 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %5 = arith.cmpi ugt, %4, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %6 = arith.cmpi ult, %4, %3 : i256
// CHECK-NEXT:     %7 = arith.ori %5, %6 : i1
// CHECK-NEXT:     scf.if %7 {
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %25 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %26 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_7, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %4, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %9 = llvm.inttoptr %3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c10_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256
// CHECK-NEXT:     %10 = arith.addi %3, %c32_i256_2 : i256
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %11 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %13 = llvm.inttoptr %10 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%12] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     "llvm.intr.memcpy"(%13, %16, %0) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> ()
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256
// CHECK-NEXT:     %17 = llvm.inttoptr %3 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %19 = arith.cmpi uge, %c0_i256_3, %18 : i256
// CHECK-NEXT:     scf.if %19 {
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %25 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c50_i256 = arith.constant 50 : i256
// CHECK-NEXT:       %26 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c50_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_7, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256
// CHECK-NEXT:     %20 = arith.muli %c0_i256_3, %c32_i256_4 : i256
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256
// CHECK-NEXT:     %21 = arith.addi %3, %c32_i256_5 : i256
// CHECK-NEXT:     %22 = arith.addi %21, %20 : i256
// CHECK-NEXT:     %23 = llvm.inttoptr %22 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %24 = llvm.load %23 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func @string() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256
// CHECK-NEXT:     %0 = arith.addi %c5_i256, %c31_i256 : i256
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256
// CHECK-NEXT:     %1 = arith.andi %0, %c-32_i256 : i256
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %2 = arith.addi %1, %c32_i256 : i256
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %3 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %5 = arith.addi %4, %2 : i256
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
// CHECK-NEXT:     %6 = arith.cmpi ugt, %5, %c18446744073709551615_i256 : i256
// CHECK-NEXT:     %7 = arith.cmpi ult, %5, %4 : i256
// CHECK-NEXT:     %8 = arith.ori %6, %7 : i1
// CHECK-NEXT:     scf.if %8 {
// CHECK-NEXT:       %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256
// CHECK-NEXT:       %11 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256
// CHECK-NEXT:       %12 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:       llvm.store %c65_i256, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:       %c0_i256_1 = arith.constant 0 : i256
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256
// CHECK-NEXT:       func.call @__revert(%c0_i256_1, %c24_i256, %c2_i256) : (i256, i256, i256) -> ()
// CHECK-NEXT:       func.call @".unreachable"() : () -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %9 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %5, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %10 = llvm.inttoptr %4 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c5_i256, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-EMPTY:
