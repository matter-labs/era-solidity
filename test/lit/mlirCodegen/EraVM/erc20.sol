// RUN: solc --mlir-action=print-std-mlir --mlir-target=eravm --mmlir --mlir-print-debuginfo %s | FileCheck %s

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0;

contract ERC20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;
  uint256 private _totalSupply;
  string private _name;
  string private _symbol;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  constructor(string memory name_, string memory symbol_) {
    _name = name_;
    _symbol = symbol_;
  }

  function _msgSender() internal view returns (address) {
    return msg.sender;
  }

  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function decimals() public view returns (uint256) {
    return 18;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount)
      public returns (bool) {
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][_msgSender()];
    unchecked {
      // TODO: checked:
      require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");

      _approve(sender, _msgSender(), currentAllowance - amount);
    }

    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public
      returns (bool) {
    // TODO: checked
    unchecked {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
    }
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public
      returns (bool) {
    uint256 currentAllowance = _allowances[_msgSender()][spender];
    unchecked {
      // TODO: checked:
      require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");

      _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

    return true;
  }

  function _transfer(address sender, address recipient, uint256 amount) public {
    // TODO: checked:
    unchecked {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
    }

    uint256 senderBalance = _balances[sender];
    unchecked {
      // TODO: checked:
      require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

      _balances[sender] = senderBalance - amount;
      _balances[recipient] += amount; // TODO: checked
    }
    emit Transfer(sender, recipient, amount);
  }

  function _mint(address account, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(account != address(0), "ERC20: mint to the zero address");
      _totalSupply += amount;
      _balances[account] += amount;
    }
    emit Transfer(address(0), account, amount);
  }

  function _burn(address account, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(account != address(0), "ERC20: burn from the zero address");
    }

    uint256 accountBalance = _balances[account];
    unchecked {
      // TODO: checked
      require(accountBalance >= amount, "ERC20: burn amount exceeds balance");

      _balances[account] = accountBalance - amount;
      _totalSupply -= amount; // TODO: checked
    }

    emit Transfer(account, address(0), amount);
  }

  function _approve(address owner, address spender, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(owner != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
    }

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #NonPayable = #sol<StateMutability NonPayable>
// CHECK-NEXT: #View = #sol<StateMutability View>
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc2 = loc({{.*}}:6:0)
// CHECK-NEXT: module {
// CHECK-NEXT:   func.func private @__return(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__farcall(i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @".unreachable"() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     llvm.unreachable loc(#loc1)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__revert(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__sha3(!llvm.ptr<1>, i256, i1) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__deploy() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %3 = arith.subi %2, %c0_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %4 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %5 = llvm.load %4 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %6 = arith.addi %5, %3 : i256 loc(#loc2)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc2)
// CHECK-NEXT:     %7 = arith.cmpi ugt, %6, %c18446744073709551615_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %8 = arith.cmpi ult, %6, %5 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = arith.ori %7, %8 : i1 loc(#loc2)
// CHECK-NEXT:     scf.if %9 {
// CHECK-NEXT:       %c0_i256_27 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc2)
// CHECK-NEXT:       %72 = llvm.inttoptr %c0_i256_27 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %72 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc2)
// CHECK-NEXT:       %73 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c65_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_29 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_28, %c24_i256, %c2_i256_29) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %6, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %13 = llvm.getelementptr %12[%c0_i256] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:     %14 = llvm.inttoptr %5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memcpy"(%14, %13, %3) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %15 = arith.addi %5, %3 : i256 loc(#loc2)
// CHECK-NEXT:     %16 = arith.subi %15, %5 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_2 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %17 = arith.cmpi slt, %16, %c64_i256_2 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %17 {
// CHECK-NEXT:       %c0_i256_27 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_28 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_27, %c0_i256_27, %c2_i256_28) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %18 = llvm.inttoptr %5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %20 = arith.addi %5, %19 : i256 loc(#loc2)
// CHECK-NEXT:     %c18446744073709551615_i256_3 = arith.constant 18446744073709551615 : i256 loc(#loc2)
// CHECK-NEXT:     %21 = arith.cmpi ugt, %20, %c18446744073709551615_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %21 {
// CHECK-NEXT:       %c64_i256_27 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:       %72 = llvm.inttoptr %c64_i256_27 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %73 = llvm.load %72 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc2)
// CHECK-NEXT:       %74 = llvm.inttoptr %73 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %74 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:       %75 = arith.addi %73, %c4_i256 : i256 loc(#loc2)
// CHECK-NEXT:       %c32_i256_28 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %76 = llvm.inttoptr %75 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c32_i256_28, %76 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %77 = arith.addi %75, %c32_i256_28 : i256 loc(#loc2)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc2)
// CHECK-NEXT:       %78 = llvm.inttoptr %77 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c34_i256, %78 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c32_i256_29 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %79 = arith.addi %77, %c32_i256_29 : i256 loc(#loc2)
// CHECK-NEXT:       %c29517451764962235613010368778373659638394623262010481748738546747006033225331_i256 = arith.constant 29517451764962235613010368778373659638394623262010481748738546747006033225331 : i256 loc(#loc2)
// CHECK-NEXT:       %80 = llvm.inttoptr %79 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c29517451764962235613010368778373659638394623262010481748738546747006033225331_i256, %80 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c32_i256_30 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %81 = arith.addi %79, %c32_i256_30 : i256 loc(#loc2)
// CHECK-NEXT:       %c45888551966424197807937402689295079693071411769653575580334356259971920822272_i256 = arith.constant 45888551966424197807937402689295079693071411769653575580334356259971920822272 : i256 loc(#loc2)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c45888551966424197807937402689295079693071411769653575580334356259971920822272_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %83 = arith.subi %77, %73 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_31 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%73, %83, %c2_i256_31) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %22 = llvm.inttoptr %5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:     %24 = arith.addi %23, %c31_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc2)
// CHECK-NEXT:     %25 = arith.andi %24, %c-32_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %26 = arith.addi %25, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %27 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %29 = arith.addi %28, %26 : i256 loc(#loc2)
// CHECK-NEXT:     %c18446744073709551615_i256_5 = arith.constant 18446744073709551615 : i256 loc(#loc2)
// CHECK-NEXT:     %30 = arith.cmpi ugt, %29, %c18446744073709551615_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:     %31 = arith.cmpi ult, %29, %28 : i256 loc(#loc2)
// CHECK-NEXT:     %32 = arith.ori %30, %31 : i1 loc(#loc2)
// CHECK-NEXT:     scf.if %32 {
// CHECK-NEXT:       %c0_i256_27 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc2)
// CHECK-NEXT:       %72 = llvm.inttoptr %c0_i256_27 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %72 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc2)
// CHECK-NEXT:       %73 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c65_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_29 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_28, %c24_i256, %c2_i256_29) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %33 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %29, %33 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %34 = llvm.inttoptr %28 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %23, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %35 = arith.addi %28, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:     %36 = arith.addi %20, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:     %37 = llvm.inttoptr %35 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %38 = llvm.inttoptr %36 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memmove"(%37, %38, %23) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %39 = arith.addi %5, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:     %40 = llvm.inttoptr %39 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %41 = llvm.load %40 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %42 = arith.addi %5, %41 : i256 loc(#loc2)
// CHECK-NEXT:     %c18446744073709551615_i256_9 = arith.constant 18446744073709551615 : i256 loc(#loc2)
// CHECK-NEXT:     %43 = arith.cmpi ugt, %42, %c18446744073709551615_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %43 {
// CHECK-NEXT:       %c64_i256_27 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:       %72 = llvm.inttoptr %c64_i256_27 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %73 = llvm.load %72 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc2)
// CHECK-NEXT:       %74 = llvm.inttoptr %73 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %74 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:       %75 = arith.addi %73, %c4_i256 : i256 loc(#loc2)
// CHECK-NEXT:       %c32_i256_28 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %76 = llvm.inttoptr %75 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c32_i256_28, %76 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %77 = arith.addi %75, %c32_i256_28 : i256 loc(#loc2)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc2)
// CHECK-NEXT:       %78 = llvm.inttoptr %77 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c34_i256, %78 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c32_i256_29 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %79 = arith.addi %77, %c32_i256_29 : i256 loc(#loc2)
// CHECK-NEXT:       %c29517451764962235613010368778373659638394623262010481748738546747006033225331_i256 = arith.constant 29517451764962235613010368778373659638394623262010481748738546747006033225331 : i256 loc(#loc2)
// CHECK-NEXT:       %80 = llvm.inttoptr %79 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c29517451764962235613010368778373659638394623262010481748738546747006033225331_i256, %80 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c32_i256_30 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:       %81 = arith.addi %79, %c32_i256_30 : i256 loc(#loc2)
// CHECK-NEXT:       %c45888551966424197807937402689295079693071411769653575580334356259971920822272_i256 = arith.constant 45888551966424197807937402689295079693071411769653575580334356259971920822272 : i256 loc(#loc2)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c45888551966424197807937402689295079693071411769653575580334356259971920822272_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %83 = arith.subi %77, %73 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_31 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%73, %83, %c2_i256_31) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %44 = llvm.inttoptr %39 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %45 = llvm.load %44 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c31_i256_10 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:     %46 = arith.addi %45, %c31_i256_10 : i256 loc(#loc2)
// CHECK-NEXT:     %c-32_i256_11 = arith.constant -32 : i256 loc(#loc2)
// CHECK-NEXT:     %47 = arith.andi %46, %c-32_i256_11 : i256 loc(#loc2)
// CHECK-NEXT:     %c32_i256_12 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %48 = arith.addi %47, %c32_i256_12 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_13 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %49 = llvm.inttoptr %c64_i256_13 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %50 = llvm.load %49 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %51 = arith.addi %50, %48 : i256 loc(#loc2)
// CHECK-NEXT:     %c18446744073709551615_i256_14 = arith.constant 18446744073709551615 : i256 loc(#loc2)
// CHECK-NEXT:     %52 = arith.cmpi ugt, %51, %c18446744073709551615_i256_14 : i256 loc(#loc2)
// CHECK-NEXT:     %53 = arith.cmpi ult, %51, %50 : i256 loc(#loc2)
// CHECK-NEXT:     %54 = arith.ori %52, %53 : i1 loc(#loc2)
// CHECK-NEXT:     scf.if %54 {
// CHECK-NEXT:       %c0_i256_27 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc2)
// CHECK-NEXT:       %72 = llvm.inttoptr %c0_i256_27 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %72 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc2)
// CHECK-NEXT:       %73 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       llvm.store %c65_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:       %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_29 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_28, %c24_i256, %c2_i256_29) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_15 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %55 = llvm.inttoptr %c64_i256_15 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %51, %55 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %56 = llvm.inttoptr %50 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %45, %56 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %c32_i256_16 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %57 = arith.addi %50, %c32_i256_16 : i256 loc(#loc2)
// CHECK-NEXT:     %58 = arith.addi %42, %c32_i256_16 : i256 loc(#loc2)
// CHECK-NEXT:     %59 = llvm.inttoptr %57 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %60 = llvm.inttoptr %58 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memmove"(%59, %60, %45) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c32_i256_17 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     %61 = arith.addi %39, %c32_i256_17 : i256 loc(#loc2)
// CHECK-NEXT:     call @_49(%28, %50) : (i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c64_i256_18 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %62 = llvm.inttoptr %c64_i256_18 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %63 = llvm.load %62 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_20 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %64 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %65 = llvm.load %64 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %66 = llvm.getelementptr %65[%c0_i256_19] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:     %67 = llvm.inttoptr %63 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memcpy"(%67, %66, %c0_i256_20) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c256_i256 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %68 = llvm.inttoptr %c256_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c32_i256_21 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c32_i256_21, %68 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c288_i256 = arith.constant 288 : i256 loc(#loc2)
// CHECK-NEXT:     %69 = llvm.inttoptr %c288_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_22 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_22, %69 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_23 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %70 = arith.muli %c0_i256_23, %c2_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_24 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %71 = arith.addi %70, %c64_i256_24 : i256 loc(#loc2)
// CHECK-NEXT:     %c256_i256_25 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_26 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     call @__return(%c256_i256_25, %71, %c2_i256_26) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__runtime() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %3 = arith.cmpi uge, %2, %c4_i256 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %3 {
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %4 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:       %5 = llvm.load %4 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:       %6 = llvm.getelementptr %5[%c0_i256_2] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:       %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:       %c224_i256 = arith.constant 224 : i256 loc(#loc2)
// CHECK-NEXT:       %8 = arith.shrui %7, %c224_i256 : i256 loc(#loc2)
// CHECK-NEXT:       %9 = arith.trunci %8 : i256 to i32 loc(#loc2)
// CHECK-NEXT:       scf.int_switch %9 : i32
// CHECK-NEXT:       case 117300739 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %12 = func.call @name_66() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_4 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %14, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = arith.subi %15, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %16, %17 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.inttoptr %12 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %15 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %19, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = arith.addi %12, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %22 = arith.addi %15, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = llvm.inttoptr %22 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %24 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         "llvm.intr.memmove"(%23, %24, %19) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:         %25 = arith.addi %22, %19 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %c0_i256_7, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c31_i256 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %19, %c31_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c-32_i256 = arith.constant -32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.andi %27, %c-32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.addi %22, %28 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %14, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %29, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%14, %31, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 157198259 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = func.call @approve_156(%17, %22) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %26, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.extui %24 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %28, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %26, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %27, %26 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %31, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 273580543 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c96_i256 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %25 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.getelementptr %25[%23] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %23, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @_approve_469(%17, %22, %27) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %30 = llvm.load %29 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%30, %c0_i256_8, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 404098525 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_7, %c0_i256_7, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %12 = func.call @totalSupply_90() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_4 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %14, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %12, %16 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %17 = arith.addi %14, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.subi %15, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%14, %18, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 599290589 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c96_i256 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %25 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.getelementptr %25[%23] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %23, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = func.call @transferFrom_202(%17, %22, %27) : (i256, i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %31 = llvm.load %30 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %32 = arith.addi %31, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %33 = arith.extui %29 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %34 = llvm.inttoptr %31 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %33, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %35 = arith.addi %31, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %36 = arith.subi %32, %31 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%31, %36, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 820017310 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c96_i256 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %25 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.getelementptr %25[%23] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %23, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @_transfer_332(%17, %22, %27) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %30 = llvm.load %29 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%30, %c0_i256_8, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 826074471 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_7, %c0_i256_7, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %12 = func.call @decimals_82() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_4 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %14, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %12, %16 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %17 = arith.addi %14, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.subi %15, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%14, %18, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 961581905 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = func.call @increaseAllowance_229(%17, %22) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %26, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.extui %24 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %28, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %26, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %27, %26 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %31, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1315881543 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @_mint_370(%17, %22) : (i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %25 = llvm.load %24 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%25, %c0_i256_8, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1633807128 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @_burn_424(%17, %22) : (i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %25 = llvm.load %24 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%25, %c0_i256_8, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1889567281 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = func.call @balanceOf_102(%17) : (i256) -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.load %20 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %22 = arith.addi %21, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %19, %23 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %21, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = arith.subi %22, %21 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%21, %25, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case -1780966591 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %12 = func.call @symbol_74() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_4 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = llvm.inttoptr %c64_i256_4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %14, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = arith.subi %15, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %16, %17 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.inttoptr %12 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %15 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %19, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_5 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = arith.addi %12, %c32_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %22 = arith.addi %15, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = llvm.inttoptr %22 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %24 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         "llvm.intr.memmove"(%23, %24, %19) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:         %25 = arith.addi %22, %19 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %c0_i256_7, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c31_i256 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %19, %c31_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c-32_i256 = arith.constant -32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.andi %27, %c-32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.addi %22, %28 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %14, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %29, %14 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%14, %31, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case -1537752361 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = func.call @decreaseAllowance_267(%17, %22) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %26, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.extui %24 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %28, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %26, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %27, %26 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %31, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case -1459249989 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = func.call @transfer_121(%17, %22) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %26, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.extui %24 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %29 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %28, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.addi %26, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %31 = arith.subi %27, %26 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %31, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case -580719298 {
// CHECK-NEXT:         %10 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = arith.cmpi ne, %10, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %11 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %12 = arith.subi %2, %c4_i256_4 : i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.cmpi slt, %12, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %13 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %14 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %15 = llvm.load %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %16 = llvm.getelementptr %15[%c4_i256_4] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %20 = llvm.load %19 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.getelementptr %20[%18] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_6 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %18, %c32_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = func.call @allowance_137(%17, %22) : (i256, i256) -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.addi %26, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %24, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_9 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.addi %26, %c32_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.subi %27, %26 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %30, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       default {
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       } loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     call @__revert(%c0_i256, %c0_i256_0, %c0_i256_1) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_decommit() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_return_data() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_active() {addr_space = 0 : i32} : !llvm.array<16 x ptr<3>> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @extra_abi_data(dense<0> : tensor<10xi256>) {addr_space = 0 : i32} : !llvm.array<10 x i256> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @call_flags(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @returndatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @memory_pointer(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   func.func private @__entry(%arg0: !llvm.ptr<3> loc({{.*}}:6:0), %arg1: i256 loc({{.*}}:6:0), %arg2: i256 loc({{.*}}:6:0), %arg3: i256 loc({{.*}}:6:0), %arg4: i256 loc({{.*}}:6:0), %arg5: i256 loc({{.*}}:6:0), %arg6: i256 loc({{.*}}:6:0), %arg7: i256 loc({{.*}}:6:0), %arg8: i256 loc({{.*}}:6:0), %arg9: i256 loc({{.*}}:6:0), %arg10: i256 loc({{.*}}:6:0), %arg11: i256 loc({{.*}}:6:0)) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %0 = llvm.mlir.addressof @memory_pointer : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_0, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.mlir.addressof @returndatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_1, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %3 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_2, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %5 = llvm.mlir.constant(dense<0> : vector<10xi256>) : vector<10xi256> loc(#loc2)
// CHECK-NEXT:     llvm.store %5, %4 : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg0, %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.ptrtoint %6 : !llvm.ptr<ptr<3>> to i256 loc(#loc2)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:     %8 = llvm.lshr %7, %c96_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.and %8, %c4294967295_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %11 = llvm.load %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %12 = llvm.getelementptr %arg0[%11] : (!llvm.ptr<3>, i256) -> !llvm.ptr, i8 loc(#loc2)
// CHECK-NEXT:     %13 = llvm.mlir.addressof @ptr_return_data : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_decommit : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %15 = llvm.mlir.addressof @ptr_active : !llvm.ptr<array<16 x ptr<3>>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%c0_i256_3, %c0_i256_4] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %16 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %17 = llvm.getelementptr %15[%c0_i256_5, %c1_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %17 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %18 = llvm.getelementptr %15[%c0_i256_6, %c2_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %18 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %19 = llvm.getelementptr %15[%c0_i256_7, %c3_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %19 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %20 = llvm.getelementptr %15[%c0_i256_8, %c4_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %20 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %21 = llvm.getelementptr %15[%c0_i256_9, %c5_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %21 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %22 = llvm.getelementptr %15[%c0_i256_10, %c6_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %22 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %23 = llvm.getelementptr %15[%c0_i256_11, %c7_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %23 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %24 = llvm.getelementptr %15[%c0_i256_12, %c8_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %24 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %25 = llvm.getelementptr %15[%c0_i256_13, %c9_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %25 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc2)
// CHECK-NEXT:     %26 = llvm.getelementptr %15[%c0_i256_14, %c10_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %26 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc2)
// CHECK-NEXT:     %27 = llvm.getelementptr %15[%c0_i256_15, %c11_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %27 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_16 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c12_i256 = arith.constant 12 : i256 loc(#loc2)
// CHECK-NEXT:     %28 = llvm.getelementptr %15[%c0_i256_16, %c12_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %28 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_17 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c13_i256 = arith.constant 13 : i256 loc(#loc2)
// CHECK-NEXT:     %29 = llvm.getelementptr %15[%c0_i256_17, %c13_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %29 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c14_i256 = arith.constant 14 : i256 loc(#loc2)
// CHECK-NEXT:     %30 = llvm.getelementptr %15[%c0_i256_18, %c14_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %30 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c15_i256 = arith.constant 15 : i256 loc(#loc2)
// CHECK-NEXT:     %31 = llvm.getelementptr %15[%c0_i256_19, %c15_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %31 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %32 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg1, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %33 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_20 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %34 = llvm.getelementptr %33[%c0_i256_20, %c0_i256_21] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg2, %34 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_22 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_23 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %35 = llvm.getelementptr %33[%c0_i256_22, %c1_i256_23] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg3, %35 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_24 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_25 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %36 = llvm.getelementptr %33[%c0_i256_24, %c2_i256_25] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg4, %36 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_26 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256_27 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %37 = llvm.getelementptr %33[%c0_i256_26, %c3_i256_27] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg5, %37 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256_29 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %38 = llvm.getelementptr %33[%c0_i256_28, %c4_i256_29] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg6, %38 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_30 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256_31 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %39 = llvm.getelementptr %33[%c0_i256_30, %c5_i256_31] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg7, %39 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_32 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256_33 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %40 = llvm.getelementptr %33[%c0_i256_32, %c6_i256_33] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg8, %40 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_34 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256_35 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %41 = llvm.getelementptr %33[%c0_i256_34, %c7_i256_35] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg9, %41 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_36 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256_37 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %42 = llvm.getelementptr %33[%c0_i256_36, %c8_i256_37] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg10, %42 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_38 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256_39 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %43 = llvm.getelementptr %33[%c0_i256_38, %c9_i256_39] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg11, %43 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c1_i256_40 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %44 = arith.andi %arg1, %c1_i256_40 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_41 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %45 = arith.cmpi eq, %44, %c1_i256_41 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       func.call @__deploy() : () -> () loc(#loc2)
// CHECK-NEXT:     } else {
// CHECK-NEXT:       func.call @__runtime() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func @_approve_469.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc6)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc8)
// CHECK-NEXT:     %4 = arith.extui %c0_i8 : i8 to i256 loc(#loc8)
// CHECK-NEXT:     %5 = arith.cmpi ne, %3, %4 : i256 loc(#loc7)
// CHECK-NEXT:     %false = arith.constant false loc(#loc9)
// CHECK-NEXT:     %6 = arith.cmpi eq, %5, %false : i1 loc(#loc9)
// CHECK-NEXT:     scf.if %6 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:       %56 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %57 = llvm.load %56 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc9)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc9)
// CHECK-NEXT:       %58 = llvm.inttoptr %57 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %58 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc9)
// CHECK-NEXT:       %59 = arith.addi %57, %c4_i256 : i256 loc(#loc9)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %60 = llvm.inttoptr %59 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c32_i256_20, %60 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %61 = arith.addi %59, %c32_i256_20 : i256 loc(#loc9)
// CHECK-NEXT:       %c36_i256 = arith.constant 36 : i256 loc(#loc9)
// CHECK-NEXT:       %62 = llvm.inttoptr %61 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c36_i256, %62 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %63 = arith.addi %61, %c32_i256_21 : i256 loc(#loc9)
// CHECK-NEXT:       %c31354931781638678487916134672869638484047149969764982831501014746446650500196_i256 = arith.constant 31354931781638678487916134672869638484047149969764982831501014746446650500196 : i256 loc(#loc9)
// CHECK-NEXT:       %64 = llvm.inttoptr %63 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c31354931781638678487916134672869638484047149969764982831501014746446650500196_i256, %64 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %65 = arith.addi %63, %c32_i256_22 : i256 loc(#loc9)
// CHECK-NEXT:       %c51742913093258732729005998692887265601192425265805909375210916622055285719040_i256 = arith.constant 51742913093258732729005998692887265601192425265805909375210916622055285719040 : i256 loc(#loc9)
// CHECK-NEXT:       %66 = llvm.inttoptr %65 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c51742913093258732729005998692887265601192425265805909375210916622055285719040_i256, %66 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %67 = arith.subi %61, %57 : i256 loc(#loc9)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc9)
// CHECK-NEXT:       func.call @__revert(%57, %67, %c2_i256) : (i256, i256, i256) -> () loc(#loc9)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc9)
// CHECK-NEXT:     } loc(#loc9)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c0_i8_2 = arith.constant 0 : i8 loc(#loc11)
// CHECK-NEXT:     %8 = arith.extui %c0_i8_2 : i8 to i256 loc(#loc11)
// CHECK-NEXT:     %9 = arith.cmpi ne, %7, %8 : i256 loc(#loc10)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc12)
// CHECK-NEXT:     %10 = arith.cmpi eq, %9, %false_3 : i1 loc(#loc12)
// CHECK-NEXT:     scf.if %10 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc12)
// CHECK-NEXT:       %56 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %57 = llvm.load %56 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc12)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc12)
// CHECK-NEXT:       %58 = llvm.inttoptr %57 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %58 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc12)
// CHECK-NEXT:       %59 = arith.addi %57, %c4_i256 : i256 loc(#loc12)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %60 = llvm.inttoptr %59 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c32_i256_20, %60 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %61 = arith.addi %59, %c32_i256_20 : i256 loc(#loc12)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc12)
// CHECK-NEXT:       %62 = llvm.inttoptr %61 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c34_i256, %62 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %63 = arith.addi %61, %c32_i256_21 : i256 loc(#loc12)
// CHECK-NEXT:       %c31354931781638678487916134672869638488806705378895508030211234510262059168357_i256 = arith.constant 31354931781638678487916134672869638488806705378895508030211234510262059168357 : i256 loc(#loc12)
// CHECK-NEXT:       %64 = llvm.inttoptr %63 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c31354931781638678487916134672869638488806705378895508030211234510262059168357_i256, %64 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %65 = arith.addi %63, %c32_i256_22 : i256 loc(#loc12)
// CHECK-NEXT:       %c52219164999525148860834357634456956735281286572158918307284071279203377479680_i256 = arith.constant 52219164999525148860834357634456956735281286572158918307284071279203377479680 : i256 loc(#loc12)
// CHECK-NEXT:       %66 = llvm.inttoptr %65 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c52219164999525148860834357634456956735281286572158918307284071279203377479680_i256, %66 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %67 = arith.subi %61, %57 : i256 loc(#loc12)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc12)
// CHECK-NEXT:       func.call @__revert(%57, %67, %c2_i256) : (i256, i256, i256) -> () loc(#loc12)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc12)
// CHECK-NEXT:     } loc(#loc12)
// CHECK-NEXT:     %c1_i256_4 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %c1_i256_4, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc15)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc16)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %17 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %16, %17 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %18 = llvm.inttoptr %c32_i256_7 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %15, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %19 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %false_9 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %20 = call @__sha3(%19, %c64_i256_8, %false_9) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc15)
// CHECK-NEXT:     %21 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %22 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc15)
// CHECK-NEXT:     llvm.store %21, %22 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc15)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %25 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %c-52305948261162578668367882225327028569797882979485679342215860919519743330011_i256 = arith.constant -52305948261162578668367882225327028569797882979485679342215860919519743330011 : i256 loc(#loc21)
// CHECK-NEXT:     %c64_i256_10 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %26 = llvm.inttoptr %c64_i256_10 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc21)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %28 = arith.addi %27, %c32_i256_11 : i256 loc(#loc21)
// CHECK-NEXT:     %29 = llvm.inttoptr %27 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %25, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c32_i256_12 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %30 = arith.addi %27, %c32_i256_12 : i256 loc(#loc21)
// CHECK-NEXT:     %31 = arith.subi %28, %27 : i256 loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %32 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %33 = arith.cmpi ule, %27, %c4294967295_i256 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %33 {
// CHECK-NEXT:       llvm.store %27, %32 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %34 = llvm.load %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %35 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %36 = arith.cmpi ule, %31, %c4294967295_i256_13 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %36 {
// CHECK-NEXT:       llvm.store %31, %35 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %37 = llvm.load %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %38 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %39 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %39 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %40 = arith.cmpi ule, %38, %c4294967295_i256_15 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %40 {
// CHECK-NEXT:       llvm.store %38, %39 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %41 = llvm.load %39 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %42 = arith.shli %34, %c64_i256_17 : i256 loc(#loc21)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc21)
// CHECK-NEXT:     %43 = arith.shli %37, %c96_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc21)
// CHECK-NEXT:     %44 = arith.shli %41, %c192_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %45 = arith.addi %42, %43 : i256 loc(#loc21)
// CHECK-NEXT:     %46 = arith.addi %45, %44 : i256 loc(#loc21)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc21)
// CHECK-NEXT:     %47 = arith.addi %46, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc21)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc21)
// CHECK-NEXT:     %48 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %54:2 = call @__farcall(%47, %c32781_i256, %c3_i256, %c-52305948261162578668367882225327028569797882979485679342215860919519743330011_i256, %23, %24, %48, %49, %50, %51, %52, %53) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc21)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc21)
// CHECK-NEXT:     %55 = arith.cmpi eq, %54#1, %false_18 : i1 loc(#loc21)
// CHECK-NEXT:     scf.if %55 {
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c0_i256_20 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc21)
// CHECK-NEXT:       func.call @__revert(%c0_i256_19, %c0_i256_20, %c2_i256) : (i256, i256, i256) -> () loc(#loc21)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func @_burn_424.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc23)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc24)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc24)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc24)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc26)
// CHECK-NEXT:     %3 = arith.extui %c0_i8 : i8 to i256 loc(#loc26)
// CHECK-NEXT:     %4 = arith.cmpi ne, %2, %3 : i256 loc(#loc25)
// CHECK-NEXT:     %false = arith.constant false loc(#loc27)
// CHECK-NEXT:     %5 = arith.cmpi eq, %4, %false : i1 loc(#loc27)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c64_i256_21 = arith.constant 64 : i256 loc(#loc27)
// CHECK-NEXT:       %65 = llvm.inttoptr %c64_i256_21 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %66 = llvm.load %65 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc27)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc27)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc27)
// CHECK-NEXT:       %68 = arith.addi %66, %c4_i256 : i256 loc(#loc27)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %69 = llvm.inttoptr %68 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c32_i256_22, %69 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %70 = arith.addi %68, %c32_i256_22 : i256 loc(#loc27)
// CHECK-NEXT:       %c33_i256 = arith.constant 33 : i256 loc(#loc27)
// CHECK-NEXT:       %71 = llvm.inttoptr %70 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c33_i256, %71 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c32_i256_23 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %72 = arith.addi %70, %c32_i256_23 : i256 loc(#loc27)
// CHECK-NEXT:       %c31354931781638678494316026001340845558170976982936511063842609339963588896115_i256 = arith.constant 31354931781638678494316026001340845558170976982936511063842609339963588896115 : i256 loc(#loc27)
// CHECK-NEXT:       %73 = llvm.inttoptr %72 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c31354931781638678494316026001340845558170976982936511063842609339963588896115_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c32_i256_24 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %74 = arith.addi %72, %c32_i256_24 : i256 loc(#loc27)
// CHECK-NEXT:       %c52015977587075634662932278421871521105961125924018222127100086566054726205440_i256 = arith.constant 52015977587075634662932278421871521105961125924018222127100086566054726205440 : i256 loc(#loc27)
// CHECK-NEXT:       %75 = llvm.inttoptr %74 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c52015977587075634662932278421871521105961125924018222127100086566054726205440_i256, %75 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %76 = arith.subi %70, %66 : i256 loc(#loc27)
// CHECK-NEXT:       %c2_i256_25 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:       func.call @__revert(%66, %76, %c2_i256_25) : (i256, i256, i256) -> () loc(#loc27)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc27)
// CHECK-NEXT:     } loc(#loc27)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc28)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc31)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc31)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     llvm.store %c0_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc31)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc31)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false_3) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc31)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc31)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc31)
// CHECK-NEXT:     llvm.store %13, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %14 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %16 = arith.cmpi uge, %14, %15 : i256 loc(#loc32)
// CHECK-NEXT:     %false_4 = arith.constant false loc(#loc34)
// CHECK-NEXT:     %17 = arith.cmpi eq, %16, %false_4 : i1 loc(#loc34)
// CHECK-NEXT:     scf.if %17 {
// CHECK-NEXT:       %c64_i256_21 = arith.constant 64 : i256 loc(#loc34)
// CHECK-NEXT:       %65 = llvm.inttoptr %c64_i256_21 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %66 = llvm.load %65 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc34)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc34)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc34)
// CHECK-NEXT:       %68 = arith.addi %66, %c4_i256 : i256 loc(#loc34)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %69 = llvm.inttoptr %68 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c32_i256_22, %69 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %70 = arith.addi %68, %c32_i256_22 : i256 loc(#loc34)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc34)
// CHECK-NEXT:       %71 = llvm.inttoptr %70 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c34_i256, %71 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c32_i256_23 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %72 = arith.addi %70, %c32_i256_23 : i256 loc(#loc34)
// CHECK-NEXT:       %c31354931781638678494316026001312189103416802390932084224065329695412615668078_i256 = arith.constant 31354931781638678494316026001312189103416802390932084224065329695412615668078 : i256 loc(#loc34)
// CHECK-NEXT:       %73 = llvm.inttoptr %72 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c31354931781638678494316026001312189103416802390932084224065329695412615668078_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c32_i256_24 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %74 = arith.addi %72, %c32_i256_24 : i256 loc(#loc34)
// CHECK-NEXT:       %c44957423563285989266247004906403561635230327756000124389404269791890710200320_i256 = arith.constant 44957423563285989266247004906403561635230327756000124389404269791890710200320 : i256 loc(#loc34)
// CHECK-NEXT:       %75 = llvm.inttoptr %74 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c44957423563285989266247004906403561635230327756000124389404269791890710200320_i256, %75 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %76 = arith.subi %70, %66 : i256 loc(#loc34)
// CHECK-NEXT:       %c2_i256_25 = arith.constant 2 : i256 loc(#loc34)
// CHECK-NEXT:       func.call @__revert(%66, %76, %c2_i256_25) : (i256, i256, i256) -> () loc(#loc34)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc34)
// CHECK-NEXT:     } loc(#loc34)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %18 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc36)
// CHECK-NEXT:     %19 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256 loc(#loc36)
// CHECK-NEXT:     %20 = llvm.inttoptr %c32_i256_7 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     llvm.store %c0_i256_5, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc36)
// CHECK-NEXT:     %21 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %false_9 = arith.constant false loc(#loc36)
// CHECK-NEXT:     %22 = call @__sha3(%21, %c64_i256_8, %false_9) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc36)
// CHECK-NEXT:     %23 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc38)
// CHECK-NEXT:     %25 = arith.subi %23, %24 : i256 loc(#loc37)
// CHECK-NEXT:     %26 = llvm.inttoptr %22 : i256 to !llvm.ptr<5> loc(#loc36)
// CHECK-NEXT:     llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc36)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %27 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc40)
// CHECK-NEXT:     %c2_i256_10 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %28 = llvm.inttoptr %c2_i256_10 : i256 to !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     %29 = llvm.load %28 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc41)
// CHECK-NEXT:     %30 = arith.subi %29, %27 : i256 loc(#loc41)
// CHECK-NEXT:     %31 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     llvm.store %30, %31 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     %32 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc42)
// CHECK-NEXT:     %c0_i8_11 = arith.constant 0 : i8 loc(#loc43)
// CHECK-NEXT:     %33 = arith.extui %c0_i8_11 : i8 to i256 loc(#loc43)
// CHECK-NEXT:     %34 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc45)
// CHECK-NEXT:     %c64_i256_12 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %35 = llvm.inttoptr %c64_i256_12 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %36 = llvm.load %35 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc45)
// CHECK-NEXT:     %c32_i256_13 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %37 = arith.addi %36, %c32_i256_13 : i256 loc(#loc45)
// CHECK-NEXT:     %38 = llvm.inttoptr %36 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     llvm.store %34, %38 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %c32_i256_14 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %39 = arith.addi %36, %c32_i256_14 : i256 loc(#loc45)
// CHECK-NEXT:     %40 = arith.subi %37, %36 : i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %41 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %41 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %42 = arith.cmpi ule, %36, %c4294967295_i256 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %42 {
// CHECK-NEXT:       llvm.store %36, %41 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %43 = llvm.load %41 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %44 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %45 = arith.cmpi ule, %40, %c4294967295_i256_15 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       llvm.store %40, %44 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %46 = llvm.load %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %47 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_17 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_18 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %48 = llvm.alloca %c1_i64_18 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_17, %48 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %49 = arith.cmpi ule, %47, %c4294967295_i256_17 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %49 {
// CHECK-NEXT:       llvm.store %47, %48 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %50 = llvm.load %48 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c64_i256_19 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %51 = arith.shli %43, %c64_i256_19 : i256 loc(#loc45)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc45)
// CHECK-NEXT:     %52 = arith.shli %46, %c96_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc45)
// CHECK-NEXT:     %53 = arith.shli %50, %c192_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %54 = arith.addi %51, %52 : i256 loc(#loc45)
// CHECK-NEXT:     %55 = arith.addi %54, %53 : i256 loc(#loc45)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc45)
// CHECK-NEXT:     %56 = arith.addi %55, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc45)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc45)
// CHECK-NEXT:     %57 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %58 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %59 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %60 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %61 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %62 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %63:2 = call @__farcall(%56, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %32, %33, %57, %58, %59, %60, %61, %62) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc45)
// CHECK-NEXT:     %false_20 = arith.constant false loc(#loc45)
// CHECK-NEXT:     %64 = arith.cmpi eq, %63#1, %false_20 : i1 loc(#loc45)
// CHECK-NEXT:     scf.if %64 {
// CHECK-NEXT:       %c0_i256_21 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_22 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c2_i256_23 = arith.constant 2 : i256 loc(#loc45)
// CHECK-NEXT:       func.call @__revert(%c0_i256_21, %c0_i256_22, %c2_i256_23) : (i256, i256, i256) -> () loc(#loc45)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     return loc(#loc22)
// CHECK-NEXT:   } loc(#loc22)
// CHECK-NEXT:   func.func @_mint_370.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc50)
// CHECK-NEXT:     %3 = arith.extui %c0_i8 : i8 to i256 loc(#loc50)
// CHECK-NEXT:     %4 = arith.cmpi ne, %2, %3 : i256 loc(#loc49)
// CHECK-NEXT:     %false = arith.constant false loc(#loc51)
// CHECK-NEXT:     %5 = arith.cmpi eq, %4, %false : i1 loc(#loc51)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc51)
// CHECK-NEXT:       %59 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %60 = llvm.load %59 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc51)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc51)
// CHECK-NEXT:       %61 = llvm.inttoptr %60 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %61 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc51)
// CHECK-NEXT:       %62 = arith.addi %60, %c4_i256 : i256 loc(#loc51)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc51)
// CHECK-NEXT:       %63 = llvm.inttoptr %62 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c32_i256_20, %63 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %64 = arith.addi %62, %c32_i256_20 : i256 loc(#loc51)
// CHECK-NEXT:       %c31_i256 = arith.constant 31 : i256 loc(#loc51)
// CHECK-NEXT:       %65 = llvm.inttoptr %64 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c31_i256, %65 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc51)
// CHECK-NEXT:       %66 = arith.addi %64, %c32_i256_21 : i256 loc(#loc51)
// CHECK-NEXT:       %c31354931781638678563069525067809233856775101976563302031013534919694566519552_i256 = arith.constant 31354931781638678563069525067809233856775101976563302031013534919694566519552 : i256 loc(#loc51)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c31354931781638678563069525067809233856775101976563302031013534919694566519552_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %68 = arith.subi %64, %60 : i256 loc(#loc51)
// CHECK-NEXT:       %c2_i256_22 = arith.constant 2 : i256 loc(#loc51)
// CHECK-NEXT:       func.call @__revert(%60, %68, %c2_i256_22) : (i256, i256, i256) -> () loc(#loc51)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc51)
// CHECK-NEXT:     } loc(#loc51)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %6 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %c2_i256_1 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %7 = llvm.inttoptr %c2_i256_1 : i256 to !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc53)
// CHECK-NEXT:     %9 = arith.addi %8, %6 : i256 loc(#loc53)
// CHECK-NEXT:     %10 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc55)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc55)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %c0_i256, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc55)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc55)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256, %false_3) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc55)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc55)
// CHECK-NEXT:     %18 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %17, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c32_i256_6 = arith.constant 32 : i256 loc(#loc55)
// CHECK-NEXT:     %19 = llvm.inttoptr %c32_i256_6 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %c0_i256_4, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc55)
// CHECK-NEXT:     %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc55)
// CHECK-NEXT:     %21 = call @__sha3(%20, %c64_i256_7, %false_8) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc55)
// CHECK-NEXT:     %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc55)
// CHECK-NEXT:     %24 = arith.addi %23, %16 : i256 loc(#loc55)
// CHECK-NEXT:     %25 = llvm.inttoptr %15 : i256 to !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     llvm.store %24, %25 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     %c0_i8_9 = arith.constant 0 : i8 loc(#loc57)
// CHECK-NEXT:     %26 = arith.extui %c0_i8_9 : i8 to i256 loc(#loc57)
// CHECK-NEXT:     %27 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc58)
// CHECK-NEXT:     %28 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc60)
// CHECK-NEXT:     %c64_i256_10 = arith.constant 64 : i256 loc(#loc60)
// CHECK-NEXT:     %29 = llvm.inttoptr %c64_i256_10 : i256 to !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     %30 = llvm.load %29 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc60)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc60)
// CHECK-NEXT:     %31 = arith.addi %30, %c32_i256_11 : i256 loc(#loc60)
// CHECK-NEXT:     %32 = llvm.inttoptr %30 : i256 to !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     llvm.store %28, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     %c32_i256_12 = arith.constant 32 : i256 loc(#loc60)
// CHECK-NEXT:     %33 = arith.addi %30, %c32_i256_12 : i256 loc(#loc60)
// CHECK-NEXT:     %34 = arith.subi %31, %30 : i256 loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %35 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %36 = arith.cmpi ule, %30, %c4294967295_i256 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %36 {
// CHECK-NEXT:       llvm.store %30, %35 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %37 = llvm.load %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %38 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %39 = arith.cmpi ule, %34, %c4294967295_i256_13 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %39 {
// CHECK-NEXT:       llvm.store %34, %38 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %40 = llvm.load %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %41 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %42 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %42 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %43 = arith.cmpi ule, %41, %c4294967295_i256_15 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %43 {
// CHECK-NEXT:       llvm.store %41, %42 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %44 = llvm.load %42 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc60)
// CHECK-NEXT:     %45 = arith.shli %37, %c64_i256_17 : i256 loc(#loc60)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc60)
// CHECK-NEXT:     %46 = arith.shli %40, %c96_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc60)
// CHECK-NEXT:     %47 = arith.shli %44, %c192_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %48 = arith.addi %45, %46 : i256 loc(#loc60)
// CHECK-NEXT:     %49 = arith.addi %48, %47 : i256 loc(#loc60)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc60)
// CHECK-NEXT:     %50 = arith.addi %49, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc60)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc60)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %54 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %55 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %56 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %57:2 = call @__farcall(%50, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %26, %27, %51, %52, %53, %54, %55, %56) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc60)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc60)
// CHECK-NEXT:     %58 = arith.cmpi eq, %57#1, %false_18 : i1 loc(#loc60)
// CHECK-NEXT:     scf.if %58 {
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc60)
// CHECK-NEXT:       %c0_i256_20 = arith.constant 0 : i256 loc(#loc60)
// CHECK-NEXT:       %c2_i256_21 = arith.constant 2 : i256 loc(#loc60)
// CHECK-NEXT:       func.call @__revert(%c0_i256_19, %c0_i256_20, %c2_i256_21) : (i256, i256, i256) -> () loc(#loc60)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @_transfer_332.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc62)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc63)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc64)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc64)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc64)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc66)
// CHECK-NEXT:     %4 = arith.extui %c0_i8 : i8 to i256 loc(#loc66)
// CHECK-NEXT:     %5 = arith.cmpi ne, %3, %4 : i256 loc(#loc65)
// CHECK-NEXT:     %false = arith.constant false loc(#loc67)
// CHECK-NEXT:     %6 = arith.cmpi eq, %5, %false : i1 loc(#loc67)
// CHECK-NEXT:     scf.if %6 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc67)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc67)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc67)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc67)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc67)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc67)
// CHECK-NEXT:       %c37_i256 = arith.constant 37 : i256 loc(#loc67)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c37_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc67)
// CHECK-NEXT:       %c31354931781638678607228669297131712859107492772550336241160036866987736981860_i256 = arith.constant 31354931781638678607228669297131712859107492772550336241160036866987736981860 : i256 loc(#loc67)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859107492772550336241160036866987736981860_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc67)
// CHECK-NEXT:       %c45433405612597180762055095701412804886438245671210399661410036396145969725440_i256 = arith.constant 45433405612597180762055095701412804886438245671210399661410036396145969725440 : i256 loc(#loc67)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c45433405612597180762055095701412804886438245671210399661410036396145969725440_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc67)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc67)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c2_i256) : (i256, i256, i256) -> () loc(#loc67)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc67)
// CHECK-NEXT:     } loc(#loc67)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc68)
// CHECK-NEXT:     %c0_i8_2 = arith.constant 0 : i8 loc(#loc69)
// CHECK-NEXT:     %8 = arith.extui %c0_i8_2 : i8 to i256 loc(#loc69)
// CHECK-NEXT:     %9 = arith.cmpi ne, %7, %8 : i256 loc(#loc68)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc70)
// CHECK-NEXT:     %10 = arith.cmpi eq, %9, %false_3 : i1 loc(#loc70)
// CHECK-NEXT:     scf.if %10 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc70)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc70)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc70)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc70)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc70)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc70)
// CHECK-NEXT:       %c35_i256 = arith.constant 35 : i256 loc(#loc70)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c35_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc70)
// CHECK-NEXT:       %c31354931781638678607228669297131712859126084785867252355217498662940140921970_i256 = arith.constant 31354931781638678607228669297131712859126084785867252355217498662940140921970 : i256 loc(#loc70)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859126084785867252355217498662940140921970_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc70)
// CHECK-NEXT:       %c45887578820189300338443374388718498632482616163288499555830078344056365121536_i256 = arith.constant 45887578820189300338443374388718498632482616163288499555830078344056365121536 : i256 loc(#loc70)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c45887578820189300338443374388718498632482616163288499555830078344056365121536_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc70)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc70)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c2_i256) : (i256, i256, i256) -> () loc(#loc70)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc70)
// CHECK-NEXT:     } loc(#loc70)
// CHECK-NEXT:     %c1_i256_4 = arith.constant 1 : i256 loc(#loc71)
// CHECK-NEXT:     %11 = llvm.alloca %c1_i256_4 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc71)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %12 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc72)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc73)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc73)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     llvm.store %c0_i256, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc73)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc73)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc73)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc73)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc73)
// CHECK-NEXT:     llvm.store %18, %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc71)
// CHECK-NEXT:     %19 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc74)
// CHECK-NEXT:     %20 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc75)
// CHECK-NEXT:     %21 = arith.cmpi uge, %19, %20 : i256 loc(#loc74)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc76)
// CHECK-NEXT:     %22 = arith.cmpi eq, %21, %false_7 : i1 loc(#loc76)
// CHECK-NEXT:     scf.if %22 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc76)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc76)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc76)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc76)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc76)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc76)
// CHECK-NEXT:       %c38_i256 = arith.constant 38 : i256 loc(#loc76)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c38_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc76)
// CHECK-NEXT:       %c31354931781638678607228669297131712859100820671745083778533502622993977909346_i256 = arith.constant 31354931781638678607228669297131712859100820671745083778533502622993977909346 : i256 loc(#loc76)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859100820671745083778533502622993977909346_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc76)
// CHECK-NEXT:       %c44065838241030143116324720188876985940908656145555552347773292252211112312832_i256 = arith.constant 44065838241030143116324720188876985940908656145555552347773292252211112312832 : i256 loc(#loc76)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c44065838241030143116324720188876985940908656145555552347773292252211112312832_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc76)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc76)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c2_i256) : (i256, i256, i256) -> () loc(#loc76)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc76)
// CHECK-NEXT:     } loc(#loc76)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc77)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc78)
// CHECK-NEXT:     %24 = llvm.inttoptr %c0_i256_9 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     llvm.store %23, %24 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %c32_i256_10 = arith.constant 32 : i256 loc(#loc78)
// CHECK-NEXT:     %25 = llvm.inttoptr %c32_i256_10 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     llvm.store %c0_i256_8, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %c64_i256_11 = arith.constant 64 : i256 loc(#loc78)
// CHECK-NEXT:     %26 = llvm.inttoptr %c0_i256_9 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %false_12 = arith.constant false loc(#loc78)
// CHECK-NEXT:     %27 = call @__sha3(%26, %c64_i256_11, %false_12) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc78)
// CHECK-NEXT:     %28 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     %29 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     %30 = arith.subi %28, %29 : i256 loc(#loc79)
// CHECK-NEXT:     %31 = llvm.inttoptr %27 : i256 to !llvm.ptr<5> loc(#loc78)
// CHECK-NEXT:     llvm.store %30, %31 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc78)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %32 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc81)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc82)
// CHECK-NEXT:     %33 = llvm.inttoptr %c0_i256_14 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %32, %33 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c32_i256_15 = arith.constant 32 : i256 loc(#loc82)
// CHECK-NEXT:     %34 = llvm.inttoptr %c32_i256_15 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %c0_i256_13, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c64_i256_16 = arith.constant 64 : i256 loc(#loc82)
// CHECK-NEXT:     %35 = llvm.inttoptr %c0_i256_14 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %false_17 = arith.constant false loc(#loc82)
// CHECK-NEXT:     %36 = call @__sha3(%35, %c64_i256_16, %false_17) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc82)
// CHECK-NEXT:     %37 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc83)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %38 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc81)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc82)
// CHECK-NEXT:     %39 = llvm.inttoptr %c0_i256_19 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %38, %39 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c32_i256_20 = arith.constant 32 : i256 loc(#loc82)
// CHECK-NEXT:     %40 = llvm.inttoptr %c32_i256_20 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %c0_i256_18, %40 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c64_i256_21 = arith.constant 64 : i256 loc(#loc82)
// CHECK-NEXT:     %41 = llvm.inttoptr %c0_i256_19 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %false_22 = arith.constant false loc(#loc82)
// CHECK-NEXT:     %42 = call @__sha3(%41, %c64_i256_21, %false_22) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc82)
// CHECK-NEXT:     %43 = llvm.inttoptr %42 : i256 to !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     %44 = llvm.load %43 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc82)
// CHECK-NEXT:     %45 = arith.addi %44, %37 : i256 loc(#loc82)
// CHECK-NEXT:     %46 = llvm.inttoptr %36 : i256 to !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     llvm.store %45, %46 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     %47 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc84)
// CHECK-NEXT:     %48 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc85)
// CHECK-NEXT:     %49 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc86)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc87)
// CHECK-NEXT:     %c64_i256_23 = arith.constant 64 : i256 loc(#loc87)
// CHECK-NEXT:     %50 = llvm.inttoptr %c64_i256_23 : i256 to !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     %51 = llvm.load %50 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc87)
// CHECK-NEXT:     %c32_i256_24 = arith.constant 32 : i256 loc(#loc87)
// CHECK-NEXT:     %52 = arith.addi %51, %c32_i256_24 : i256 loc(#loc87)
// CHECK-NEXT:     %53 = llvm.inttoptr %51 : i256 to !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     llvm.store %49, %53 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     %c32_i256_25 = arith.constant 32 : i256 loc(#loc87)
// CHECK-NEXT:     %54 = arith.addi %51, %c32_i256_25 : i256 loc(#loc87)
// CHECK-NEXT:     %55 = arith.subi %52, %51 : i256 loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %56 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %56 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %57 = arith.cmpi ule, %51, %c4294967295_i256 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %57 {
// CHECK-NEXT:       llvm.store %51, %56 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %58 = llvm.load %56 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256_26 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64_27 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %59 = llvm.alloca %c1_i64_27 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256_26, %59 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %60 = arith.cmpi ule, %55, %c4294967295_i256_26 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %60 {
// CHECK-NEXT:       llvm.store %55, %59 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %61 = llvm.load %59 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %62 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256_28 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64_29 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %63 = llvm.alloca %c1_i64_29 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256_28, %63 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %64 = arith.cmpi ule, %62, %c4294967295_i256_28 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %64 {
// CHECK-NEXT:       llvm.store %62, %63 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %65 = llvm.load %63 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %c64_i256_30 = arith.constant 64 : i256 loc(#loc87)
// CHECK-NEXT:     %66 = arith.shli %58, %c64_i256_30 : i256 loc(#loc87)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc87)
// CHECK-NEXT:     %67 = arith.shli %61, %c96_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc87)
// CHECK-NEXT:     %68 = arith.shli %65, %c192_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %69 = arith.addi %66, %67 : i256 loc(#loc87)
// CHECK-NEXT:     %70 = arith.addi %69, %68 : i256 loc(#loc87)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc87)
// CHECK-NEXT:     %71 = arith.addi %70, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc87)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc87)
// CHECK-NEXT:     %72 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %73 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %74 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %75 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %76 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %77 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %78:2 = call @__farcall(%71, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %47, %48, %72, %73, %74, %75, %76, %77) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc87)
// CHECK-NEXT:     %false_31 = arith.constant false loc(#loc87)
// CHECK-NEXT:     %79 = arith.cmpi eq, %78#1, %false_31 : i1 loc(#loc87)
// CHECK-NEXT:     scf.if %79 {
// CHECK-NEXT:       %c0_i256_32 = arith.constant 0 : i256 loc(#loc87)
// CHECK-NEXT:       %c0_i256_33 = arith.constant 0 : i256 loc(#loc87)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc87)
// CHECK-NEXT:       func.call @__revert(%c0_i256_32, %c0_i256_33, %c2_i256) : (i256, i256, i256) -> () loc(#loc87)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     return loc(#loc61)
// CHECK-NEXT:   } loc(#loc61)
// CHECK-NEXT:   func.func @decreaseAllowance_267.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc89)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc89)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc89)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc90)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc90)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc90)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc91)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %3 = call @_msgSender_58.0() : () -> i256 loc(#loc92)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc93)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc93)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc93)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %false = arith.constant false loc(#loc93)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc93)
// CHECK-NEXT:     %8 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc94)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc93)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc93)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc93)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc93)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc93)
// CHECK-NEXT:     %13 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc93)
// CHECK-NEXT:     %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc93)
// CHECK-NEXT:     llvm.store %14, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %15 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc95)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc96)
// CHECK-NEXT:     %17 = arith.cmpi uge, %15, %16 : i256 loc(#loc95)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc97)
// CHECK-NEXT:     %18 = arith.cmpi eq, %17, %false_7 : i1 loc(#loc97)
// CHECK-NEXT:     scf.if %18 {
// CHECK-NEXT:       %c64_i256_8 = arith.constant 64 : i256 loc(#loc97)
// CHECK-NEXT:       %24 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %25 = llvm.load %24 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc97)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc97)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc97)
// CHECK-NEXT:       %27 = arith.addi %25, %c4_i256 : i256 loc(#loc97)
// CHECK-NEXT:       %c32_i256_9 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %28 = llvm.inttoptr %27 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c32_i256_9, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %29 = arith.addi %27, %c32_i256_9 : i256 loc(#loc97)
// CHECK-NEXT:       %c37_i256 = arith.constant 37 : i256 loc(#loc97)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c37_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %31 = arith.addi %29, %c32_i256_10 : i256 loc(#loc97)
// CHECK-NEXT:       %c31354931781638678506476475496475743842680577777870365728514456330491174612855_i256 = arith.constant 31354931781638678506476475496475743842680577777870365728514456330491174612855 : i256 loc(#loc97)
// CHECK-NEXT:       %32 = llvm.inttoptr %31 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c31354931781638678506476475496475743842680577777870365728514456330491174612855_i256, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c32_i256_11 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %33 = arith.addi %31, %c32_i256_11 : i256 loc(#loc97)
// CHECK-NEXT:       %c14690266658072097593480850647027335513285713462661904985951319567533531463680_i256 = arith.constant 14690266658072097593480850647027335513285713462661904985951319567533531463680 : i256 loc(#loc97)
// CHECK-NEXT:       %34 = llvm.inttoptr %33 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c14690266658072097593480850647027335513285713462661904985951319567533531463680_i256, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %35 = arith.subi %29, %25 : i256 loc(#loc97)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc97)
// CHECK-NEXT:       func.call @__revert(%25, %35, %c2_i256) : (i256, i256, i256) -> () loc(#loc97)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc97)
// CHECK-NEXT:     } loc(#loc97)
// CHECK-NEXT:     %19 = call @_msgSender_58.0() : () -> i256 loc(#loc98)
// CHECK-NEXT:     %20 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc99)
// CHECK-NEXT:     %21 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc100)
// CHECK-NEXT:     %22 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc101)
// CHECK-NEXT:     %23 = arith.subi %21, %22 : i256 loc(#loc100)
// CHECK-NEXT:     call @_approve_469(%19, %20, %23) : (i256, i256, i256) -> () loc(#loc102)
// CHECK-NEXT:     %true = arith.constant true loc(#loc103)
// CHECK-NEXT:     return %true : i1 loc(#loc104)
// CHECK-NEXT:   } loc(#loc88)
// CHECK-NEXT:   func.func @increaseAllowance_229.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc106)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc106)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc106)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc107)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc107)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc107)
// CHECK-NEXT:     %2 = call @_msgSender_58.0() : () -> i256 loc(#loc108)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc109)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %4 = call @_msgSender_58.0() : () -> i256 loc(#loc110)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc111)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc111)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %c1_i256_1, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc111)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %false = arith.constant false loc(#loc111)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc111)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc112)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc111)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc111)
// CHECK-NEXT:     %11 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %8, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc111)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc111)
// CHECK-NEXT:     %13 = call @__sha3(%12, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc111)
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<5> loc(#loc111)
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc111)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc113)
// CHECK-NEXT:     %17 = arith.addi %15, %16 : i256 loc(#loc111)
// CHECK-NEXT:     call @_approve_469(%2, %3, %17) : (i256, i256, i256) -> () loc(#loc114)
// CHECK-NEXT:     %true = arith.constant true loc(#loc115)
// CHECK-NEXT:     return %true : i1 loc(#loc116)
// CHECK-NEXT:   } loc(#loc105)
// CHECK-NEXT:   func.func @transferFrom_202.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc118)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc118)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc118)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc119)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc120)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc121)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc122)
// CHECK-NEXT:     %5 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc123)
// CHECK-NEXT:     call @_transfer_332(%3, %4, %5) : (i256, i256, i256) -> () loc(#loc124)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc125)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc125)
// CHECK-NEXT:     %c1_i256_3 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc127)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc127)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %c1_i256_3, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc127)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %false = arith.constant false loc(#loc127)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc127)
// CHECK-NEXT:     %12 = call @_msgSender_58.0() : () -> i256 loc(#loc128)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc127)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc127)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %11, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc127)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc127)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc127)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc127)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc127)
// CHECK-NEXT:     llvm.store %18, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc125)
// CHECK-NEXT:     %19 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc129)
// CHECK-NEXT:     %20 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc130)
// CHECK-NEXT:     %21 = arith.cmpi uge, %19, %20 : i256 loc(#loc129)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc131)
// CHECK-NEXT:     %22 = arith.cmpi eq, %21, %false_8 : i1 loc(#loc131)
// CHECK-NEXT:     scf.if %22 {
// CHECK-NEXT:       %c64_i256_9 = arith.constant 64 : i256 loc(#loc131)
// CHECK-NEXT:       %28 = llvm.inttoptr %c64_i256_9 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %29 = llvm.load %28 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc131)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc131)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc131)
// CHECK-NEXT:       %31 = arith.addi %29, %c4_i256 : i256 loc(#loc131)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %32 = llvm.inttoptr %31 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c32_i256_10, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %33 = arith.addi %31, %c32_i256_10 : i256 loc(#loc131)
// CHECK-NEXT:       %c40_i256 = arith.constant 40 : i256 loc(#loc131)
// CHECK-NEXT:       %34 = llvm.inttoptr %33 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c40_i256, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c32_i256_11 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %35 = arith.addi %33, %c32_i256_11 : i256 loc(#loc131)
// CHECK-NEXT:       %c31354931781638678607228669297131712859100820671745083778533502622993977909345_i256 = arith.constant 31354931781638678607228669297131712859100820671745083778533502622993977909345 : i256 loc(#loc131)
// CHECK-NEXT:       %36 = llvm.inttoptr %35 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859100820671745083778533502622993977909345_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c32_i256_12 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %37 = arith.addi %35, %c32_i256_12 : i256 loc(#loc131)
// CHECK-NEXT:       %c49041376442327685983450583443845300569967147870487584211451521639864848089088_i256 = arith.constant 49041376442327685983450583443845300569967147870487584211451521639864848089088 : i256 loc(#loc131)
// CHECK-NEXT:       %38 = llvm.inttoptr %37 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c49041376442327685983450583443845300569967147870487584211451521639864848089088_i256, %38 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %39 = arith.subi %33, %29 : i256 loc(#loc131)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc131)
// CHECK-NEXT:       func.call @__revert(%29, %39, %c2_i256) : (i256, i256, i256) -> () loc(#loc131)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc131)
// CHECK-NEXT:     } loc(#loc131)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc132)
// CHECK-NEXT:     %24 = call @_msgSender_58.0() : () -> i256 loc(#loc133)
// CHECK-NEXT:     %25 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc134)
// CHECK-NEXT:     %26 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     %27 = arith.subi %25, %26 : i256 loc(#loc134)
// CHECK-NEXT:     call @_approve_469(%23, %24, %27) : (i256, i256, i256) -> () loc(#loc136)
// CHECK-NEXT:     %true = arith.constant true loc(#loc137)
// CHECK-NEXT:     return %true : i1 loc(#loc138)
// CHECK-NEXT:   } loc(#loc117)
// CHECK-NEXT:   func.func @approve_156.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc140)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc140)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc140)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc141)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc141)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc141)
// CHECK-NEXT:     %2 = call @_msgSender_58.0() : () -> i256 loc(#loc142)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc143)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc144)
// CHECK-NEXT:     call @_approve_469(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc145)
// CHECK-NEXT:     %true = arith.constant true loc(#loc146)
// CHECK-NEXT:     return %true : i1 loc(#loc147)
// CHECK-NEXT:   } loc(#loc139)
// CHECK-NEXT:   func.func @allowance_137.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc149)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc149)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc149)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc150)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc150)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc150)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc151)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc152)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc152)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %c1_i256_1, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc152)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %false = arith.constant false loc(#loc152)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc152)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc153)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc152)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc152)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc152)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc152)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc152)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc152)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc152)
// CHECK-NEXT:     return %13 : i256 loc(#loc154)
// CHECK-NEXT:   } loc(#loc148)
// CHECK-NEXT:   func.func @transfer_121.0(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc156)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc156)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc156)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc157)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc157)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc157)
// CHECK-NEXT:     %2 = call @_msgSender_58.0() : () -> i256 loc(#loc158)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc159)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc160)
// CHECK-NEXT:     call @_transfer_332(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc161)
// CHECK-NEXT:     %true = arith.constant true loc(#loc162)
// CHECK-NEXT:     return %true : i1 loc(#loc163)
// CHECK-NEXT:   } loc(#loc155)
// CHECK-NEXT:   func.func @balanceOf_102.0(%arg0: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc165)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc165)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc165)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc166)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc167)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc167)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     llvm.store %c0_i256, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc167)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %false = arith.constant false loc(#loc167)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc167)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc167)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc167)
// CHECK-NEXT:     return %7 : i256 loc(#loc168)
// CHECK-NEXT:   } loc(#loc164)
// CHECK-NEXT:   func.func @totalSupply_90.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %0 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc170)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc170)
// CHECK-NEXT:     return %1 : i256 loc(#loc171)
// CHECK-NEXT:   } loc(#loc169)
// CHECK-NEXT:   func.func @decimals_82.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c18_i8 = arith.constant 18 : i8 loc(#loc173)
// CHECK-NEXT:     %0 = arith.extui %c18_i8 : i8 to i256 loc(#loc173)
// CHECK-NEXT:     return %0 : i256 loc(#loc174)
// CHECK-NEXT:   } loc(#loc172)
// CHECK-NEXT:   func.func @symbol_74.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc176)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %c4_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %false = arith.constant false loc(#loc176)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc176)
// CHECK-NEXT:     %3 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<5> loc(#loc176)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc176)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc176)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc176)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc176)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc176)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc176)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc176)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc176)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc176)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc176)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc176)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       %c4_i256_6 = arith.constant 4 : i256 loc(#loc176)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc176)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256_6 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc176)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc176)
// CHECK-NEXT:       func.call @__revert(%c0_i256_7, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc176)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc176)
// CHECK-NEXT:     } loc(#loc176)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc176)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc176)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc176)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc176)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc176)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc176)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc176)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc176)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc176)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc176)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc176)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc176)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc176)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc176)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc176)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     } loc(#loc176)
// CHECK-NEXT:     return %9 : i256 loc(#loc177)
// CHECK-NEXT:   } loc(#loc175)
// CHECK-NEXT:   func.func @name_66.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc1)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc1)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc1)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc179)
// CHECK-NEXT:   } loc(#loc178)
// CHECK-NEXT:   func.func @_msgSender_58.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #View} {
// CHECK-NEXT:     %0 = "llvm.intrcall"() <{id = 3170 : i32, name = "eravm.caller"}> : () -> i256 loc(#loc181)
// CHECK-NEXT:     return %0 : i256 loc(#loc182)
// CHECK-NEXT:   } loc(#loc180)
// CHECK-NEXT:   func.func @_msgSender_58() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %0 = "llvm.intrcall"() <{id = 3170 : i32, name = "eravm.caller"}> : () -> i256 loc(#loc181)
// CHECK-NEXT:     return %0 : i256 loc(#loc182)
// CHECK-NEXT:   } loc(#loc180)
// CHECK-NEXT:   func.func @name_66() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc1)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc1)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc1)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc1)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc179)
// CHECK-NEXT:   } loc(#loc178)
// CHECK-NEXT:   func.func @symbol_74() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc176)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %c4_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %false = arith.constant false loc(#loc176)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc176)
// CHECK-NEXT:     %3 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<5> loc(#loc176)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc176)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc176)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc176)
// CHECK-NEXT:     %6 = arith.andi %5, %c-32_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc176)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc176)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc176)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc176)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc176)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc176)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc176)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc176)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc176)
// CHECK-NEXT:       %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       %c4_i256_6 = arith.constant 4 : i256 loc(#loc176)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc176)
// CHECK-NEXT:       %21 = llvm.inttoptr %c4_i256_6 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %c65_i256, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc176)
// CHECK-NEXT:       %c0_i256_8 = arith.constant 0 : i256 loc(#loc176)
// CHECK-NEXT:       func.call @__revert(%c0_i256_7, %c24_i256, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc176)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc176)
// CHECK-NEXT:     } loc(#loc176)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc176)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:     %16 = arith.addi %9, %c32_i256_2 : i256 loc(#loc176)
// CHECK-NEXT:     %c31_i256_3 = arith.constant 31 : i256 loc(#loc176)
// CHECK-NEXT:     %17 = arith.addi %4, %c31_i256_3 : i256 loc(#loc176)
// CHECK-NEXT:     %c-32_i256_4 = arith.constant -32 : i256 loc(#loc176)
// CHECK-NEXT:     %18 = arith.andi %17, %c-32_i256_4 : i256 loc(#loc176)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc176)
// CHECK-NEXT:     %19 = arith.index_castui %18 : i256 to index loc(#loc176)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc176)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %19 step %c1 {
// CHECK-NEXT:       %20 = arith.index_castui %arg0 : index to i256 loc(#loc176)
// CHECK-NEXT:       %21 = arith.addi %2, %20 : i256 loc(#loc176)
// CHECK-NEXT:       %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc176)
// CHECK-NEXT:       %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc176)
// CHECK-NEXT:       %c32_i256_5 = arith.constant 32 : i256 loc(#loc176)
// CHECK-NEXT:       %24 = arith.muli %20, %c32_i256_5 : i256 loc(#loc176)
// CHECK-NEXT:       %25 = arith.addi %16, %24 : i256 loc(#loc176)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:       llvm.store %23, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc176)
// CHECK-NEXT:     } loc(#loc176)
// CHECK-NEXT:     return %9 : i256 loc(#loc177)
// CHECK-NEXT:   } loc(#loc175)
// CHECK-NEXT:   func.func @decimals_82() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c18_i8 = arith.constant 18 : i8 loc(#loc173)
// CHECK-NEXT:     %0 = arith.extui %c18_i8 : i8 to i256 loc(#loc173)
// CHECK-NEXT:     return %0 : i256 loc(#loc174)
// CHECK-NEXT:   } loc(#loc172)
// CHECK-NEXT:   func.func @totalSupply_90() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %0 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc170)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc170)
// CHECK-NEXT:     return %1 : i256 loc(#loc171)
// CHECK-NEXT:   } loc(#loc169)
// CHECK-NEXT:   func.func @balanceOf_102(%arg0: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc165)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc165)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc165)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc166)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc167)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc167)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     llvm.store %c0_i256, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc167)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc167)
// CHECK-NEXT:     %false = arith.constant false loc(#loc167)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc167)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc167)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc167)
// CHECK-NEXT:     return %7 : i256 loc(#loc168)
// CHECK-NEXT:   } loc(#loc164)
// CHECK-NEXT:   func.func @transfer_121(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc156)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc156)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc156)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc157)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc157)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc157)
// CHECK-NEXT:     %2 = call @_msgSender_58() : () -> i256 loc(#loc158)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc159)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc160)
// CHECK-NEXT:     call @_transfer_332(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc161)
// CHECK-NEXT:     %true = arith.constant true loc(#loc162)
// CHECK-NEXT:     return %true : i1 loc(#loc163)
// CHECK-NEXT:   } loc(#loc155)
// CHECK-NEXT:   func.func @allowance_137(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #View} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc149)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc149)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc149)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc150)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc150)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc150)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc151)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc152)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc152)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %c1_i256_1, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc152)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %false = arith.constant false loc(#loc152)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc152)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc153)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc152)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc152)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc152)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc152)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc152)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc152)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc152)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc152)
// CHECK-NEXT:     return %13 : i256 loc(#loc154)
// CHECK-NEXT:   } loc(#loc148)
// CHECK-NEXT:   func.func @approve_156(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc140)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc140)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc140)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc141)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc141)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc141)
// CHECK-NEXT:     %2 = call @_msgSender_58() : () -> i256 loc(#loc142)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc143)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc144)
// CHECK-NEXT:     call @_approve_469(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc145)
// CHECK-NEXT:     %true = arith.constant true loc(#loc146)
// CHECK-NEXT:     return %true : i1 loc(#loc147)
// CHECK-NEXT:   } loc(#loc139)
// CHECK-NEXT:   func.func @transferFrom_202(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc118)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc118)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc118)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc119)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc120)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc121)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc122)
// CHECK-NEXT:     %5 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc123)
// CHECK-NEXT:     call @_transfer_332(%3, %4, %5) : (i256, i256, i256) -> () loc(#loc124)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc125)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc125)
// CHECK-NEXT:     %c1_i256_3 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc127)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc127)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %c1_i256_3, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc127)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %false = arith.constant false loc(#loc127)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc127)
// CHECK-NEXT:     %12 = call @_msgSender_58() : () -> i256 loc(#loc128)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc127)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc127)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     llvm.store %11, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc127)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc127)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc127)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc127)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc127)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc127)
// CHECK-NEXT:     llvm.store %18, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc125)
// CHECK-NEXT:     %19 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc129)
// CHECK-NEXT:     %20 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc130)
// CHECK-NEXT:     %21 = arith.cmpi uge, %19, %20 : i256 loc(#loc129)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc131)
// CHECK-NEXT:     %22 = arith.cmpi eq, %21, %false_8 : i1 loc(#loc131)
// CHECK-NEXT:     scf.if %22 {
// CHECK-NEXT:       %c64_i256_9 = arith.constant 64 : i256 loc(#loc131)
// CHECK-NEXT:       %28 = llvm.inttoptr %c64_i256_9 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %29 = llvm.load %28 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc131)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc131)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc131)
// CHECK-NEXT:       %31 = arith.addi %29, %c4_i256 : i256 loc(#loc131)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %32 = llvm.inttoptr %31 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c32_i256_10, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %33 = arith.addi %31, %c32_i256_10 : i256 loc(#loc131)
// CHECK-NEXT:       %c40_i256 = arith.constant 40 : i256 loc(#loc131)
// CHECK-NEXT:       %34 = llvm.inttoptr %33 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c40_i256, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c32_i256_11 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %35 = arith.addi %33, %c32_i256_11 : i256 loc(#loc131)
// CHECK-NEXT:       %c31354931781638678607228669297131712859100820671745083778533502622993977909345_i256 = arith.constant 31354931781638678607228669297131712859100820671745083778533502622993977909345 : i256 loc(#loc131)
// CHECK-NEXT:       %36 = llvm.inttoptr %35 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859100820671745083778533502622993977909345_i256, %36 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %c32_i256_12 = arith.constant 32 : i256 loc(#loc131)
// CHECK-NEXT:       %37 = arith.addi %35, %c32_i256_12 : i256 loc(#loc131)
// CHECK-NEXT:       %c49041376442327685983450583443845300569967147870487584211451521639864848089088_i256 = arith.constant 49041376442327685983450583443845300569967147870487584211451521639864848089088 : i256 loc(#loc131)
// CHECK-NEXT:       %38 = llvm.inttoptr %37 : i256 to !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       llvm.store %c49041376442327685983450583443845300569967147870487584211451521639864848089088_i256, %38 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc131)
// CHECK-NEXT:       %39 = arith.subi %33, %29 : i256 loc(#loc131)
// CHECK-NEXT:       %c0_i256_13 = arith.constant 0 : i256 loc(#loc131)
// CHECK-NEXT:       func.call @__revert(%29, %39, %c0_i256_13) : (i256, i256, i256) -> () loc(#loc131)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc131)
// CHECK-NEXT:     } loc(#loc131)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc132)
// CHECK-NEXT:     %24 = call @_msgSender_58() : () -> i256 loc(#loc133)
// CHECK-NEXT:     %25 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc134)
// CHECK-NEXT:     %26 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     %27 = arith.subi %25, %26 : i256 loc(#loc134)
// CHECK-NEXT:     call @_approve_469(%23, %24, %27) : (i256, i256, i256) -> () loc(#loc136)
// CHECK-NEXT:     %true = arith.constant true loc(#loc137)
// CHECK-NEXT:     return %true : i1 loc(#loc138)
// CHECK-NEXT:   } loc(#loc117)
// CHECK-NEXT:   func.func @increaseAllowance_229(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc106)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc106)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc106)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc107)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc107)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc107)
// CHECK-NEXT:     %2 = call @_msgSender_58() : () -> i256 loc(#loc108)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc109)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %4 = call @_msgSender_58() : () -> i256 loc(#loc110)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc111)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc111)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %c1_i256_1, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc111)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %false = arith.constant false loc(#loc111)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc111)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc112)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc111)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc111)
// CHECK-NEXT:     %11 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     llvm.store %8, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc111)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc111)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc111)
// CHECK-NEXT:     %13 = call @__sha3(%12, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc111)
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<5> loc(#loc111)
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc111)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc113)
// CHECK-NEXT:     %17 = arith.addi %15, %16 : i256 loc(#loc111)
// CHECK-NEXT:     call @_approve_469(%2, %3, %17) : (i256, i256, i256) -> () loc(#loc114)
// CHECK-NEXT:     %true = arith.constant true loc(#loc115)
// CHECK-NEXT:     return %true : i1 loc(#loc116)
// CHECK-NEXT:   } loc(#loc105)
// CHECK-NEXT:   func.func @decreaseAllowance_267(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc89)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc89)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc89)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc90)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc90)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc90)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc91)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %3 = call @_msgSender_58() : () -> i256 loc(#loc92)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc93)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc93)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc93)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %false = arith.constant false loc(#loc93)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc93)
// CHECK-NEXT:     %8 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc94)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc93)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc93)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc93)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc93)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc93)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc93)
// CHECK-NEXT:     %13 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc93)
// CHECK-NEXT:     %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc93)
// CHECK-NEXT:     llvm.store %14, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %15 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc95)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc96)
// CHECK-NEXT:     %17 = arith.cmpi uge, %15, %16 : i256 loc(#loc95)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc97)
// CHECK-NEXT:     %18 = arith.cmpi eq, %17, %false_7 : i1 loc(#loc97)
// CHECK-NEXT:     scf.if %18 {
// CHECK-NEXT:       %c64_i256_8 = arith.constant 64 : i256 loc(#loc97)
// CHECK-NEXT:       %24 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %25 = llvm.load %24 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc97)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc97)
// CHECK-NEXT:       %26 = llvm.inttoptr %25 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc97)
// CHECK-NEXT:       %27 = arith.addi %25, %c4_i256 : i256 loc(#loc97)
// CHECK-NEXT:       %c32_i256_9 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %28 = llvm.inttoptr %27 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c32_i256_9, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %29 = arith.addi %27, %c32_i256_9 : i256 loc(#loc97)
// CHECK-NEXT:       %c37_i256 = arith.constant 37 : i256 loc(#loc97)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c37_i256, %30 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %31 = arith.addi %29, %c32_i256_10 : i256 loc(#loc97)
// CHECK-NEXT:       %c31354931781638678506476475496475743842680577777870365728514456330491174612855_i256 = arith.constant 31354931781638678506476475496475743842680577777870365728514456330491174612855 : i256 loc(#loc97)
// CHECK-NEXT:       %32 = llvm.inttoptr %31 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c31354931781638678506476475496475743842680577777870365728514456330491174612855_i256, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %c32_i256_11 = arith.constant 32 : i256 loc(#loc97)
// CHECK-NEXT:       %33 = arith.addi %31, %c32_i256_11 : i256 loc(#loc97)
// CHECK-NEXT:       %c14690266658072097593480850647027335513285713462661904985951319567533531463680_i256 = arith.constant 14690266658072097593480850647027335513285713462661904985951319567533531463680 : i256 loc(#loc97)
// CHECK-NEXT:       %34 = llvm.inttoptr %33 : i256 to !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       llvm.store %c14690266658072097593480850647027335513285713462661904985951319567533531463680_i256, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc97)
// CHECK-NEXT:       %35 = arith.subi %29, %25 : i256 loc(#loc97)
// CHECK-NEXT:       %c0_i256_12 = arith.constant 0 : i256 loc(#loc97)
// CHECK-NEXT:       func.call @__revert(%25, %35, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc97)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc97)
// CHECK-NEXT:     } loc(#loc97)
// CHECK-NEXT:     %19 = call @_msgSender_58() : () -> i256 loc(#loc98)
// CHECK-NEXT:     %20 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc99)
// CHECK-NEXT:     %21 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc100)
// CHECK-NEXT:     %22 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc101)
// CHECK-NEXT:     %23 = arith.subi %21, %22 : i256 loc(#loc100)
// CHECK-NEXT:     call @_approve_469(%19, %20, %23) : (i256, i256, i256) -> () loc(#loc102)
// CHECK-NEXT:     %true = arith.constant true loc(#loc103)
// CHECK-NEXT:     return %true : i1 loc(#loc104)
// CHECK-NEXT:   } loc(#loc88)
// CHECK-NEXT:   func.func @_transfer_332(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc62)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc63)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc64)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc64)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc64)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc66)
// CHECK-NEXT:     %4 = arith.extui %c0_i8 : i8 to i256 loc(#loc66)
// CHECK-NEXT:     %5 = arith.cmpi ne, %3, %4 : i256 loc(#loc65)
// CHECK-NEXT:     %false = arith.constant false loc(#loc67)
// CHECK-NEXT:     %6 = arith.cmpi eq, %5, %false : i1 loc(#loc67)
// CHECK-NEXT:     scf.if %6 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc67)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc67)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc67)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc67)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc67)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc67)
// CHECK-NEXT:       %c37_i256 = arith.constant 37 : i256 loc(#loc67)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c37_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc67)
// CHECK-NEXT:       %c31354931781638678607228669297131712859107492772550336241160036866987736981860_i256 = arith.constant 31354931781638678607228669297131712859107492772550336241160036866987736981860 : i256 loc(#loc67)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859107492772550336241160036866987736981860_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc67)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc67)
// CHECK-NEXT:       %c45433405612597180762055095701412804886438245671210399661410036396145969725440_i256 = arith.constant 45433405612597180762055095701412804886438245671210399661410036396145969725440 : i256 loc(#loc67)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       llvm.store %c45433405612597180762055095701412804886438245671210399661410036396145969725440_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc67)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc67)
// CHECK-NEXT:       %c0_i256_36 = arith.constant 0 : i256 loc(#loc67)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c0_i256_36) : (i256, i256, i256) -> () loc(#loc67)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc67)
// CHECK-NEXT:     } loc(#loc67)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc68)
// CHECK-NEXT:     %c0_i8_2 = arith.constant 0 : i8 loc(#loc69)
// CHECK-NEXT:     %8 = arith.extui %c0_i8_2 : i8 to i256 loc(#loc69)
// CHECK-NEXT:     %9 = arith.cmpi ne, %7, %8 : i256 loc(#loc68)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc70)
// CHECK-NEXT:     %10 = arith.cmpi eq, %9, %false_3 : i1 loc(#loc70)
// CHECK-NEXT:     scf.if %10 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc70)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc70)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc70)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc70)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc70)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc70)
// CHECK-NEXT:       %c35_i256 = arith.constant 35 : i256 loc(#loc70)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c35_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc70)
// CHECK-NEXT:       %c31354931781638678607228669297131712859126084785867252355217498662940140921970_i256 = arith.constant 31354931781638678607228669297131712859126084785867252355217498662940140921970 : i256 loc(#loc70)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859126084785867252355217498662940140921970_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc70)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc70)
// CHECK-NEXT:       %c45887578820189300338443374388718498632482616163288499555830078344056365121536_i256 = arith.constant 45887578820189300338443374388718498632482616163288499555830078344056365121536 : i256 loc(#loc70)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       llvm.store %c45887578820189300338443374388718498632482616163288499555830078344056365121536_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc70)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc70)
// CHECK-NEXT:       %c0_i256_36 = arith.constant 0 : i256 loc(#loc70)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c0_i256_36) : (i256, i256, i256) -> () loc(#loc70)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc70)
// CHECK-NEXT:     } loc(#loc70)
// CHECK-NEXT:     %c1_i256_4 = arith.constant 1 : i256 loc(#loc71)
// CHECK-NEXT:     %11 = llvm.alloca %c1_i256_4 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc71)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %12 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc72)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc73)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc73)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     llvm.store %c0_i256, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc73)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc73)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc73)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc73)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc73)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc73)
// CHECK-NEXT:     llvm.store %18, %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc71)
// CHECK-NEXT:     %19 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc74)
// CHECK-NEXT:     %20 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc75)
// CHECK-NEXT:     %21 = arith.cmpi uge, %19, %20 : i256 loc(#loc74)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc76)
// CHECK-NEXT:     %22 = arith.cmpi eq, %21, %false_7 : i1 loc(#loc76)
// CHECK-NEXT:     scf.if %22 {
// CHECK-NEXT:       %c64_i256_32 = arith.constant 64 : i256 loc(#loc76)
// CHECK-NEXT:       %80 = llvm.inttoptr %c64_i256_32 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %81 = llvm.load %80 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc76)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc76)
// CHECK-NEXT:       %82 = llvm.inttoptr %81 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %82 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc76)
// CHECK-NEXT:       %83 = arith.addi %81, %c4_i256 : i256 loc(#loc76)
// CHECK-NEXT:       %c32_i256_33 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %84 = llvm.inttoptr %83 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c32_i256_33, %84 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %85 = arith.addi %83, %c32_i256_33 : i256 loc(#loc76)
// CHECK-NEXT:       %c38_i256 = arith.constant 38 : i256 loc(#loc76)
// CHECK-NEXT:       %86 = llvm.inttoptr %85 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c38_i256, %86 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c32_i256_34 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %87 = arith.addi %85, %c32_i256_34 : i256 loc(#loc76)
// CHECK-NEXT:       %c31354931781638678607228669297131712859100820671745083778533502622993977909346_i256 = arith.constant 31354931781638678607228669297131712859100820671745083778533502622993977909346 : i256 loc(#loc76)
// CHECK-NEXT:       %88 = llvm.inttoptr %87 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c31354931781638678607228669297131712859100820671745083778533502622993977909346_i256, %88 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %c32_i256_35 = arith.constant 32 : i256 loc(#loc76)
// CHECK-NEXT:       %89 = arith.addi %87, %c32_i256_35 : i256 loc(#loc76)
// CHECK-NEXT:       %c44065838241030143116324720188876985940908656145555552347773292252211112312832_i256 = arith.constant 44065838241030143116324720188876985940908656145555552347773292252211112312832 : i256 loc(#loc76)
// CHECK-NEXT:       %90 = llvm.inttoptr %89 : i256 to !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       llvm.store %c44065838241030143116324720188876985940908656145555552347773292252211112312832_i256, %90 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc76)
// CHECK-NEXT:       %91 = arith.subi %85, %81 : i256 loc(#loc76)
// CHECK-NEXT:       %c0_i256_36 = arith.constant 0 : i256 loc(#loc76)
// CHECK-NEXT:       func.call @__revert(%81, %91, %c0_i256_36) : (i256, i256, i256) -> () loc(#loc76)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc76)
// CHECK-NEXT:     } loc(#loc76)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc77)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc78)
// CHECK-NEXT:     %24 = llvm.inttoptr %c0_i256_9 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     llvm.store %23, %24 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %c32_i256_10 = arith.constant 32 : i256 loc(#loc78)
// CHECK-NEXT:     %25 = llvm.inttoptr %c32_i256_10 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     llvm.store %c0_i256_8, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %c64_i256_11 = arith.constant 64 : i256 loc(#loc78)
// CHECK-NEXT:     %26 = llvm.inttoptr %c0_i256_9 : i256 to !llvm.ptr<1> loc(#loc78)
// CHECK-NEXT:     %false_12 = arith.constant false loc(#loc78)
// CHECK-NEXT:     %27 = call @__sha3(%26, %c64_i256_11, %false_12) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc78)
// CHECK-NEXT:     %28 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     %29 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     %30 = arith.subi %28, %29 : i256 loc(#loc79)
// CHECK-NEXT:     %31 = llvm.inttoptr %27 : i256 to !llvm.ptr<5> loc(#loc78)
// CHECK-NEXT:     llvm.store %30, %31 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc78)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %32 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc81)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc82)
// CHECK-NEXT:     %33 = llvm.inttoptr %c0_i256_14 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %32, %33 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c32_i256_15 = arith.constant 32 : i256 loc(#loc82)
// CHECK-NEXT:     %34 = llvm.inttoptr %c32_i256_15 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %c0_i256_13, %34 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c64_i256_16 = arith.constant 64 : i256 loc(#loc82)
// CHECK-NEXT:     %35 = llvm.inttoptr %c0_i256_14 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %false_17 = arith.constant false loc(#loc82)
// CHECK-NEXT:     %36 = call @__sha3(%35, %c64_i256_16, %false_17) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc82)
// CHECK-NEXT:     %37 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc83)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %38 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc81)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc82)
// CHECK-NEXT:     %39 = llvm.inttoptr %c0_i256_19 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %38, %39 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c32_i256_20 = arith.constant 32 : i256 loc(#loc82)
// CHECK-NEXT:     %40 = llvm.inttoptr %c32_i256_20 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     llvm.store %c0_i256_18, %40 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %c64_i256_21 = arith.constant 64 : i256 loc(#loc82)
// CHECK-NEXT:     %41 = llvm.inttoptr %c0_i256_19 : i256 to !llvm.ptr<1> loc(#loc82)
// CHECK-NEXT:     %false_22 = arith.constant false loc(#loc82)
// CHECK-NEXT:     %42 = call @__sha3(%41, %c64_i256_21, %false_22) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc82)
// CHECK-NEXT:     %43 = llvm.inttoptr %42 : i256 to !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     %44 = llvm.load %43 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc82)
// CHECK-NEXT:     %45 = arith.addi %44, %37 : i256 loc(#loc82)
// CHECK-NEXT:     %46 = llvm.inttoptr %36 : i256 to !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     llvm.store %45, %46 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc82)
// CHECK-NEXT:     %47 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc84)
// CHECK-NEXT:     %48 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc85)
// CHECK-NEXT:     %49 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc86)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc87)
// CHECK-NEXT:     %c64_i256_23 = arith.constant 64 : i256 loc(#loc87)
// CHECK-NEXT:     %50 = llvm.inttoptr %c64_i256_23 : i256 to !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     %51 = llvm.load %50 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc87)
// CHECK-NEXT:     %c32_i256_24 = arith.constant 32 : i256 loc(#loc87)
// CHECK-NEXT:     %52 = arith.addi %51, %c32_i256_24 : i256 loc(#loc87)
// CHECK-NEXT:     %53 = llvm.inttoptr %51 : i256 to !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     llvm.store %49, %53 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc87)
// CHECK-NEXT:     %c32_i256_25 = arith.constant 32 : i256 loc(#loc87)
// CHECK-NEXT:     %54 = arith.addi %51, %c32_i256_25 : i256 loc(#loc87)
// CHECK-NEXT:     %55 = arith.subi %52, %51 : i256 loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %56 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %56 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %57 = arith.cmpi ule, %51, %c4294967295_i256 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %57 {
// CHECK-NEXT:       llvm.store %51, %56 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %58 = llvm.load %56 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256_26 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64_27 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %59 = llvm.alloca %c1_i64_27 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256_26, %59 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %60 = arith.cmpi ule, %55, %c4294967295_i256_26 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %60 {
// CHECK-NEXT:       llvm.store %55, %59 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %61 = llvm.load %59 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %62 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc87)
// CHECK-NEXT:     %c4294967295_i256_28 = arith.constant 4294967295 : i256 loc(#loc87)
// CHECK-NEXT:     %c1_i64_29 = arith.constant 1 : i64 loc(#loc87)
// CHECK-NEXT:     %63 = llvm.alloca %c1_i64_29 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     llvm.store %c4294967295_i256_28, %63 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %64 = arith.cmpi ule, %62, %c4294967295_i256_28 : i256 loc(#loc87)
// CHECK-NEXT:     scf.if %64 {
// CHECK-NEXT:       llvm.store %62, %63 : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     %65 = llvm.load %63 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc87)
// CHECK-NEXT:     %c64_i256_30 = arith.constant 64 : i256 loc(#loc87)
// CHECK-NEXT:     %66 = arith.shli %58, %c64_i256_30 : i256 loc(#loc87)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc87)
// CHECK-NEXT:     %67 = arith.shli %61, %c96_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc87)
// CHECK-NEXT:     %68 = arith.shli %65, %c192_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %69 = arith.addi %66, %67 : i256 loc(#loc87)
// CHECK-NEXT:     %70 = arith.addi %69, %68 : i256 loc(#loc87)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc87)
// CHECK-NEXT:     %71 = arith.addi %70, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc87)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc87)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc87)
// CHECK-NEXT:     %72 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %73 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %74 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %75 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %76 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %77 = llvm.mlir.undef : i256 loc(#loc87)
// CHECK-NEXT:     %78:2 = call @__farcall(%71, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %47, %48, %72, %73, %74, %75, %76, %77) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc87)
// CHECK-NEXT:     %false_31 = arith.constant false loc(#loc87)
// CHECK-NEXT:     %79 = arith.cmpi eq, %78#1, %false_31 : i1 loc(#loc87)
// CHECK-NEXT:     scf.if %79 {
// CHECK-NEXT:       %c0_i256_32 = arith.constant 0 : i256 loc(#loc87)
// CHECK-NEXT:       %c0_i256_33 = arith.constant 0 : i256 loc(#loc87)
// CHECK-NEXT:       %c0_i256_34 = arith.constant 0 : i256 loc(#loc87)
// CHECK-NEXT:       func.call @__revert(%c0_i256_32, %c0_i256_33, %c0_i256_34) : (i256, i256, i256) -> () loc(#loc87)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc87)
// CHECK-NEXT:     } loc(#loc87)
// CHECK-NEXT:     return loc(#loc61)
// CHECK-NEXT:   } loc(#loc61)
// CHECK-NEXT:   func.func @_mint_370(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc50)
// CHECK-NEXT:     %3 = arith.extui %c0_i8 : i8 to i256 loc(#loc50)
// CHECK-NEXT:     %4 = arith.cmpi ne, %2, %3 : i256 loc(#loc49)
// CHECK-NEXT:     %false = arith.constant false loc(#loc51)
// CHECK-NEXT:     %5 = arith.cmpi eq, %4, %false : i1 loc(#loc51)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc51)
// CHECK-NEXT:       %59 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %60 = llvm.load %59 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc51)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc51)
// CHECK-NEXT:       %61 = llvm.inttoptr %60 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %61 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc51)
// CHECK-NEXT:       %62 = arith.addi %60, %c4_i256 : i256 loc(#loc51)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc51)
// CHECK-NEXT:       %63 = llvm.inttoptr %62 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c32_i256_20, %63 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %64 = arith.addi %62, %c32_i256_20 : i256 loc(#loc51)
// CHECK-NEXT:       %c31_i256 = arith.constant 31 : i256 loc(#loc51)
// CHECK-NEXT:       %65 = llvm.inttoptr %64 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c31_i256, %65 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc51)
// CHECK-NEXT:       %66 = arith.addi %64, %c32_i256_21 : i256 loc(#loc51)
// CHECK-NEXT:       %c31354931781638678563069525067809233856775101976563302031013534919694566519552_i256 = arith.constant 31354931781638678563069525067809233856775101976563302031013534919694566519552 : i256 loc(#loc51)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       llvm.store %c31354931781638678563069525067809233856775101976563302031013534919694566519552_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc51)
// CHECK-NEXT:       %68 = arith.subi %64, %60 : i256 loc(#loc51)
// CHECK-NEXT:       %c0_i256_22 = arith.constant 0 : i256 loc(#loc51)
// CHECK-NEXT:       func.call @__revert(%60, %68, %c0_i256_22) : (i256, i256, i256) -> () loc(#loc51)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc51)
// CHECK-NEXT:     } loc(#loc51)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %6 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc52)
// CHECK-NEXT:     %c2_i256_1 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %7 = llvm.inttoptr %c2_i256_1 : i256 to !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc53)
// CHECK-NEXT:     %9 = arith.addi %8, %6 : i256 loc(#loc53)
// CHECK-NEXT:     %10 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc53)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc55)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc55)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %c0_i256, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc55)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc55)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256, %false_3) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc55)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %17 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc55)
// CHECK-NEXT:     %18 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %17, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c32_i256_6 = arith.constant 32 : i256 loc(#loc55)
// CHECK-NEXT:     %19 = llvm.inttoptr %c32_i256_6 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     llvm.store %c0_i256_4, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc55)
// CHECK-NEXT:     %20 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc55)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc55)
// CHECK-NEXT:     %21 = call @__sha3(%20, %c64_i256_7, %false_8) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc55)
// CHECK-NEXT:     %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     %23 = llvm.load %22 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc55)
// CHECK-NEXT:     %24 = arith.addi %23, %16 : i256 loc(#loc55)
// CHECK-NEXT:     %25 = llvm.inttoptr %15 : i256 to !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     llvm.store %24, %25 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc55)
// CHECK-NEXT:     %c0_i8_9 = arith.constant 0 : i8 loc(#loc57)
// CHECK-NEXT:     %26 = arith.extui %c0_i8_9 : i8 to i256 loc(#loc57)
// CHECK-NEXT:     %27 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc58)
// CHECK-NEXT:     %28 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc60)
// CHECK-NEXT:     %c64_i256_10 = arith.constant 64 : i256 loc(#loc60)
// CHECK-NEXT:     %29 = llvm.inttoptr %c64_i256_10 : i256 to !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     %30 = llvm.load %29 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc60)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc60)
// CHECK-NEXT:     %31 = arith.addi %30, %c32_i256_11 : i256 loc(#loc60)
// CHECK-NEXT:     %32 = llvm.inttoptr %30 : i256 to !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     llvm.store %28, %32 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc60)
// CHECK-NEXT:     %c32_i256_12 = arith.constant 32 : i256 loc(#loc60)
// CHECK-NEXT:     %33 = arith.addi %30, %c32_i256_12 : i256 loc(#loc60)
// CHECK-NEXT:     %34 = arith.subi %31, %30 : i256 loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %35 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %36 = arith.cmpi ule, %30, %c4294967295_i256 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %36 {
// CHECK-NEXT:       llvm.store %30, %35 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %37 = llvm.load %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %38 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %39 = arith.cmpi ule, %34, %c4294967295_i256_13 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %39 {
// CHECK-NEXT:       llvm.store %34, %38 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %40 = llvm.load %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %41 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc60)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc60)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc60)
// CHECK-NEXT:     %42 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %42 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %43 = arith.cmpi ule, %41, %c4294967295_i256_15 : i256 loc(#loc60)
// CHECK-NEXT:     scf.if %43 {
// CHECK-NEXT:       llvm.store %41, %42 : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     %44 = llvm.load %42 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc60)
// CHECK-NEXT:     %45 = arith.shli %37, %c64_i256_17 : i256 loc(#loc60)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc60)
// CHECK-NEXT:     %46 = arith.shli %40, %c96_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc60)
// CHECK-NEXT:     %47 = arith.shli %44, %c192_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %48 = arith.addi %45, %46 : i256 loc(#loc60)
// CHECK-NEXT:     %49 = arith.addi %48, %47 : i256 loc(#loc60)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc60)
// CHECK-NEXT:     %50 = arith.addi %49, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc60)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc60)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc60)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %54 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %55 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %56 = llvm.mlir.undef : i256 loc(#loc60)
// CHECK-NEXT:     %57:2 = call @__farcall(%50, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %26, %27, %51, %52, %53, %54, %55, %56) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc60)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc60)
// CHECK-NEXT:     %58 = arith.cmpi eq, %57#1, %false_18 : i1 loc(#loc60)
// CHECK-NEXT:     scf.if %58 {
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc60)
// CHECK-NEXT:       %c0_i256_20 = arith.constant 0 : i256 loc(#loc60)
// CHECK-NEXT:       %c0_i256_21 = arith.constant 0 : i256 loc(#loc60)
// CHECK-NEXT:       func.call @__revert(%c0_i256_19, %c0_i256_20, %c0_i256_21) : (i256, i256, i256) -> () loc(#loc60)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc60)
// CHECK-NEXT:     } loc(#loc60)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @_burn_424(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc23)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc24)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc24)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc24)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc26)
// CHECK-NEXT:     %3 = arith.extui %c0_i8 : i8 to i256 loc(#loc26)
// CHECK-NEXT:     %4 = arith.cmpi ne, %2, %3 : i256 loc(#loc25)
// CHECK-NEXT:     %false = arith.constant false loc(#loc27)
// CHECK-NEXT:     %5 = arith.cmpi eq, %4, %false : i1 loc(#loc27)
// CHECK-NEXT:     scf.if %5 {
// CHECK-NEXT:       %c64_i256_21 = arith.constant 64 : i256 loc(#loc27)
// CHECK-NEXT:       %65 = llvm.inttoptr %c64_i256_21 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %66 = llvm.load %65 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc27)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc27)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc27)
// CHECK-NEXT:       %68 = arith.addi %66, %c4_i256 : i256 loc(#loc27)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %69 = llvm.inttoptr %68 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c32_i256_22, %69 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %70 = arith.addi %68, %c32_i256_22 : i256 loc(#loc27)
// CHECK-NEXT:       %c33_i256 = arith.constant 33 : i256 loc(#loc27)
// CHECK-NEXT:       %71 = llvm.inttoptr %70 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c33_i256, %71 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c32_i256_23 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %72 = arith.addi %70, %c32_i256_23 : i256 loc(#loc27)
// CHECK-NEXT:       %c31354931781638678494316026001340845558170976982936511063842609339963588896115_i256 = arith.constant 31354931781638678494316026001340845558170976982936511063842609339963588896115 : i256 loc(#loc27)
// CHECK-NEXT:       %73 = llvm.inttoptr %72 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c31354931781638678494316026001340845558170976982936511063842609339963588896115_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %c32_i256_24 = arith.constant 32 : i256 loc(#loc27)
// CHECK-NEXT:       %74 = arith.addi %72, %c32_i256_24 : i256 loc(#loc27)
// CHECK-NEXT:       %c52015977587075634662932278421871521105961125924018222127100086566054726205440_i256 = arith.constant 52015977587075634662932278421871521105961125924018222127100086566054726205440 : i256 loc(#loc27)
// CHECK-NEXT:       %75 = llvm.inttoptr %74 : i256 to !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       llvm.store %c52015977587075634662932278421871521105961125924018222127100086566054726205440_i256, %75 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc27)
// CHECK-NEXT:       %76 = arith.subi %70, %66 : i256 loc(#loc27)
// CHECK-NEXT:       %c0_i256_25 = arith.constant 0 : i256 loc(#loc27)
// CHECK-NEXT:       func.call @__revert(%66, %76, %c0_i256_25) : (i256, i256, i256) -> () loc(#loc27)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc27)
// CHECK-NEXT:     } loc(#loc27)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc28)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc31)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc31)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     llvm.store %c0_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc31)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc31)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc31)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false_3) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc31)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc31)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc31)
// CHECK-NEXT:     llvm.store %13, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %14 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %15 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %16 = arith.cmpi uge, %14, %15 : i256 loc(#loc32)
// CHECK-NEXT:     %false_4 = arith.constant false loc(#loc34)
// CHECK-NEXT:     %17 = arith.cmpi eq, %16, %false_4 : i1 loc(#loc34)
// CHECK-NEXT:     scf.if %17 {
// CHECK-NEXT:       %c64_i256_21 = arith.constant 64 : i256 loc(#loc34)
// CHECK-NEXT:       %65 = llvm.inttoptr %c64_i256_21 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %66 = llvm.load %65 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc34)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc34)
// CHECK-NEXT:       %67 = llvm.inttoptr %66 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %67 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc34)
// CHECK-NEXT:       %68 = arith.addi %66, %c4_i256 : i256 loc(#loc34)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %69 = llvm.inttoptr %68 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c32_i256_22, %69 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %70 = arith.addi %68, %c32_i256_22 : i256 loc(#loc34)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc34)
// CHECK-NEXT:       %71 = llvm.inttoptr %70 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c34_i256, %71 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c32_i256_23 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %72 = arith.addi %70, %c32_i256_23 : i256 loc(#loc34)
// CHECK-NEXT:       %c31354931781638678494316026001312189103416802390932084224065329695412615668078_i256 = arith.constant 31354931781638678494316026001312189103416802390932084224065329695412615668078 : i256 loc(#loc34)
// CHECK-NEXT:       %73 = llvm.inttoptr %72 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c31354931781638678494316026001312189103416802390932084224065329695412615668078_i256, %73 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %c32_i256_24 = arith.constant 32 : i256 loc(#loc34)
// CHECK-NEXT:       %74 = arith.addi %72, %c32_i256_24 : i256 loc(#loc34)
// CHECK-NEXT:       %c44957423563285989266247004906403561635230327756000124389404269791890710200320_i256 = arith.constant 44957423563285989266247004906403561635230327756000124389404269791890710200320 : i256 loc(#loc34)
// CHECK-NEXT:       %75 = llvm.inttoptr %74 : i256 to !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       llvm.store %c44957423563285989266247004906403561635230327756000124389404269791890710200320_i256, %75 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc34)
// CHECK-NEXT:       %76 = arith.subi %70, %66 : i256 loc(#loc34)
// CHECK-NEXT:       %c0_i256_25 = arith.constant 0 : i256 loc(#loc34)
// CHECK-NEXT:       func.call @__revert(%66, %76, %c0_i256_25) : (i256, i256, i256) -> () loc(#loc34)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc34)
// CHECK-NEXT:     } loc(#loc34)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %18 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc36)
// CHECK-NEXT:     %19 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256 loc(#loc36)
// CHECK-NEXT:     %20 = llvm.inttoptr %c32_i256_7 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     llvm.store %c0_i256_5, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc36)
// CHECK-NEXT:     %21 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc36)
// CHECK-NEXT:     %false_9 = arith.constant false loc(#loc36)
// CHECK-NEXT:     %22 = call @__sha3(%21, %c64_i256_8, %false_9) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc36)
// CHECK-NEXT:     %23 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc38)
// CHECK-NEXT:     %25 = arith.subi %23, %24 : i256 loc(#loc37)
// CHECK-NEXT:     %26 = llvm.inttoptr %22 : i256 to !llvm.ptr<5> loc(#loc36)
// CHECK-NEXT:     llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc36)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %27 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc40)
// CHECK-NEXT:     %c2_i256_10 = arith.constant 2 : i256 loc(#loc39)
// CHECK-NEXT:     %28 = llvm.inttoptr %c2_i256_10 : i256 to !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     %29 = llvm.load %28 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc41)
// CHECK-NEXT:     %30 = arith.subi %29, %27 : i256 loc(#loc41)
// CHECK-NEXT:     %31 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     llvm.store %30, %31 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc41)
// CHECK-NEXT:     %32 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc42)
// CHECK-NEXT:     %c0_i8_11 = arith.constant 0 : i8 loc(#loc43)
// CHECK-NEXT:     %33 = arith.extui %c0_i8_11 : i8 to i256 loc(#loc43)
// CHECK-NEXT:     %34 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256 = arith.constant -15402802100530019096323380498944738953123845089667699673314898783681816316945 : i256 loc(#loc45)
// CHECK-NEXT:     %c64_i256_12 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %35 = llvm.inttoptr %c64_i256_12 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %36 = llvm.load %35 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc45)
// CHECK-NEXT:     %c32_i256_13 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %37 = arith.addi %36, %c32_i256_13 : i256 loc(#loc45)
// CHECK-NEXT:     %38 = llvm.inttoptr %36 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     llvm.store %34, %38 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %c32_i256_14 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %39 = arith.addi %36, %c32_i256_14 : i256 loc(#loc45)
// CHECK-NEXT:     %40 = arith.subi %37, %36 : i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %41 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %41 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %42 = arith.cmpi ule, %36, %c4294967295_i256 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %42 {
// CHECK-NEXT:       llvm.store %36, %41 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %43 = llvm.load %41 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %44 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %45 = arith.cmpi ule, %40, %c4294967295_i256_15 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       llvm.store %40, %44 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %46 = llvm.load %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %47 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_17 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_18 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %48 = llvm.alloca %c1_i64_18 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_17, %48 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %49 = arith.cmpi ule, %47, %c4294967295_i256_17 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %49 {
// CHECK-NEXT:       llvm.store %47, %48 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %50 = llvm.load %48 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c64_i256_19 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %51 = arith.shli %43, %c64_i256_19 : i256 loc(#loc45)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc45)
// CHECK-NEXT:     %52 = arith.shli %46, %c96_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc45)
// CHECK-NEXT:     %53 = arith.shli %50, %c192_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %54 = arith.addi %51, %52 : i256 loc(#loc45)
// CHECK-NEXT:     %55 = arith.addi %54, %53 : i256 loc(#loc45)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc45)
// CHECK-NEXT:     %56 = arith.addi %55, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc45)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc45)
// CHECK-NEXT:     %57 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %58 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %59 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %60 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %61 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %62 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %63:2 = call @__farcall(%56, %c32781_i256, %c3_i256, %c-15402802100530019096323380498944738953123845089667699673314898783681816316945_i256, %32, %33, %57, %58, %59, %60, %61, %62) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc45)
// CHECK-NEXT:     %false_20 = arith.constant false loc(#loc45)
// CHECK-NEXT:     %64 = arith.cmpi eq, %63#1, %false_20 : i1 loc(#loc45)
// CHECK-NEXT:     scf.if %64 {
// CHECK-NEXT:       %c0_i256_21 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_22 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_23 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       func.call @__revert(%c0_i256_21, %c0_i256_22, %c0_i256_23) : (i256, i256, i256) -> () loc(#loc45)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     return loc(#loc22)
// CHECK-NEXT:   } loc(#loc22)
// CHECK-NEXT:   func.func @_approve_469(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown), %arg2: i256 loc(unknown)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc6)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc8)
// CHECK-NEXT:     %4 = arith.extui %c0_i8 : i8 to i256 loc(#loc8)
// CHECK-NEXT:     %5 = arith.cmpi ne, %3, %4 : i256 loc(#loc7)
// CHECK-NEXT:     %false = arith.constant false loc(#loc9)
// CHECK-NEXT:     %6 = arith.cmpi eq, %5, %false : i1 loc(#loc9)
// CHECK-NEXT:     scf.if %6 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:       %56 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %57 = llvm.load %56 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc9)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc9)
// CHECK-NEXT:       %58 = llvm.inttoptr %57 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %58 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc9)
// CHECK-NEXT:       %59 = arith.addi %57, %c4_i256 : i256 loc(#loc9)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %60 = llvm.inttoptr %59 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c32_i256_20, %60 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %61 = arith.addi %59, %c32_i256_20 : i256 loc(#loc9)
// CHECK-NEXT:       %c36_i256 = arith.constant 36 : i256 loc(#loc9)
// CHECK-NEXT:       %62 = llvm.inttoptr %61 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c36_i256, %62 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %63 = arith.addi %61, %c32_i256_21 : i256 loc(#loc9)
// CHECK-NEXT:       %c31354931781638678487916134672869638484047149969764982831501014746446650500196_i256 = arith.constant 31354931781638678487916134672869638484047149969764982831501014746446650500196 : i256 loc(#loc9)
// CHECK-NEXT:       %64 = llvm.inttoptr %63 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c31354931781638678487916134672869638484047149969764982831501014746446650500196_i256, %64 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:       %65 = arith.addi %63, %c32_i256_22 : i256 loc(#loc9)
// CHECK-NEXT:       %c51742913093258732729005998692887265601192425265805909375210916622055285719040_i256 = arith.constant 51742913093258732729005998692887265601192425265805909375210916622055285719040 : i256 loc(#loc9)
// CHECK-NEXT:       %66 = llvm.inttoptr %65 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       llvm.store %c51742913093258732729005998692887265601192425265805909375210916622055285719040_i256, %66 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:       %67 = arith.subi %61, %57 : i256 loc(#loc9)
// CHECK-NEXT:       %c0_i256_23 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:       func.call @__revert(%57, %67, %c0_i256_23) : (i256, i256, i256) -> () loc(#loc9)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc9)
// CHECK-NEXT:     } loc(#loc9)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c0_i8_2 = arith.constant 0 : i8 loc(#loc11)
// CHECK-NEXT:     %8 = arith.extui %c0_i8_2 : i8 to i256 loc(#loc11)
// CHECK-NEXT:     %9 = arith.cmpi ne, %7, %8 : i256 loc(#loc10)
// CHECK-NEXT:     %false_3 = arith.constant false loc(#loc12)
// CHECK-NEXT:     %10 = arith.cmpi eq, %9, %false_3 : i1 loc(#loc12)
// CHECK-NEXT:     scf.if %10 {
// CHECK-NEXT:       %c64_i256_19 = arith.constant 64 : i256 loc(#loc12)
// CHECK-NEXT:       %56 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %57 = llvm.load %56 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc12)
// CHECK-NEXT:       %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256 = arith.constant 3963877391197344453575983046348115674221700746820753546331534351508065746944 : i256 loc(#loc12)
// CHECK-NEXT:       %58 = llvm.inttoptr %57 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c3963877391197344453575983046348115674221700746820753546331534351508065746944_i256, %58 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc12)
// CHECK-NEXT:       %59 = arith.addi %57, %c4_i256 : i256 loc(#loc12)
// CHECK-NEXT:       %c32_i256_20 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %60 = llvm.inttoptr %59 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c32_i256_20, %60 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %61 = arith.addi %59, %c32_i256_20 : i256 loc(#loc12)
// CHECK-NEXT:       %c34_i256 = arith.constant 34 : i256 loc(#loc12)
// CHECK-NEXT:       %62 = llvm.inttoptr %61 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c34_i256, %62 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c32_i256_21 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %63 = arith.addi %61, %c32_i256_21 : i256 loc(#loc12)
// CHECK-NEXT:       %c31354931781638678487916134672869638488806705378895508030211234510262059168357_i256 = arith.constant 31354931781638678487916134672869638488806705378895508030211234510262059168357 : i256 loc(#loc12)
// CHECK-NEXT:       %64 = llvm.inttoptr %63 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c31354931781638678487916134672869638488806705378895508030211234510262059168357_i256, %64 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %c32_i256_22 = arith.constant 32 : i256 loc(#loc12)
// CHECK-NEXT:       %65 = arith.addi %63, %c32_i256_22 : i256 loc(#loc12)
// CHECK-NEXT:       %c52219164999525148860834357634456956735281286572158918307284071279203377479680_i256 = arith.constant 52219164999525148860834357634456956735281286572158918307284071279203377479680 : i256 loc(#loc12)
// CHECK-NEXT:       %66 = llvm.inttoptr %65 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       llvm.store %c52219164999525148860834357634456956735281286572158918307284071279203377479680_i256, %66 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:       %67 = arith.subi %61, %57 : i256 loc(#loc12)
// CHECK-NEXT:       %c0_i256_23 = arith.constant 0 : i256 loc(#loc12)
// CHECK-NEXT:       func.call @__revert(%57, %67, %c0_i256_23) : (i256, i256, i256) -> () loc(#loc12)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc12)
// CHECK-NEXT:     } loc(#loc12)
// CHECK-NEXT:     %c1_i256_4 = arith.constant 1 : i256 loc(#loc13)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %c1_i256_4, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc15)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc16)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %17 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %16, %17 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c32_i256_7 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %18 = llvm.inttoptr %c32_i256_7 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %15, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %19 = llvm.inttoptr %c0_i256_6 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %false_9 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %20 = call @__sha3(%19, %c64_i256_8, %false_9) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc15)
// CHECK-NEXT:     %21 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %22 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc15)
// CHECK-NEXT:     llvm.store %21, %22 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc15)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %25 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc20)
// CHECK-NEXT:     %c-52305948261162578668367882225327028569797882979485679342215860919519743330011_i256 = arith.constant -52305948261162578668367882225327028569797882979485679342215860919519743330011 : i256 loc(#loc21)
// CHECK-NEXT:     %c64_i256_10 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %26 = llvm.inttoptr %c64_i256_10 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc21)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %28 = arith.addi %27, %c32_i256_11 : i256 loc(#loc21)
// CHECK-NEXT:     %29 = llvm.inttoptr %27 : i256 to !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     llvm.store %25, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc21)
// CHECK-NEXT:     %c32_i256_12 = arith.constant 32 : i256 loc(#loc21)
// CHECK-NEXT:     %30 = arith.addi %27, %c32_i256_12 : i256 loc(#loc21)
// CHECK-NEXT:     %31 = arith.subi %28, %27 : i256 loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %32 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %33 = arith.cmpi ule, %27, %c4294967295_i256 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %33 {
// CHECK-NEXT:       llvm.store %27, %32 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %34 = llvm.load %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %35 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %36 = arith.cmpi ule, %31, %c4294967295_i256_13 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %36 {
// CHECK-NEXT:       llvm.store %31, %35 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %37 = llvm.load %35 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %38 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc21)
// CHECK-NEXT:     %c4294967295_i256_15 = arith.constant 4294967295 : i256 loc(#loc21)
// CHECK-NEXT:     %c1_i64_16 = arith.constant 1 : i64 loc(#loc21)
// CHECK-NEXT:     %39 = llvm.alloca %c1_i64_16 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     llvm.store %c4294967295_i256_15, %39 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %40 = arith.cmpi ule, %38, %c4294967295_i256_15 : i256 loc(#loc21)
// CHECK-NEXT:     scf.if %40 {
// CHECK-NEXT:       llvm.store %38, %39 : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     %41 = llvm.load %39 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc21)
// CHECK-NEXT:     %42 = arith.shli %34, %c64_i256_17 : i256 loc(#loc21)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc21)
// CHECK-NEXT:     %43 = arith.shli %37, %c96_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc21)
// CHECK-NEXT:     %44 = arith.shli %41, %c192_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %45 = arith.addi %42, %43 : i256 loc(#loc21)
// CHECK-NEXT:     %46 = arith.addi %45, %44 : i256 loc(#loc21)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc21)
// CHECK-NEXT:     %47 = arith.addi %46, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc21)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc21)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc21)
// CHECK-NEXT:     %48 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc21)
// CHECK-NEXT:     %54:2 = call @__farcall(%47, %c32781_i256, %c3_i256, %c-52305948261162578668367882225327028569797882979485679342215860919519743330011_i256, %23, %24, %48, %49, %50, %51, %52, %53) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc21)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc21)
// CHECK-NEXT:     %55 = arith.cmpi eq, %54#1, %false_18 : i1 loc(#loc21)
// CHECK-NEXT:     scf.if %55 {
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c0_i256_20 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       %c0_i256_21 = arith.constant 0 : i256 loc(#loc21)
// CHECK-NEXT:       func.call @__revert(%c0_i256_19, %c0_i256_20, %c0_i256_21) : (i256, i256, i256) -> () loc(#loc21)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc21)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func @_49(%arg0: i256 loc(unknown), %arg1: i256 loc(unknown)) attributes {ctor, llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #NonPayable} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc184)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc184)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc184)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc185)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc185)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc185)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc186)
// CHECK-NEXT:     %3 = llvm.inttoptr %2 : i256 to !llvm.ptr<1> loc(#loc187)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc187)
// CHECK-NEXT:     %5 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc187)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc187)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc187)
// CHECK-NEXT:     %6 = arith.addi %2, %c32_i256 : i256 loc(#loc187)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc187)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc187)
// CHECK-NEXT:     llvm.store %c3_i256, %7 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc187)
// CHECK-NEXT:     %c32_i256_1 = arith.constant 32 : i256 loc(#loc187)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc187)
// CHECK-NEXT:     %false = arith.constant false loc(#loc187)
// CHECK-NEXT:     %9 = call @__sha3(%8, %c32_i256_1, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc187)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc187)
// CHECK-NEXT:     %10 = arith.addi %4, %c31_i256 : i256 loc(#loc187)
// CHECK-NEXT:     %c-32_i256 = arith.constant -32 : i256 loc(#loc187)
// CHECK-NEXT:     %11 = arith.andi %10, %c-32_i256 : i256 loc(#loc187)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc187)
// CHECK-NEXT:     %12 = arith.index_castui %11 : i256 to index loc(#loc187)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc187)
// CHECK-NEXT:     scf.for %arg2 = %c0 to %12 step %c1 {
// CHECK-NEXT:       %24 = arith.index_castui %arg2 : index to i256 loc(#loc187)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc187)
// CHECK-NEXT:       %25 = arith.muli %24, %c32_i256_10 : i256 loc(#loc187)
// CHECK-NEXT:       %26 = arith.addi %6, %25 : i256 loc(#loc187)
// CHECK-NEXT:       %27 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc187)
// CHECK-NEXT:       %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc187)
// CHECK-NEXT:       %29 = arith.addi %9, %24 : i256 loc(#loc187)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<5> loc(#loc187)
// CHECK-NEXT:       llvm.store %28, %30 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc187)
// CHECK-NEXT:     } loc(#loc187)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc176)
// CHECK-NEXT:     %13 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc188)
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<1> loc(#loc189)
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc189)
// CHECK-NEXT:     %16 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<5> loc(#loc189)
// CHECK-NEXT:     llvm.store %15, %16 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc189)
// CHECK-NEXT:     %c32_i256_2 = arith.constant 32 : i256 loc(#loc189)
// CHECK-NEXT:     %17 = arith.addi %13, %c32_i256_2 : i256 loc(#loc189)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc189)
// CHECK-NEXT:     %18 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc189)
// CHECK-NEXT:     llvm.store %c4_i256, %18 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc189)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc189)
// CHECK-NEXT:     %19 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc189)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc189)
// CHECK-NEXT:     %20 = call @__sha3(%19, %c32_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc189)
// CHECK-NEXT:     %c31_i256_6 = arith.constant 31 : i256 loc(#loc189)
// CHECK-NEXT:     %21 = arith.addi %15, %c31_i256_6 : i256 loc(#loc189)
// CHECK-NEXT:     %c-32_i256_7 = arith.constant -32 : i256 loc(#loc189)
// CHECK-NEXT:     %22 = arith.andi %21, %c-32_i256_7 : i256 loc(#loc189)
// CHECK-NEXT:     %c0_8 = arith.constant 0 : index loc(#loc189)
// CHECK-NEXT:     %23 = arith.index_castui %22 : i256 to index loc(#loc189)
// CHECK-NEXT:     %c1_9 = arith.constant 1 : index loc(#loc189)
// CHECK-NEXT:     scf.for %arg2 = %c0_8 to %23 step %c1_9 {
// CHECK-NEXT:       %24 = arith.index_castui %arg2 : index to i256 loc(#loc189)
// CHECK-NEXT:       %c32_i256_10 = arith.constant 32 : i256 loc(#loc189)
// CHECK-NEXT:       %25 = arith.muli %24, %c32_i256_10 : i256 loc(#loc189)
// CHECK-NEXT:       %26 = arith.addi %17, %25 : i256 loc(#loc189)
// CHECK-NEXT:       %27 = llvm.inttoptr %26 : i256 to !llvm.ptr<1> loc(#loc189)
// CHECK-NEXT:       %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc189)
// CHECK-NEXT:       %29 = arith.addi %20, %24 : i256 loc(#loc189)
// CHECK-NEXT:       %30 = llvm.inttoptr %29 : i256 to !llvm.ptr<5> loc(#loc189)
// CHECK-NEXT:       llvm.store %28, %30 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc189)
// CHECK-NEXT:     } loc(#loc189)
// CHECK-NEXT:     return loc(#loc183)
// CHECK-NEXT:   } loc(#loc183)
// CHECK-NEXT:   func.func private @__personality() -> i32 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc1 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:142:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:142:20)
// CHECK-NEXT: #loc5 = loc({{.*}}:142:35)
// CHECK-NEXT: #loc6 = loc({{.*}}:142:52)
// CHECK-NEXT: #loc7 = loc({{.*}}:145:14)
// CHECK-NEXT: #loc8 = loc({{.*}}:145:31)
// CHECK-NEXT: #loc9 = loc({{.*}}:145:6)
// CHECK-NEXT: #loc10 = loc({{.*}}:146:14)
// CHECK-NEXT: #loc11 = loc({{.*}}:146:33)
// CHECK-NEXT: #loc12 = loc({{.*}}:146:6)
// CHECK-NEXT: #loc13 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc14 = loc({{.*}}:149:16)
// CHECK-NEXT: #loc15 = loc({{.*}}:149:4)
// CHECK-NEXT: #loc16 = loc({{.*}}:149:23)
// CHECK-NEXT: #loc17 = loc({{.*}}:149:34)
// CHECK-NEXT: #loc18 = loc({{.*}}:150:18)
// CHECK-NEXT: #loc19 = loc({{.*}}:150:25)
// CHECK-NEXT: #loc20 = loc({{.*}}:150:34)
// CHECK-NEXT: #loc21 = loc({{.*}}:150:9)
// CHECK-NEXT: #loc22 = loc({{.*}}:124:2)
// CHECK-NEXT: #loc23 = loc({{.*}}:124:17)
// CHECK-NEXT: #loc24 = loc({{.*}}:124:34)
// CHECK-NEXT: #loc25 = loc({{.*}}:127:14)
// CHECK-NEXT: #loc26 = loc({{.*}}:127:33)
// CHECK-NEXT: #loc27 = loc({{.*}}:127:6)
// CHECK-NEXT: #loc28 = loc({{.*}}:130:4)
// CHECK-NEXT: #loc29 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc30 = loc({{.*}}:130:39)
// CHECK-NEXT: #loc31 = loc({{.*}}:130:29)
// CHECK-NEXT: #loc32 = loc({{.*}}:133:14)
// CHECK-NEXT: #loc33 = loc({{.*}}:133:32)
// CHECK-NEXT: #loc34 = loc({{.*}}:133:6)
// CHECK-NEXT: #loc35 = loc({{.*}}:135:16)
// CHECK-NEXT: #loc36 = loc({{.*}}:135:6)
// CHECK-NEXT: #loc37 = loc({{.*}}:135:27)
// CHECK-NEXT: #loc38 = loc({{.*}}:135:44)
// CHECK-NEXT: #loc39 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc40 = loc({{.*}}:136:22)
// CHECK-NEXT: #loc41 = loc({{.*}}:136:6)
// CHECK-NEXT: #loc42 = loc({{.*}}:139:18)
// CHECK-NEXT: #loc43 = loc({{.*}}:139:35)
// CHECK-NEXT: #loc44 = loc({{.*}}:139:39)
// CHECK-NEXT: #loc45 = loc({{.*}}:139:9)
// CHECK-NEXT: #loc46 = loc({{.*}}:114:2)
// CHECK-NEXT: #loc47 = loc({{.*}}:114:17)
// CHECK-NEXT: #loc48 = loc({{.*}}:114:34)
// CHECK-NEXT: #loc49 = loc({{.*}}:117:14)
// CHECK-NEXT: #loc50 = loc({{.*}}:117:33)
// CHECK-NEXT: #loc51 = loc({{.*}}:117:6)
// CHECK-NEXT: #loc52 = loc({{.*}}:118:22)
// CHECK-NEXT: #loc53 = loc({{.*}}:118:6)
// CHECK-NEXT: #loc54 = loc({{.*}}:119:16)
// CHECK-NEXT: #loc55 = loc({{.*}}:119:6)
// CHECK-NEXT: #loc56 = loc({{.*}}:119:28)
// CHECK-NEXT: #loc57 = loc({{.*}}:121:26)
// CHECK-NEXT: #loc58 = loc({{.*}}:121:30)
// CHECK-NEXT: #loc59 = loc({{.*}}:121:39)
// CHECK-NEXT: #loc60 = loc({{.*}}:121:9)
// CHECK-NEXT: #loc61 = loc({{.*}}:96:2)
// CHECK-NEXT: #loc62 = loc({{.*}}:96:21)
// CHECK-NEXT: #loc63 = loc({{.*}}:96:37)
// CHECK-NEXT: #loc64 = loc({{.*}}:96:56)
// CHECK-NEXT: #loc65 = loc({{.*}}:99:14)
// CHECK-NEXT: #loc66 = loc({{.*}}:99:32)
// CHECK-NEXT: #loc67 = loc({{.*}}:99:6)
// CHECK-NEXT: #loc68 = loc({{.*}}:100:14)
// CHECK-NEXT: #loc69 = loc({{.*}}:100:35)
// CHECK-NEXT: #loc70 = loc({{.*}}:100:6)
// CHECK-NEXT: #loc71 = loc({{.*}}:103:4)
// CHECK-NEXT: #loc72 = loc({{.*}}:103:38)
// CHECK-NEXT: #loc73 = loc({{.*}}:103:28)
// CHECK-NEXT: #loc74 = loc({{.*}}:106:14)
// CHECK-NEXT: #loc75 = loc({{.*}}:106:31)
// CHECK-NEXT: #loc76 = loc({{.*}}:106:6)
// CHECK-NEXT: #loc77 = loc({{.*}}:108:16)
// CHECK-NEXT: #loc78 = loc({{.*}}:108:6)
// CHECK-NEXT: #loc79 = loc({{.*}}:108:26)
// CHECK-NEXT: #loc80 = loc({{.*}}:108:42)
// CHECK-NEXT: #loc81 = loc({{.*}}:109:16)
// CHECK-NEXT: #loc82 = loc({{.*}}:109:6)
// CHECK-NEXT: #loc83 = loc({{.*}}:109:30)
// CHECK-NEXT: #loc84 = loc({{.*}}:111:18)
// CHECK-NEXT: #loc85 = loc({{.*}}:111:26)
// CHECK-NEXT: #loc86 = loc({{.*}}:111:37)
// CHECK-NEXT: #loc87 = loc({{.*}}:111:9)
// CHECK-NEXT: #loc88 = loc({{.*}}:83:2)
// CHECK-NEXT: #loc89 = loc({{.*}}:83:29)
// CHECK-NEXT: #loc90 = loc({{.*}}:83:46)
// CHECK-NEXT: #loc91 = loc({{.*}}:85:4)
// CHECK-NEXT: #loc92 = loc({{.*}}:85:43)
// CHECK-NEXT: #loc93 = loc({{.*}}:85:31)
// CHECK-NEXT: #loc94 = loc({{.*}}:85:57)
// CHECK-NEXT: #loc95 = loc({{.*}}:88:14)
// CHECK-NEXT: #loc96 = loc({{.*}}:88:34)
// CHECK-NEXT: #loc97 = loc({{.*}}:88:6)
// CHECK-NEXT: #loc98 = loc({{.*}}:90:15)
// CHECK-NEXT: #loc99 = loc({{.*}}:90:29)
// CHECK-NEXT: #loc100 = loc({{.*}}:90:38)
// CHECK-NEXT: #loc101 = loc({{.*}}:90:57)
// CHECK-NEXT: #loc102 = loc({{.*}}:90:6)
// CHECK-NEXT: #loc103 = loc({{.*}}:93:11)
// CHECK-NEXT: #loc104 = loc({{.*}}:93:4)
// CHECK-NEXT: #loc105 = loc({{.*}}:74:2)
// CHECK-NEXT: #loc106 = loc({{.*}}:74:29)
// CHECK-NEXT: #loc107 = loc({{.*}}:74:46)
// CHECK-NEXT: #loc108 = loc({{.*}}:78:13)
// CHECK-NEXT: #loc109 = loc({{.*}}:78:27)
// CHECK-NEXT: #loc110 = loc({{.*}}:78:48)
// CHECK-NEXT: #loc111 = loc({{.*}}:78:36)
// CHECK-NEXT: #loc112 = loc({{.*}}:78:62)
// CHECK-NEXT: #loc113 = loc({{.*}}:78:73)
// CHECK-NEXT: #loc114 = loc({{.*}}:78:4)
// CHECK-NEXT: #loc115 = loc({{.*}}:80:11)
// CHECK-NEXT: #loc116 = loc({{.*}}:80:4)
// CHECK-NEXT: #loc117 = loc({{.*}}:59:2)
// CHECK-NEXT: #loc118 = loc({{.*}}:59:24)
// CHECK-NEXT: #loc119 = loc({{.*}}:59:40)
// CHECK-NEXT: #loc120 = loc({{.*}}:59:59)
// CHECK-NEXT: #loc121 = loc({{.*}}:61:14)
// CHECK-NEXT: #loc122 = loc({{.*}}:61:22)
// CHECK-NEXT: #loc123 = loc({{.*}}:61:33)
// CHECK-NEXT: #loc124 = loc({{.*}}:61:4)
// CHECK-NEXT: #loc125 = loc({{.*}}:63:4)
// CHECK-NEXT: #loc126 = loc({{.*}}:63:43)
// CHECK-NEXT: #loc127 = loc({{.*}}:63:31)
// CHECK-NEXT: #loc128 = loc({{.*}}:63:51)
// CHECK-NEXT: #loc129 = loc({{.*}}:66:14)
// CHECK-NEXT: #loc130 = loc({{.*}}:66:34)
// CHECK-NEXT: #loc131 = loc({{.*}}:66:6)
// CHECK-NEXT: #loc132 = loc({{.*}}:68:15)
// CHECK-NEXT: #loc133 = loc({{.*}}:68:23)
// CHECK-NEXT: #loc134 = loc({{.*}}:68:37)
// CHECK-NEXT: #loc135 = loc({{.*}}:68:56)
// CHECK-NEXT: #loc136 = loc({{.*}}:68:6)
// CHECK-NEXT: #loc137 = loc({{.*}}:71:11)
// CHECK-NEXT: #loc138 = loc({{.*}}:71:4)
// CHECK-NEXT: #loc139 = loc({{.*}}:54:2)
// CHECK-NEXT: #loc140 = loc({{.*}}:54:19)
// CHECK-NEXT: #loc141 = loc({{.*}}:54:36)
// CHECK-NEXT: #loc142 = loc({{.*}}:55:13)
// CHECK-NEXT: #loc143 = loc({{.*}}:55:27)
// CHECK-NEXT: #loc144 = loc({{.*}}:55:36)
// CHECK-NEXT: #loc145 = loc({{.*}}:55:4)
// CHECK-NEXT: #loc146 = loc({{.*}}:56:11)
// CHECK-NEXT: #loc147 = loc({{.*}}:56:4)
// CHECK-NEXT: #loc148 = loc({{.*}}:50:2)
// CHECK-NEXT: #loc149 = loc({{.*}}:50:21)
// CHECK-NEXT: #loc150 = loc({{.*}}:50:36)
// CHECK-NEXT: #loc151 = loc({{.*}}:51:23)
// CHECK-NEXT: #loc152 = loc({{.*}}:51:11)
// CHECK-NEXT: #loc153 = loc({{.*}}:51:30)
// CHECK-NEXT: #loc154 = loc({{.*}}:51:4)
// CHECK-NEXT: #loc155 = loc({{.*}}:45:2)
// CHECK-NEXT: #loc156 = loc({{.*}}:45:20)
// CHECK-NEXT: #loc157 = loc({{.*}}:45:39)
// CHECK-NEXT: #loc158 = loc({{.*}}:46:14)
// CHECK-NEXT: #loc159 = loc({{.*}}:46:28)
// CHECK-NEXT: #loc160 = loc({{.*}}:46:39)
// CHECK-NEXT: #loc161 = loc({{.*}}:46:4)
// CHECK-NEXT: #loc162 = loc({{.*}}:47:11)
// CHECK-NEXT: #loc163 = loc({{.*}}:47:4)
// CHECK-NEXT: #loc164 = loc({{.*}}:41:2)
// CHECK-NEXT: #loc165 = loc({{.*}}:41:21)
// CHECK-NEXT: #loc166 = loc({{.*}}:42:21)
// CHECK-NEXT: #loc167 = loc({{.*}}:42:11)
// CHECK-NEXT: #loc168 = loc({{.*}}:42:4)
// CHECK-NEXT: #loc169 = loc({{.*}}:37:2)
// CHECK-NEXT: #loc170 = loc({{.*}}:38:11)
// CHECK-NEXT: #loc171 = loc({{.*}}:38:4)
// CHECK-NEXT: #loc172 = loc({{.*}}:33:2)
// CHECK-NEXT: #loc173 = loc({{.*}}:34:11)
// CHECK-NEXT: #loc174 = loc({{.*}}:34:4)
// CHECK-NEXT: #loc175 = loc({{.*}}:29:2)
// CHECK-NEXT: #loc176 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc177 = loc({{.*}}:30:4)
// CHECK-NEXT: #loc178 = loc({{.*}}:25:2)
// CHECK-NEXT: #loc179 = loc({{.*}}:26:4)
// CHECK-NEXT: #loc180 = loc({{.*}}:21:2)
// CHECK-NEXT: #loc181 = loc({{.*}}:22:11)
// CHECK-NEXT: #loc182 = loc({{.*}}:22:4)
// CHECK-NEXT: #loc183 = loc({{.*}}:16:2)
// CHECK-NEXT: #loc184 = loc({{.*}}:16:14)
// CHECK-NEXT: #loc185 = loc({{.*}}:16:35)
// CHECK-NEXT: #loc186 = loc({{.*}}:17:12)
// CHECK-NEXT: #loc187 = loc({{.*}}:17:4)
// CHECK-NEXT: #loc188 = loc({{.*}}:18:14)
// CHECK-NEXT: #loc189 = loc({{.*}}:18:4)
// CHECK-EMPTY:
