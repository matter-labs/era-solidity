// RUN: solc --strict-assembly --mlir-action=print-std-mlir --mlir-target=evm --mmlir --mlir-print-debuginfo %s | FileCheck %s

object "Test" {
  code {
    log0(100, 5)
    log1(100, 5, 10)
    log2(100, 5, 10, 11)
    log3(100, 5, 10, 11, 12)
    log4(100, 5, 10, 11, 12, 13)
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   func.func private @__entry() attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"]} {
// CHECK-NEXT:     %c100_i256 = arith.constant 100 : i256 loc(#loc1)
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c100_i256 : i256 to !llvm.ptr<1> loc(#loc3)
// CHECK-NEXT:     "llvm.intrcall"(%0, %c5_i256) <{id = 3234 : i32, name = "evm.log0"}> : (!llvm.ptr<1>, i256) -> () loc(#loc3)
// CHECK-NEXT:     %c100_i256_0 = arith.constant 100 : i256 loc(#loc4)
// CHECK-NEXT:     %c5_i256_1 = arith.constant 5 : i256 loc(#loc5)
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc6)
// CHECK-NEXT:     %1 = llvm.inttoptr %c100_i256_0 : i256 to !llvm.ptr<1> loc(#loc7)
// CHECK-NEXT:     "llvm.intrcall"(%1, %c5_i256_1, %c10_i256) <{id = 3235 : i32, name = "evm.log1"}> : (!llvm.ptr<1>, i256, i256) -> () loc(#loc7)
// CHECK-NEXT:     %c100_i256_2 = arith.constant 100 : i256 loc(#loc8)
// CHECK-NEXT:     %c5_i256_3 = arith.constant 5 : i256 loc(#loc9)
// CHECK-NEXT:     %c10_i256_4 = arith.constant 10 : i256 loc(#loc10)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc11)
// CHECK-NEXT:     %2 = llvm.inttoptr %c100_i256_2 : i256 to !llvm.ptr<1> loc(#loc12)
// CHECK-NEXT:     "llvm.intrcall"(%2, %c5_i256_3, %c10_i256_4, %c11_i256) <{id = 3236 : i32, name = "evm.log2"}> : (!llvm.ptr<1>, i256, i256, i256) -> () loc(#loc12)
// CHECK-NEXT:     %c100_i256_5 = arith.constant 100 : i256 loc(#loc13)
// CHECK-NEXT:     %c5_i256_6 = arith.constant 5 : i256 loc(#loc14)
// CHECK-NEXT:     %c10_i256_7 = arith.constant 10 : i256 loc(#loc15)
// CHECK-NEXT:     %c11_i256_8 = arith.constant 11 : i256 loc(#loc16)
// CHECK-NEXT:     %c12_i256 = arith.constant 12 : i256 loc(#loc17)
// CHECK-NEXT:     %3 = llvm.inttoptr %c100_i256_5 : i256 to !llvm.ptr<1> loc(#loc18)
// CHECK-NEXT:     "llvm.intrcall"(%3, %c5_i256_6, %c10_i256_7, %c11_i256_8, %c12_i256) <{id = 3237 : i32, name = "evm.log3"}> : (!llvm.ptr<1>, i256, i256, i256, i256) -> () loc(#loc18)
// CHECK-NEXT:     %c100_i256_9 = arith.constant 100 : i256 loc(#loc19)
// CHECK-NEXT:     %c5_i256_10 = arith.constant 5 : i256 loc(#loc20)
// CHECK-NEXT:     %c10_i256_11 = arith.constant 10 : i256 loc(#loc21)
// CHECK-NEXT:     %c11_i256_12 = arith.constant 11 : i256 loc(#loc22)
// CHECK-NEXT:     %c12_i256_13 = arith.constant 12 : i256 loc(#loc23)
// CHECK-NEXT:     %c13_i256 = arith.constant 13 : i256 loc(#loc24)
// CHECK-NEXT:     %4 = llvm.inttoptr %c100_i256_9 : i256 to !llvm.ptr<1> loc(#loc25)
// CHECK-NEXT:     "llvm.intrcall"(%4, %c5_i256_10, %c10_i256_11, %c11_i256_12, %c12_i256_13, %c13_i256) <{id = 3238 : i32, name = "evm.log4"}> : (!llvm.ptr<1>, i256, i256, i256, i256, i256) -> () loc(#loc25)
// CHECK-NEXT:     llvm.unreachable loc(#loc)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:4:9)
// CHECK-NEXT: #loc2 = loc({{.*}}:4:14)
// CHECK-NEXT: #loc3 = loc({{.*}}:4:4)
// CHECK-NEXT: #loc4 = loc({{.*}}:5:9)
// CHECK-NEXT: #loc5 = loc({{.*}}:5:14)
// CHECK-NEXT: #loc6 = loc({{.*}}:5:17)
// CHECK-NEXT: #loc7 = loc({{.*}}:5:4)
// CHECK-NEXT: #loc8 = loc({{.*}}:6:9)
// CHECK-NEXT: #loc9 = loc({{.*}}:6:14)
// CHECK-NEXT: #loc10 = loc({{.*}}:6:17)
// CHECK-NEXT: #loc11 = loc({{.*}}:6:21)
// CHECK-NEXT: #loc12 = loc({{.*}}:6:4)
// CHECK-NEXT: #loc13 = loc({{.*}}:7:9)
// CHECK-NEXT: #loc14 = loc({{.*}}:7:14)
// CHECK-NEXT: #loc15 = loc({{.*}}:7:17)
// CHECK-NEXT: #loc16 = loc({{.*}}:7:21)
// CHECK-NEXT: #loc17 = loc({{.*}}:7:25)
// CHECK-NEXT: #loc18 = loc({{.*}}:7:4)
// CHECK-NEXT: #loc19 = loc({{.*}}:8:9)
// CHECK-NEXT: #loc20 = loc({{.*}}:8:14)
// CHECK-NEXT: #loc21 = loc({{.*}}:8:17)
// CHECK-NEXT: #loc22 = loc({{.*}}:8:21)
// CHECK-NEXT: #loc23 = loc({{.*}}:8:25)
// CHECK-NEXT: #loc24 = loc({{.*}}:8:29)
// CHECK-NEXT: #loc25 = loc({{.*}}:8:4)
// CHECK-EMPTY:
