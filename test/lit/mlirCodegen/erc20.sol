// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0;

contract ERC20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;
  uint256 private _totalSupply;
  string private _name;
  string private _symbol;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  constructor(string memory name_, string memory symbol_) {
    _name = name_;
    _symbol = symbol_;
  }

  function _msgSender() internal view returns (address) {
    return msg.sender;
  }

  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function decimals() public view returns (uint256) {
    return 18;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount)
      public returns (bool) {
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][_msgSender()];
    unchecked {
      // TODO: checked:
      require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");

      _approve(sender, _msgSender(), currentAllowance - amount);
    }

    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public
      returns (bool) {
    // TODO: checked
    unchecked {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
    }
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public
      returns (bool) {
    uint256 currentAllowance = _allowances[_msgSender()][spender];
    unchecked {
      // TODO: checked:
      require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");

      _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

    return true;
  }

  function _transfer(address sender, address recipient, uint256 amount) public {
    // TODO: checked:
    unchecked {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
    }

    uint256 senderBalance = _balances[sender];
    unchecked {
      // TODO: checked:
      require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

      _balances[sender] = senderBalance - amount;
      _balances[recipient] += amount; // TODO: checked
    }
    emit Transfer(sender, recipient, amount);
  }

  function _mint(address account, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(account != address(0), "ERC20: mint to the zero address");
      _totalSupply += amount;
      _balances[account] += amount;
    }
    emit Transfer(address(0), account, amount);
  }

  function _burn(address account, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(account != address(0), "ERC20: burn from the zero address");
    }

    uint256 accountBalance = _balances[account];
    unchecked {
      // TODO: checked
      require(accountBalance >= amount, "ERC20: burn amount exceeds balance");

      _balances[account] = accountBalance - amount;
      _totalSupply -= amount; // TODO: checked
    }

    emit Transfer(account, address(0), amount);
  }

  function _approve(address owner, address spender, uint256 amount) public {
    // TODO: checked
    unchecked {
      require(owner != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
    }

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #Contract = #sol<ContractKind Contract>
// CHECK-NEXT: #NonPayable = #sol<StateMutability NonPayable>
// CHECK-NEXT: #View = #sol<StateMutability View>
// CHECK-NEXT: #loc8 = loc({{.*}}:16:14)
// CHECK-NEXT: #loc9 = loc({{.*}}:16:35)
// CHECK-NEXT: #loc28 = loc({{.*}}:41:21)
// CHECK-NEXT: #loc33 = loc({{.*}}:45:20)
// CHECK-NEXT: #loc34 = loc({{.*}}:45:39)
// CHECK-NEXT: #loc42 = loc({{.*}}:50:21)
// CHECK-NEXT: #loc43 = loc({{.*}}:50:36)
// CHECK-NEXT: #loc49 = loc({{.*}}:54:19)
// CHECK-NEXT: #loc50 = loc({{.*}}:54:36)
// CHECK-NEXT: #loc58 = loc({{.*}}:59:24)
// CHECK-NEXT: #loc59 = loc({{.*}}:59:40)
// CHECK-NEXT: #loc60 = loc({{.*}}:59:59)
// CHECK-NEXT: #loc80 = loc({{.*}}:74:29)
// CHECK-NEXT: #loc81 = loc({{.*}}:74:46)
// CHECK-NEXT: #loc92 = loc({{.*}}:83:29)
// CHECK-NEXT: #loc93 = loc({{.*}}:83:46)
// CHECK-NEXT: #loc109 = loc({{.*}}:96:21)
// CHECK-NEXT: #loc110 = loc({{.*}}:96:37)
// CHECK-NEXT: #loc111 = loc({{.*}}:96:56)
// CHECK-NEXT: #loc136 = loc({{.*}}:114:17)
// CHECK-NEXT: #loc137 = loc({{.*}}:114:34)
// CHECK-NEXT: #loc151 = loc({{.*}}:124:17)
// CHECK-NEXT: #loc152 = loc({{.*}}:124:34)
// CHECK-NEXT: #loc173 = loc({{.*}}:142:20)
// CHECK-NEXT: #loc174 = loc({{.*}}:142:35)
// CHECK-NEXT: #loc175 = loc({{.*}}:142:52)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @ERC20_470 {
// CHECK-NEXT:     sol.state_var @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:     sol.state_var @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:     sol.state_var @_totalSupply : ui256 loc(#loc4)
// CHECK-NEXT:     sol.state_var @_name : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:     sol.state_var @_symbol : !sol.string<Storage> loc(#loc6)
// CHECK-NEXT:     sol.func @_49(%arg0: !sol.string<Memory> loc({{.*}}:16:14), %arg1: !sol.string<Memory> loc({{.*}}:16:35)) attributes {ctor, state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.string<Memory>, Stack> loc(#loc8)
// CHECK-NEXT:       sol.store %arg0, %0 : !sol.string<Memory>, !sol.ptr<!sol.string<Memory>, Stack> loc(#loc8)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<!sol.string<Memory>, Stack> loc(#loc9)
// CHECK-NEXT:       sol.store %arg1, %1 : !sol.string<Memory>, !sol.ptr<!sol.string<Memory>, Stack> loc(#loc9)
// CHECK-NEXT:       %2 = sol.addr_of @_name : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<!sol.string<Memory>, Stack>, !sol.string<Memory> loc(#loc10)
// CHECK-NEXT:       sol.copy %3, %2 : !sol.string<Memory>, !sol.string<Storage> loc(#loc11)
// CHECK-NEXT:       %4 = sol.addr_of @_symbol : !sol.string<Storage> loc(#loc6)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<!sol.string<Memory>, Stack>, !sol.string<Memory> loc(#loc12)
// CHECK-NEXT:       sol.copy %5, %4 : !sol.string<Memory>, !sol.string<Storage> loc(#loc13)
// CHECK-NEXT:       sol.return loc(#loc7)
// CHECK-NEXT:     } loc(#loc7)
// CHECK-NEXT:     sol.func @_msgSender_58() -> ui256 attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.caller loc(#loc15)
// CHECK-NEXT:       %1 = sol.conv_cast %0 : i256 -> ui256 loc(#loc15)
// CHECK-NEXT:       sol.return %1 : ui256 loc(#loc16)
// CHECK-NEXT:     } loc(#loc14)
// CHECK-NEXT:     sol.func @name_66() -> !sol.string<Memory> attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.addr_of @_name : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:       %1 = sol.data_loc_cast %0 : !sol.string<Storage>, !sol.string<Memory> loc(#loc5)
// CHECK-NEXT:       sol.return %1 : !sol.string<Memory> loc(#loc18)
// CHECK-NEXT:     } loc(#loc17)
// CHECK-NEXT:     sol.func @symbol_74() -> !sol.string<Memory> attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.addr_of @_symbol : !sol.string<Storage> loc(#loc6)
// CHECK-NEXT:       %1 = sol.data_loc_cast %0 : !sol.string<Storage>, !sol.string<Memory> loc(#loc6)
// CHECK-NEXT:       sol.return %1 : !sol.string<Memory> loc(#loc20)
// CHECK-NEXT:     } loc(#loc19)
// CHECK-NEXT:     sol.func @decimals_82() -> ui256 attributes {state_mutability = #View} {
// CHECK-NEXT:       %c18_ui8 = sol.constant 18 : ui8 loc(#loc22)
// CHECK-NEXT:       %0 = sol.ext %c18_ui8 : ui8 to ui256 loc(#loc22)
// CHECK-NEXT:       sol.return %0 : ui256 loc(#loc23)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     sol.func @totalSupply_90() -> ui256 attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.addr_of @_totalSupply : !sol.ptr<ui256, Storage> loc(#loc4)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<ui256, Storage>, ui256 loc(#loc25)
// CHECK-NEXT:       sol.return %1 : ui256 loc(#loc26)
// CHECK-NEXT:     } loc(#loc24)
// CHECK-NEXT:     sol.func @balanceOf_102(%arg0: ui256 loc({{.*}}:41:21)) -> ui256 attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc28)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc28)
// CHECK-NEXT:       %1 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc29)
// CHECK-NEXT:       %3 = sol.map %1, %2 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc30)
// CHECK-NEXT:       %4 = sol.load %3 : !sol.ptr<ui256, Storage>, ui256 loc(#loc30)
// CHECK-NEXT:       sol.return %4 : ui256 loc(#loc31)
// CHECK-NEXT:     } loc(#loc27)
// CHECK-NEXT:     sol.func @transfer_121(%arg0: ui256 loc({{.*}}:45:20), %arg1: ui256 loc({{.*}}:45:39)) -> i1 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc33)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc33)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc34)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc34)
// CHECK-NEXT:       %2 = sol.call @_msgSender_58() : () -> ui256 loc(#loc35)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc36)
// CHECK-NEXT:       %4 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc37)
// CHECK-NEXT:       sol.call @_transfer_332(%2, %3, %4) : (ui256, ui256, ui256) -> () loc(#loc38)
// CHECK-NEXT:       %true = sol.constant true loc(#loc39)
// CHECK-NEXT:       sol.return %true : i1 loc(#loc40)
// CHECK-NEXT:     } loc(#loc32)
// CHECK-NEXT:     sol.func @allowance_137(%arg0: ui256 loc({{.*}}:50:21), %arg1: ui256 loc({{.*}}:50:36)) -> ui256 attributes {state_mutability = #View} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc42)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc42)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc43)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc43)
// CHECK-NEXT:       %2 = sol.addr_of @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc44)
// CHECK-NEXT:       %4 = sol.map %2, %3 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc45)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc46)
// CHECK-NEXT:       %6 = sol.map %4, %5 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc45)
// CHECK-NEXT:       %7 = sol.load %6 : !sol.ptr<ui256, Storage>, ui256 loc(#loc45)
// CHECK-NEXT:       sol.return %7 : ui256 loc(#loc47)
// CHECK-NEXT:     } loc(#loc41)
// CHECK-NEXT:     sol.func @approve_156(%arg0: ui256 loc({{.*}}:54:19), %arg1: ui256 loc({{.*}}:54:36)) -> i1 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc49)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc49)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc50)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc50)
// CHECK-NEXT:       %2 = sol.call @_msgSender_58() : () -> ui256 loc(#loc51)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc52)
// CHECK-NEXT:       %4 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc53)
// CHECK-NEXT:       sol.call @_approve_469(%2, %3, %4) : (ui256, ui256, ui256) -> () loc(#loc54)
// CHECK-NEXT:       %true = sol.constant true loc(#loc55)
// CHECK-NEXT:       sol.return %true : i1 loc(#loc56)
// CHECK-NEXT:     } loc(#loc48)
// CHECK-NEXT:     sol.func @transferFrom_202(%arg0: ui256 loc({{.*}}:59:24), %arg1: ui256 loc({{.*}}:59:40), %arg2: ui256 loc({{.*}}:59:59)) -> i1 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc58)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc58)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc59)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc59)
// CHECK-NEXT:       %2 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc60)
// CHECK-NEXT:       sol.store %arg2, %2 : ui256, !sol.ptr<ui256, Stack> loc(#loc60)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc61)
// CHECK-NEXT:       %4 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc62)
// CHECK-NEXT:       %5 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc63)
// CHECK-NEXT:       sol.call @_transfer_332(%3, %4, %5) : (ui256, ui256, ui256) -> () loc(#loc64)
// CHECK-NEXT:       %6 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc65)
// CHECK-NEXT:       %7 = sol.addr_of @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:       %8 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc66)
// CHECK-NEXT:       %9 = sol.map %7, %8 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc67)
// CHECK-NEXT:       %10 = sol.call @_msgSender_58() : () -> ui256 loc(#loc68)
// CHECK-NEXT:       %11 = sol.map %9, %10 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc67)
// CHECK-NEXT:       %12 = sol.load %11 : !sol.ptr<ui256, Storage>, ui256 loc(#loc67)
// CHECK-NEXT:       sol.store %12, %6 : ui256, !sol.ptr<ui256, Stack> loc(#loc65)
// CHECK-NEXT:       %13 = sol.load %6 : !sol.ptr<ui256, Stack>, ui256 loc(#loc69)
// CHECK-NEXT:       %14 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc70)
// CHECK-NEXT:       %15 = sol.cmp ge, %13, %14 : ui256 loc(#loc69)
// CHECK-NEXT:       sol.require %15, "ERC20: transfer amount exceeds allowance" loc(#loc71)
// CHECK-NEXT:       %16 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc72)
// CHECK-NEXT:       %17 = sol.call @_msgSender_58() : () -> ui256 loc(#loc73)
// CHECK-NEXT:       %18 = sol.load %6 : !sol.ptr<ui256, Stack>, ui256 loc(#loc74)
// CHECK-NEXT:       %19 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc75)
// CHECK-NEXT:       %20 = sol.sub %18, %19 : ui256 loc(#loc74)
// CHECK-NEXT:       sol.call @_approve_469(%16, %17, %20) : (ui256, ui256, ui256) -> () loc(#loc76)
// CHECK-NEXT:       %true = sol.constant true loc(#loc77)
// CHECK-NEXT:       sol.return %true : i1 loc(#loc78)
// CHECK-NEXT:     } loc(#loc57)
// CHECK-NEXT:     sol.func @increaseAllowance_229(%arg0: ui256 loc({{.*}}:74:29), %arg1: ui256 loc({{.*}}:74:46)) -> i1 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc80)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc80)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc81)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc81)
// CHECK-NEXT:       %2 = sol.call @_msgSender_58() : () -> ui256 loc(#loc82)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc83)
// CHECK-NEXT:       %4 = sol.addr_of @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:       %5 = sol.call @_msgSender_58() : () -> ui256 loc(#loc84)
// CHECK-NEXT:       %6 = sol.map %4, %5 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc85)
// CHECK-NEXT:       %7 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc86)
// CHECK-NEXT:       %8 = sol.map %6, %7 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc85)
// CHECK-NEXT:       %9 = sol.load %8 : !sol.ptr<ui256, Storage>, ui256 loc(#loc85)
// CHECK-NEXT:       %10 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc87)
// CHECK-NEXT:       %11 = sol.add %9, %10 : ui256 loc(#loc85)
// CHECK-NEXT:       sol.call @_approve_469(%2, %3, %11) : (ui256, ui256, ui256) -> () loc(#loc88)
// CHECK-NEXT:       %true = sol.constant true loc(#loc89)
// CHECK-NEXT:       sol.return %true : i1 loc(#loc90)
// CHECK-NEXT:     } loc(#loc79)
// CHECK-NEXT:     sol.func @decreaseAllowance_267(%arg0: ui256 loc({{.*}}:83:29), %arg1: ui256 loc({{.*}}:83:46)) -> i1 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc92)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc92)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc93)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc93)
// CHECK-NEXT:       %2 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc94)
// CHECK-NEXT:       %3 = sol.addr_of @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:       %4 = sol.call @_msgSender_58() : () -> ui256 loc(#loc95)
// CHECK-NEXT:       %5 = sol.map %3, %4 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc96)
// CHECK-NEXT:       %6 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc97)
// CHECK-NEXT:       %7 = sol.map %5, %6 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc96)
// CHECK-NEXT:       %8 = sol.load %7 : !sol.ptr<ui256, Storage>, ui256 loc(#loc96)
// CHECK-NEXT:       sol.store %8, %2 : ui256, !sol.ptr<ui256, Stack> loc(#loc94)
// CHECK-NEXT:       %9 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc98)
// CHECK-NEXT:       %10 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc99)
// CHECK-NEXT:       %11 = sol.cmp ge, %9, %10 : ui256 loc(#loc98)
// CHECK-NEXT:       sol.require %11, "ERC20: decreased allowance below zero" loc(#loc100)
// CHECK-NEXT:       %12 = sol.call @_msgSender_58() : () -> ui256 loc(#loc101)
// CHECK-NEXT:       %13 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc102)
// CHECK-NEXT:       %14 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc103)
// CHECK-NEXT:       %15 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc104)
// CHECK-NEXT:       %16 = sol.sub %14, %15 : ui256 loc(#loc103)
// CHECK-NEXT:       sol.call @_approve_469(%12, %13, %16) : (ui256, ui256, ui256) -> () loc(#loc105)
// CHECK-NEXT:       %true = sol.constant true loc(#loc106)
// CHECK-NEXT:       sol.return %true : i1 loc(#loc107)
// CHECK-NEXT:     } loc(#loc91)
// CHECK-NEXT:     sol.func @_transfer_332(%arg0: ui256 loc({{.*}}:96:21), %arg1: ui256 loc({{.*}}:96:37), %arg2: ui256 loc({{.*}}:96:56)) attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc109)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc109)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc110)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc110)
// CHECK-NEXT:       %2 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc111)
// CHECK-NEXT:       sol.store %arg2, %2 : ui256, !sol.ptr<ui256, Stack> loc(#loc111)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc112)
// CHECK-NEXT:       %c0_ui8 = sol.constant 0 : ui8 loc(#loc113)
// CHECK-NEXT:       %4 = sol.ext %c0_ui8 : ui8 to ui256 loc(#loc113)
// CHECK-NEXT:       %5 = sol.cmp ne, %3, %4 : ui256 loc(#loc112)
// CHECK-NEXT:       sol.require %5, "ERC20: transfer from the zero address" loc(#loc114)
// CHECK-NEXT:       %6 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc115)
// CHECK-NEXT:       %c0_ui8_0 = sol.constant 0 : ui8 loc(#loc116)
// CHECK-NEXT:       %7 = sol.ext %c0_ui8_0 : ui8 to ui256 loc(#loc116)
// CHECK-NEXT:       %8 = sol.cmp ne, %6, %7 : ui256 loc(#loc115)
// CHECK-NEXT:       sol.require %8, "ERC20: transfer to the zero address" loc(#loc117)
// CHECK-NEXT:       %9 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc118)
// CHECK-NEXT:       %10 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %11 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc119)
// CHECK-NEXT:       %12 = sol.map %10, %11 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc120)
// CHECK-NEXT:       %13 = sol.load %12 : !sol.ptr<ui256, Storage>, ui256 loc(#loc120)
// CHECK-NEXT:       sol.store %13, %9 : ui256, !sol.ptr<ui256, Stack> loc(#loc118)
// CHECK-NEXT:       %14 = sol.load %9 : !sol.ptr<ui256, Stack>, ui256 loc(#loc121)
// CHECK-NEXT:       %15 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc122)
// CHECK-NEXT:       %16 = sol.cmp ge, %14, %15 : ui256 loc(#loc121)
// CHECK-NEXT:       sol.require %16, "ERC20: transfer amount exceeds balance" loc(#loc123)
// CHECK-NEXT:       %17 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %18 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc124)
// CHECK-NEXT:       %19 = sol.map %17, %18 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc125)
// CHECK-NEXT:       %20 = sol.load %9 : !sol.ptr<ui256, Stack>, ui256 loc(#loc126)
// CHECK-NEXT:       %21 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc127)
// CHECK-NEXT:       %22 = sol.sub %20, %21 : ui256 loc(#loc126)
// CHECK-NEXT:       sol.store %22, %19 : ui256, !sol.ptr<ui256, Storage> loc(#loc125)
// CHECK-NEXT:       %23 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %24 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc128)
// CHECK-NEXT:       %25 = sol.map %23, %24 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc129)
// CHECK-NEXT:       %26 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc130)
// CHECK-NEXT:       %27 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %28 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc128)
// CHECK-NEXT:       %29 = sol.map %27, %28 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc129)
// CHECK-NEXT:       %30 = sol.load %29 : !sol.ptr<ui256, Storage>, ui256 loc(#loc129)
// CHECK-NEXT:       %31 = sol.add %30, %26 : ui256 loc(#loc129)
// CHECK-NEXT:       sol.store %31, %25 : ui256, !sol.ptr<ui256, Storage> loc(#loc129)
// CHECK-NEXT:       %32 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc131)
// CHECK-NEXT:       %33 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc132)
// CHECK-NEXT:       %34 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc133)
// CHECK-NEXT:       sol.emit "Transfer(address,address,uint256)" indexed = [%32, %33] non_indexed = [%34] : ui256, ui256, ui256 loc(#loc134)
// CHECK-NEXT:       sol.return loc(#loc108)
// CHECK-NEXT:     } loc(#loc108)
// CHECK-NEXT:     sol.func @_mint_370(%arg0: ui256 loc({{.*}}:114:17), %arg1: ui256 loc({{.*}}:114:34)) attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc136)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc136)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc137)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc137)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc138)
// CHECK-NEXT:       %c0_ui8 = sol.constant 0 : ui8 loc(#loc139)
// CHECK-NEXT:       %3 = sol.ext %c0_ui8 : ui8 to ui256 loc(#loc139)
// CHECK-NEXT:       %4 = sol.cmp ne, %2, %3 : ui256 loc(#loc138)
// CHECK-NEXT:       sol.require %4, "ERC20: mint to the zero address" loc(#loc140)
// CHECK-NEXT:       %5 = sol.addr_of @_totalSupply : !sol.ptr<ui256, Storage> loc(#loc4)
// CHECK-NEXT:       %6 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc141)
// CHECK-NEXT:       %7 = sol.addr_of @_totalSupply : !sol.ptr<ui256, Storage> loc(#loc4)
// CHECK-NEXT:       %8 = sol.load %7 : !sol.ptr<ui256, Storage>, ui256 loc(#loc142)
// CHECK-NEXT:       %9 = sol.add %8, %6 : ui256 loc(#loc142)
// CHECK-NEXT:       sol.store %9, %5 : ui256, !sol.ptr<ui256, Storage> loc(#loc142)
// CHECK-NEXT:       %10 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %11 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc143)
// CHECK-NEXT:       %12 = sol.map %10, %11 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc144)
// CHECK-NEXT:       %13 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc145)
// CHECK-NEXT:       %14 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %15 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc143)
// CHECK-NEXT:       %16 = sol.map %14, %15 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc144)
// CHECK-NEXT:       %17 = sol.load %16 : !sol.ptr<ui256, Storage>, ui256 loc(#loc144)
// CHECK-NEXT:       %18 = sol.add %17, %13 : ui256 loc(#loc144)
// CHECK-NEXT:       sol.store %18, %12 : ui256, !sol.ptr<ui256, Storage> loc(#loc144)
// CHECK-NEXT:       %c0_ui8_0 = sol.constant 0 : ui8 loc(#loc146)
// CHECK-NEXT:       %19 = sol.ext %c0_ui8_0 : ui8 to ui256 loc(#loc146)
// CHECK-NEXT:       %20 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc147)
// CHECK-NEXT:       %21 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc148)
// CHECK-NEXT:       sol.emit "Transfer(address,address,uint256)" indexed = [%19, %20] non_indexed = [%21] : ui256, ui256, ui256 loc(#loc149)
// CHECK-NEXT:       sol.return loc(#loc135)
// CHECK-NEXT:     } loc(#loc135)
// CHECK-NEXT:     sol.func @_burn_424(%arg0: ui256 loc({{.*}}:124:17), %arg1: ui256 loc({{.*}}:124:34)) attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc151)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc151)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc152)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc152)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc153)
// CHECK-NEXT:       %c0_ui8 = sol.constant 0 : ui8 loc(#loc154)
// CHECK-NEXT:       %3 = sol.ext %c0_ui8 : ui8 to ui256 loc(#loc154)
// CHECK-NEXT:       %4 = sol.cmp ne, %2, %3 : ui256 loc(#loc153)
// CHECK-NEXT:       sol.require %4, "ERC20: burn from the zero address" loc(#loc155)
// CHECK-NEXT:       %5 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc156)
// CHECK-NEXT:       %6 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %7 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc157)
// CHECK-NEXT:       %8 = sol.map %6, %7 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc158)
// CHECK-NEXT:       %9 = sol.load %8 : !sol.ptr<ui256, Storage>, ui256 loc(#loc158)
// CHECK-NEXT:       sol.store %9, %5 : ui256, !sol.ptr<ui256, Stack> loc(#loc156)
// CHECK-NEXT:       %10 = sol.load %5 : !sol.ptr<ui256, Stack>, ui256 loc(#loc159)
// CHECK-NEXT:       %11 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc160)
// CHECK-NEXT:       %12 = sol.cmp ge, %10, %11 : ui256 loc(#loc159)
// CHECK-NEXT:       sol.require %12, "ERC20: burn amount exceeds balance" loc(#loc161)
// CHECK-NEXT:       %13 = sol.addr_of @_balances : !sol.mapping<ui256, ui256> loc(#loc2)
// CHECK-NEXT:       %14 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc162)
// CHECK-NEXT:       %15 = sol.map %13, %14 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc163)
// CHECK-NEXT:       %16 = sol.load %5 : !sol.ptr<ui256, Stack>, ui256 loc(#loc164)
// CHECK-NEXT:       %17 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc165)
// CHECK-NEXT:       %18 = sol.sub %16, %17 : ui256 loc(#loc164)
// CHECK-NEXT:       sol.store %18, %15 : ui256, !sol.ptr<ui256, Storage> loc(#loc163)
// CHECK-NEXT:       %19 = sol.addr_of @_totalSupply : !sol.ptr<ui256, Storage> loc(#loc4)
// CHECK-NEXT:       %20 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc166)
// CHECK-NEXT:       %21 = sol.addr_of @_totalSupply : !sol.ptr<ui256, Storage> loc(#loc4)
// CHECK-NEXT:       %22 = sol.load %21 : !sol.ptr<ui256, Storage>, ui256 loc(#loc167)
// CHECK-NEXT:       %23 = sol.sub %22, %20 : ui256 loc(#loc167)
// CHECK-NEXT:       sol.store %23, %19 : ui256, !sol.ptr<ui256, Storage> loc(#loc167)
// CHECK-NEXT:       %24 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc168)
// CHECK-NEXT:       %c0_ui8_0 = sol.constant 0 : ui8 loc(#loc169)
// CHECK-NEXT:       %25 = sol.ext %c0_ui8_0 : ui8 to ui256 loc(#loc169)
// CHECK-NEXT:       %26 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc170)
// CHECK-NEXT:       sol.emit "Transfer(address,address,uint256)" indexed = [%24, %25] non_indexed = [%26] : ui256, ui256, ui256 loc(#loc171)
// CHECK-NEXT:       sol.return loc(#loc150)
// CHECK-NEXT:     } loc(#loc150)
// CHECK-NEXT:     sol.func @_approve_469(%arg0: ui256 loc({{.*}}:142:20), %arg1: ui256 loc({{.*}}:142:35), %arg2: ui256 loc({{.*}}:142:52)) attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc173)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc173)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc174)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc174)
// CHECK-NEXT:       %2 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc175)
// CHECK-NEXT:       sol.store %arg2, %2 : ui256, !sol.ptr<ui256, Stack> loc(#loc175)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc176)
// CHECK-NEXT:       %c0_ui8 = sol.constant 0 : ui8 loc(#loc177)
// CHECK-NEXT:       %4 = sol.ext %c0_ui8 : ui8 to ui256 loc(#loc177)
// CHECK-NEXT:       %5 = sol.cmp ne, %3, %4 : ui256 loc(#loc176)
// CHECK-NEXT:       sol.require %5, "ERC20: approve from the zero address" loc(#loc178)
// CHECK-NEXT:       %6 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc179)
// CHECK-NEXT:       %c0_ui8_0 = sol.constant 0 : ui8 loc(#loc180)
// CHECK-NEXT:       %7 = sol.ext %c0_ui8_0 : ui8 to ui256 loc(#loc180)
// CHECK-NEXT:       %8 = sol.cmp ne, %6, %7 : ui256 loc(#loc179)
// CHECK-NEXT:       sol.require %8, "ERC20: approve to the zero address" loc(#loc181)
// CHECK-NEXT:       %9 = sol.addr_of @_allowances : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc3)
// CHECK-NEXT:       %10 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc182)
// CHECK-NEXT:       %11 = sol.map %9, %10 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc183)
// CHECK-NEXT:       %12 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc184)
// CHECK-NEXT:       %13 = sol.map %11, %12 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc183)
// CHECK-NEXT:       %14 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc185)
// CHECK-NEXT:       sol.store %14, %13 : ui256, !sol.ptr<ui256, Storage> loc(#loc183)
// CHECK-NEXT:       %15 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc186)
// CHECK-NEXT:       %16 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc187)
// CHECK-NEXT:       %17 = sol.load %2 : !sol.ptr<ui256, Stack>, ui256 loc(#loc188)
// CHECK-NEXT:       sol.emit "Approval(address,address,uint256)" indexed = [%15, %16] non_indexed = [%17] : ui256, ui256, ui256 loc(#loc189)
// CHECK-NEXT:       sol.return loc(#loc172)
// CHECK-NEXT:     } loc(#loc172)
// CHECK-NEXT:   } {ctorFnType = (!sol.string<Memory>, !sol.string<Memory>) -> (), interface_fns = [{selector = 117300739 : i32, sym = @name_66, type = () -> !sol.string<Memory>}, {selector = 157198259 : i32, sym = @approve_156, type = (ui256, ui256) -> i1}, {selector = 273580543 : i32, sym = @_approve_469, type = (ui256, ui256, ui256) -> ()}, {selector = 404098525 : i32, sym = @totalSupply_90, type = () -> ui256}, {selector = 599290589 : i32, sym = @transferFrom_202, type = (ui256, ui256, ui256) -> i1}, {selector = 820017310 : i32, sym = @_transfer_332, type = (ui256, ui256, ui256) -> ()}, {selector = 826074471 : i32, sym = @decimals_82, type = () -> ui256}, {selector = 961581905 : i32, sym = @increaseAllowance_229, type = (ui256, ui256) -> i1}, {selector = 1315881543 : i32, sym = @_mint_370, type = (ui256, ui256) -> ()}, {selector = 1633807128 : i32, sym = @_burn_424, type = (ui256, ui256) -> ()}, {selector = 1889567281 : i32, sym = @balanceOf_102, type = (ui256) -> ui256}, {selector = -1780966591 : i32, sym = @symbol_74, type = () -> !sol.string<Memory>}, {selector = -1537752361 : i32, sym = @decreaseAllowance_267, type = (ui256, ui256) -> i1}, {selector = -1459249989 : i32, sym = @transfer_121, type = (ui256, ui256) -> i1}, {selector = -580719298 : i32, sym = @allowance_137, type = (ui256, ui256) -> ui256}], kind = #Contract} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:6:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc5 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc6 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc7 = loc({{.*}}:16:2)
// CHECK-NEXT: #loc10 = loc({{.*}}:17:12)
// CHECK-NEXT: #loc11 = loc({{.*}}:17:4)
// CHECK-NEXT: #loc12 = loc({{.*}}:18:14)
// CHECK-NEXT: #loc13 = loc({{.*}}:18:4)
// CHECK-NEXT: #loc14 = loc({{.*}}:21:2)
// CHECK-NEXT: #loc15 = loc({{.*}}:22:11)
// CHECK-NEXT: #loc16 = loc({{.*}}:22:4)
// CHECK-NEXT: #loc17 = loc({{.*}}:25:2)
// CHECK-NEXT: #loc18 = loc({{.*}}:26:4)
// CHECK-NEXT: #loc19 = loc({{.*}}:29:2)
// CHECK-NEXT: #loc20 = loc({{.*}}:30:4)
// CHECK-NEXT: #loc21 = loc({{.*}}:33:2)
// CHECK-NEXT: #loc22 = loc({{.*}}:34:11)
// CHECK-NEXT: #loc23 = loc({{.*}}:34:4)
// CHECK-NEXT: #loc24 = loc({{.*}}:37:2)
// CHECK-NEXT: #loc25 = loc({{.*}}:38:11)
// CHECK-NEXT: #loc26 = loc({{.*}}:38:4)
// CHECK-NEXT: #loc27 = loc({{.*}}:41:2)
// CHECK-NEXT: #loc29 = loc({{.*}}:42:21)
// CHECK-NEXT: #loc30 = loc({{.*}}:42:11)
// CHECK-NEXT: #loc31 = loc({{.*}}:42:4)
// CHECK-NEXT: #loc32 = loc({{.*}}:45:2)
// CHECK-NEXT: #loc35 = loc({{.*}}:46:14)
// CHECK-NEXT: #loc36 = loc({{.*}}:46:28)
// CHECK-NEXT: #loc37 = loc({{.*}}:46:39)
// CHECK-NEXT: #loc38 = loc({{.*}}:46:4)
// CHECK-NEXT: #loc39 = loc({{.*}}:47:11)
// CHECK-NEXT: #loc40 = loc({{.*}}:47:4)
// CHECK-NEXT: #loc41 = loc({{.*}}:50:2)
// CHECK-NEXT: #loc44 = loc({{.*}}:51:23)
// CHECK-NEXT: #loc45 = loc({{.*}}:51:11)
// CHECK-NEXT: #loc46 = loc({{.*}}:51:30)
// CHECK-NEXT: #loc47 = loc({{.*}}:51:4)
// CHECK-NEXT: #loc48 = loc({{.*}}:54:2)
// CHECK-NEXT: #loc51 = loc({{.*}}:55:13)
// CHECK-NEXT: #loc52 = loc({{.*}}:55:27)
// CHECK-NEXT: #loc53 = loc({{.*}}:55:36)
// CHECK-NEXT: #loc54 = loc({{.*}}:55:4)
// CHECK-NEXT: #loc55 = loc({{.*}}:56:11)
// CHECK-NEXT: #loc56 = loc({{.*}}:56:4)
// CHECK-NEXT: #loc57 = loc({{.*}}:59:2)
// CHECK-NEXT: #loc61 = loc({{.*}}:61:14)
// CHECK-NEXT: #loc62 = loc({{.*}}:61:22)
// CHECK-NEXT: #loc63 = loc({{.*}}:61:33)
// CHECK-NEXT: #loc64 = loc({{.*}}:61:4)
// CHECK-NEXT: #loc65 = loc({{.*}}:63:4)
// CHECK-NEXT: #loc66 = loc({{.*}}:63:43)
// CHECK-NEXT: #loc67 = loc({{.*}}:63:31)
// CHECK-NEXT: #loc68 = loc({{.*}}:63:51)
// CHECK-NEXT: #loc69 = loc({{.*}}:66:14)
// CHECK-NEXT: #loc70 = loc({{.*}}:66:34)
// CHECK-NEXT: #loc71 = loc({{.*}}:66:6)
// CHECK-NEXT: #loc72 = loc({{.*}}:68:15)
// CHECK-NEXT: #loc73 = loc({{.*}}:68:23)
// CHECK-NEXT: #loc74 = loc({{.*}}:68:37)
// CHECK-NEXT: #loc75 = loc({{.*}}:68:56)
// CHECK-NEXT: #loc76 = loc({{.*}}:68:6)
// CHECK-NEXT: #loc77 = loc({{.*}}:71:11)
// CHECK-NEXT: #loc78 = loc({{.*}}:71:4)
// CHECK-NEXT: #loc79 = loc({{.*}}:74:2)
// CHECK-NEXT: #loc82 = loc({{.*}}:78:13)
// CHECK-NEXT: #loc83 = loc({{.*}}:78:27)
// CHECK-NEXT: #loc84 = loc({{.*}}:78:48)
// CHECK-NEXT: #loc85 = loc({{.*}}:78:36)
// CHECK-NEXT: #loc86 = loc({{.*}}:78:62)
// CHECK-NEXT: #loc87 = loc({{.*}}:78:73)
// CHECK-NEXT: #loc88 = loc({{.*}}:78:4)
// CHECK-NEXT: #loc89 = loc({{.*}}:80:11)
// CHECK-NEXT: #loc90 = loc({{.*}}:80:4)
// CHECK-NEXT: #loc91 = loc({{.*}}:83:2)
// CHECK-NEXT: #loc94 = loc({{.*}}:85:4)
// CHECK-NEXT: #loc95 = loc({{.*}}:85:43)
// CHECK-NEXT: #loc96 = loc({{.*}}:85:31)
// CHECK-NEXT: #loc97 = loc({{.*}}:85:57)
// CHECK-NEXT: #loc98 = loc({{.*}}:88:14)
// CHECK-NEXT: #loc99 = loc({{.*}}:88:34)
// CHECK-NEXT: #loc100 = loc({{.*}}:88:6)
// CHECK-NEXT: #loc101 = loc({{.*}}:90:15)
// CHECK-NEXT: #loc102 = loc({{.*}}:90:29)
// CHECK-NEXT: #loc103 = loc({{.*}}:90:38)
// CHECK-NEXT: #loc104 = loc({{.*}}:90:57)
// CHECK-NEXT: #loc105 = loc({{.*}}:90:6)
// CHECK-NEXT: #loc106 = loc({{.*}}:93:11)
// CHECK-NEXT: #loc107 = loc({{.*}}:93:4)
// CHECK-NEXT: #loc108 = loc({{.*}}:96:2)
// CHECK-NEXT: #loc112 = loc({{.*}}:99:14)
// CHECK-NEXT: #loc113 = loc({{.*}}:99:32)
// CHECK-NEXT: #loc114 = loc({{.*}}:99:6)
// CHECK-NEXT: #loc115 = loc({{.*}}:100:14)
// CHECK-NEXT: #loc116 = loc({{.*}}:100:35)
// CHECK-NEXT: #loc117 = loc({{.*}}:100:6)
// CHECK-NEXT: #loc118 = loc({{.*}}:103:4)
// CHECK-NEXT: #loc119 = loc({{.*}}:103:38)
// CHECK-NEXT: #loc120 = loc({{.*}}:103:28)
// CHECK-NEXT: #loc121 = loc({{.*}}:106:14)
// CHECK-NEXT: #loc122 = loc({{.*}}:106:31)
// CHECK-NEXT: #loc123 = loc({{.*}}:106:6)
// CHECK-NEXT: #loc124 = loc({{.*}}:108:16)
// CHECK-NEXT: #loc125 = loc({{.*}}:108:6)
// CHECK-NEXT: #loc126 = loc({{.*}}:108:26)
// CHECK-NEXT: #loc127 = loc({{.*}}:108:42)
// CHECK-NEXT: #loc128 = loc({{.*}}:109:16)
// CHECK-NEXT: #loc129 = loc({{.*}}:109:6)
// CHECK-NEXT: #loc130 = loc({{.*}}:109:30)
// CHECK-NEXT: #loc131 = loc({{.*}}:111:18)
// CHECK-NEXT: #loc132 = loc({{.*}}:111:26)
// CHECK-NEXT: #loc133 = loc({{.*}}:111:37)
// CHECK-NEXT: #loc134 = loc({{.*}}:111:9)
// CHECK-NEXT: #loc135 = loc({{.*}}:114:2)
// CHECK-NEXT: #loc138 = loc({{.*}}:117:14)
// CHECK-NEXT: #loc139 = loc({{.*}}:117:33)
// CHECK-NEXT: #loc140 = loc({{.*}}:117:6)
// CHECK-NEXT: #loc141 = loc({{.*}}:118:22)
// CHECK-NEXT: #loc142 = loc({{.*}}:118:6)
// CHECK-NEXT: #loc143 = loc({{.*}}:119:16)
// CHECK-NEXT: #loc144 = loc({{.*}}:119:6)
// CHECK-NEXT: #loc145 = loc({{.*}}:119:28)
// CHECK-NEXT: #loc146 = loc({{.*}}:121:26)
// CHECK-NEXT: #loc147 = loc({{.*}}:121:30)
// CHECK-NEXT: #loc148 = loc({{.*}}:121:39)
// CHECK-NEXT: #loc149 = loc({{.*}}:121:9)
// CHECK-NEXT: #loc150 = loc({{.*}}:124:2)
// CHECK-NEXT: #loc153 = loc({{.*}}:127:14)
// CHECK-NEXT: #loc154 = loc({{.*}}:127:33)
// CHECK-NEXT: #loc155 = loc({{.*}}:127:6)
// CHECK-NEXT: #loc156 = loc({{.*}}:130:4)
// CHECK-NEXT: #loc157 = loc({{.*}}:130:39)
// CHECK-NEXT: #loc158 = loc({{.*}}:130:29)
// CHECK-NEXT: #loc159 = loc({{.*}}:133:14)
// CHECK-NEXT: #loc160 = loc({{.*}}:133:32)
// CHECK-NEXT: #loc161 = loc({{.*}}:133:6)
// CHECK-NEXT: #loc162 = loc({{.*}}:135:16)
// CHECK-NEXT: #loc163 = loc({{.*}}:135:6)
// CHECK-NEXT: #loc164 = loc({{.*}}:135:27)
// CHECK-NEXT: #loc165 = loc({{.*}}:135:44)
// CHECK-NEXT: #loc166 = loc({{.*}}:136:22)
// CHECK-NEXT: #loc167 = loc({{.*}}:136:6)
// CHECK-NEXT: #loc168 = loc({{.*}}:139:18)
// CHECK-NEXT: #loc169 = loc({{.*}}:139:35)
// CHECK-NEXT: #loc170 = loc({{.*}}:139:39)
// CHECK-NEXT: #loc171 = loc({{.*}}:139:9)
// CHECK-NEXT: #loc172 = loc({{.*}}:142:2)
// CHECK-NEXT: #loc176 = loc({{.*}}:145:14)
// CHECK-NEXT: #loc177 = loc({{.*}}:145:31)
// CHECK-NEXT: #loc178 = loc({{.*}}:145:6)
// CHECK-NEXT: #loc179 = loc({{.*}}:146:14)
// CHECK-NEXT: #loc180 = loc({{.*}}:146:33)
// CHECK-NEXT: #loc181 = loc({{.*}}:146:6)
// CHECK-NEXT: #loc182 = loc({{.*}}:149:16)
// CHECK-NEXT: #loc183 = loc({{.*}}:149:4)
// CHECK-NEXT: #loc184 = loc({{.*}}:149:23)
// CHECK-NEXT: #loc185 = loc({{.*}}:149:34)
// CHECK-NEXT: #loc186 = loc({{.*}}:150:18)
// CHECK-NEXT: #loc187 = loc({{.*}}:150:25)
// CHECK-NEXT: #loc188 = loc({{.*}}:150:34)
// CHECK-NEXT: #loc189 = loc({{.*}}:150:9)
// CHECK-EMPTY:
