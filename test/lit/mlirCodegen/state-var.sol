// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  uint ui;
  mapping(address => uint) m0;
  mapping(address => mapping(address => uint256)) m1;
  string s;

  function get_ui() private returns (uint) { return ui; }
  function get_m0(address a) private returns (uint) { return m0[a]; }
  function get_m1(address a, address b) private returns (uint) { return m1[a][b]; }
  function get_s() private returns (string memory) { return s; }

  function set_s(string memory a) private { s = a; }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #Contract = #sol<ContractKind Contract>
// CHECK-NEXT: #NonPayable = #sol<StateMutability NonPayable>
// CHECK-NEXT: #loc10 = loc({{.*}}:9:18)
// CHECK-NEXT: #loc15 = loc({{.*}}:10:18)
// CHECK-NEXT: #loc16 = loc({{.*}}:10:29)
// CHECK-NEXT: #loc24 = loc({{.*}}:13:17)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_69 {
// CHECK-NEXT:     sol.state_var @ui : ui256 loc(#loc2)
// CHECK-NEXT:     sol.state_var @m0 : !sol.mapping<ui256, ui256> loc(#loc3)
// CHECK-NEXT:     sol.state_var @m1 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc4)
// CHECK-NEXT:     sol.state_var @s : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:     sol.func @get_ui_22() -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.addr_of @ui : !sol.ptr<ui256, Storage> loc(#loc2)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<ui256, Storage>, ui256 loc(#loc7)
// CHECK-NEXT:       sol.return %1 : ui256 loc(#loc8)
// CHECK-NEXT:     } loc(#loc6)
// CHECK-NEXT:     sol.func @get_m0_34(%arg0: ui256 loc({{.*}}:9:18)) -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc10)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc10)
// CHECK-NEXT:       %1 = sol.addr_of @m0 : !sol.mapping<ui256, ui256> loc(#loc3)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc11)
// CHECK-NEXT:       %3 = sol.map %1, %2 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc12)
// CHECK-NEXT:       %4 = sol.load %3 : !sol.ptr<ui256, Storage>, ui256 loc(#loc12)
// CHECK-NEXT:       sol.return %4 : ui256 loc(#loc13)
// CHECK-NEXT:     } loc(#loc9)
// CHECK-NEXT:     sol.func @get_m1_50(%arg0: ui256 loc({{.*}}:10:18), %arg1: ui256 loc({{.*}}:10:29)) -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc15)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc15)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc16)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc16)
// CHECK-NEXT:       %2 = sol.addr_of @m1 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>> loc(#loc4)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc17)
// CHECK-NEXT:       %4 = sol.map %2, %3 : !sol.mapping<ui256, !sol.mapping<ui256, ui256>>, ui256, !sol.mapping<ui256, ui256> loc(#loc18)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc19)
// CHECK-NEXT:       %6 = sol.map %4, %5 : !sol.mapping<ui256, ui256>, ui256, !sol.ptr<ui256, Storage> loc(#loc18)
// CHECK-NEXT:       %7 = sol.load %6 : !sol.ptr<ui256, Storage>, ui256 loc(#loc18)
// CHECK-NEXT:       sol.return %7 : ui256 loc(#loc20)
// CHECK-NEXT:     } loc(#loc14)
// CHECK-NEXT:     sol.func @get_s_58() -> !sol.string<Memory> attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.addr_of @s : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:       %1 = sol.data_loc_cast %0 : !sol.string<Storage>, !sol.string<Memory> loc(#loc5)
// CHECK-NEXT:       sol.return %1 : !sol.string<Memory> loc(#loc22)
// CHECK-NEXT:     } loc(#loc21)
// CHECK-NEXT:     sol.func @set_s_68(%arg0: !sol.string<Memory> loc({{.*}}:13:17)) attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.string<Memory>, Stack> loc(#loc24)
// CHECK-NEXT:       sol.store %arg0, %0 : !sol.string<Memory>, !sol.ptr<!sol.string<Memory>, Stack> loc(#loc24)
// CHECK-NEXT:       %1 = sol.addr_of @s : !sol.string<Storage> loc(#loc5)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<!sol.string<Memory>, Stack>, !sol.string<Memory> loc(#loc25)
// CHECK-NEXT:       sol.copy %2, %1 : !sol.string<Memory>, !sol.string<Storage> loc(#loc26)
// CHECK-NEXT:       sol.return loc(#loc23)
// CHECK-NEXT:     } loc(#loc23)
// CHECK-NEXT:   } {interface_fns = [], kind = #Contract} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:4:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:5:2)
// CHECK-NEXT: #loc5 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc6 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc7 = loc({{.*}}:8:52)
// CHECK-NEXT: #loc8 = loc({{.*}}:8:45)
// CHECK-NEXT: #loc9 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc11 = loc({{.*}}:9:64)
// CHECK-NEXT: #loc12 = loc({{.*}}:9:61)
// CHECK-NEXT: #loc13 = loc({{.*}}:9:54)
// CHECK-NEXT: #loc14 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc17 = loc({{.*}}:10:75)
// CHECK-NEXT: #loc18 = loc({{.*}}:10:72)
// CHECK-NEXT: #loc19 = loc({{.*}}:10:78)
// CHECK-NEXT: #loc20 = loc({{.*}}:10:65)
// CHECK-NEXT: #loc21 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc22 = loc({{.*}}:11:53)
// CHECK-NEXT: #loc23 = loc({{.*}}:13:2)
// CHECK-NEXT: #loc25 = loc({{.*}}:13:48)
// CHECK-NEXT: #loc26 = loc({{.*}}:13:44)
// CHECK-EMPTY:
