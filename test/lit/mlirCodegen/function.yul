// XFAIL: *
// RUN: solc --strict-assembly --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

object "Simple" {
  code {
    return(10, 11)
  }
  object "Simple_deployed" {
    code {
      function f0() -> r {
        r := 0
      }
      return(20, f0())
    }
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   sol.object @Simple {
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc1)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc2)
// CHECK-NEXT:     sol.builtin_ret %c10_i256, %c11_i256 loc(#loc3)
// CHECK-NEXT:     sol.object @Simple_deployed {
// CHECK-NEXT:       sol.func @f0() -> i256 {
// CHECK-NEXT:         %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:         %1 = llvm.alloca %c1_i256 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:         %c0_i256 = arith.constant 0 : i256 loc(#loc6)
// CHECK-NEXT:         llvm.store %c0_i256, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc7)
// CHECK-NEXT:         %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:         sol.return %2 : i256 loc(#loc4)
// CHECK-NEXT:       } loc(#loc4)
// CHECK-NEXT:       %c20_i256 = arith.constant 20 : i256 loc(#loc8)
// CHECK-NEXT:       %0 = sol.call @f0() : () -> i256 loc(#loc9)
// CHECK-NEXT:       sol.builtin_ret %c20_i256, %0 loc(#loc10)
// CHECK-NEXT:     } loc(#loc)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:0:38)
// CHECK-NEXT: #loc2 = loc({{.*}}:0:42)
// CHECK-NEXT: #loc3 = loc({{.*}}:0:31)
// CHECK-NEXT: #loc4 = loc({{.*}}:4:8)
// CHECK-NEXT: #loc5 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc6 = loc({{.*}}:6:23)
// CHECK-NEXT: #loc7 = loc({{.*}}:6:18)
// CHECK-NEXT: #loc8 = loc({{.*}}:2:11)
// CHECK-NEXT: #loc9 = loc({{.*}}:2:15)
// CHECK-NEXT: #loc10 = loc({{.*}}:2:4)
// CHECK-EMPTY:
