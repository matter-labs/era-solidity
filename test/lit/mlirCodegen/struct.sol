// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  struct S {
    uint256 ui;
    uint256[3] ui_1d;
  }
  function ui(S memory s) public returns (uint256) {
    // FIXME: return s.ui + s.ui_1d[2];
    return s.ui;
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #Contract = #sol<ContractKind Contract>
// CHECK-NEXT: #NonPayable = #sol<StateMutability NonPayable>
// CHECK-NEXT: #loc3 = loc({{.*}}:7:14)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_20 {
// CHECK-NEXT:     sol.func @ui_19(%arg0: !sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory> loc({{.*}}:7:14)) -> ui256 attributes {state_mutability = #NonPayable} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<!sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>, Stack> loc(#loc3)
// CHECK-NEXT:       sol.store %arg0, %0 : !sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>, !sol.ptr<!sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>, Stack> loc(#loc3)
// CHECK-NEXT:       %c0_ui64 = sol.constant 0 : ui64 loc(#loc4)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<!sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>, Stack>, !sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory> loc(#loc4)
// CHECK-NEXT:       %2 = sol.gep %1, %c0_ui64 : !sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>, ui64, !sol.ptr<ui256, Memory> loc(#loc4)
// CHECK-NEXT:       %3 = sol.load %2 : !sol.ptr<ui256, Memory>, ui256 loc(#loc4)
// CHECK-NEXT:       sol.return %3 : ui256 loc(#loc5)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:   } {interface_fns = [{selector = 705725625 : i32, sym = @ui_19, type = (!sol.struct<(ui256, !sol.array<3 x ui256, Memory>), Memory>) -> ui256}], kind = #Contract} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:9:11)
// CHECK-NEXT: #loc5 = loc({{.*}}:9:4)
// CHECK-EMPTY:
