// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  function f(uint256 a) private {}

  function unchk(uint256 a, uint256 b) private {
    unchecked {
      a += b;
      a -= b;
      a *= b;

      f(a + b);
      f(a - b);
      f(a * b);
    }
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc3 = loc({{.*}}:3:13)
// CHECK-NEXT: #loc5 = loc({{.*}}:5:17)
// CHECK-NEXT: #loc6 = loc({{.*}}:5:28)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_46 {
// CHECK-NEXT:     sol.func @f_6(%arg0: ui256 loc({{.*}}:3:13)) attributes {state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc3)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc3)
// CHECK-NEXT:       sol.return loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     sol.func @unchk_45(%arg0: ui256 loc({{.*}}:5:17), %arg1: ui256 loc({{.*}}:5:28)) attributes {state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc5)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc5)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc6)
// CHECK-NEXT:       sol.store %arg1, %1 : ui256, !sol.ptr<ui256, Stack> loc(#loc6)
// CHECK-NEXT:       %2 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc7)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc8)
// CHECK-NEXT:       %4 = sol.add %3, %2 : ui256 loc(#loc8)
// CHECK-NEXT:       sol.store %4, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc8)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc9)
// CHECK-NEXT:       %6 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc10)
// CHECK-NEXT:       %7 = sol.sub %6, %5 : ui256 loc(#loc10)
// CHECK-NEXT:       sol.store %7, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc10)
// CHECK-NEXT:       %8 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc11)
// CHECK-NEXT:       %9 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc12)
// CHECK-NEXT:       %10 = sol.mul %9, %8 : ui256 loc(#loc12)
// CHECK-NEXT:       sol.store %10, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc12)
// CHECK-NEXT:       %11 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc13)
// CHECK-NEXT:       %12 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc14)
// CHECK-NEXT:       %13 = sol.add %11, %12 : ui256 loc(#loc13)
// CHECK-NEXT:       sol.call @f_6(%13) : (ui256) -> () loc(#loc15)
// CHECK-NEXT:       %14 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc16)
// CHECK-NEXT:       %15 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc17)
// CHECK-NEXT:       %16 = sol.sub %14, %15 : ui256 loc(#loc16)
// CHECK-NEXT:       sol.call @f_6(%16) : (ui256) -> () loc(#loc18)
// CHECK-NEXT:       %17 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc19)
// CHECK-NEXT:       %18 = sol.load %1 : !sol.ptr<ui256, Stack>, ui256 loc(#loc20)
// CHECK-NEXT:       %19 = sol.mul %17, %18 : ui256 loc(#loc19)
// CHECK-NEXT:       sol.call @f_6(%19) : (ui256) -> () loc(#loc21)
// CHECK-NEXT:       sol.return loc(#loc4)
// CHECK-NEXT:     } loc(#loc4)
// CHECK-NEXT:   } {interface_fns = [], kind = #sol<ContractKind Contract>} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:5:2)
// CHECK-NEXT: #loc7 = loc({{.*}}:7:11)
// CHECK-NEXT: #loc8 = loc({{.*}}:7:6)
// CHECK-NEXT: #loc9 = loc({{.*}}:8:11)
// CHECK-NEXT: #loc10 = loc({{.*}}:8:6)
// CHECK-NEXT: #loc11 = loc({{.*}}:9:11)
// CHECK-NEXT: #loc12 = loc({{.*}}:9:6)
// CHECK-NEXT: #loc13 = loc({{.*}}:11:8)
// CHECK-NEXT: #loc14 = loc({{.*}}:11:12)
// CHECK-NEXT: #loc15 = loc({{.*}}:11:6)
// CHECK-NEXT: #loc16 = loc({{.*}}:12:8)
// CHECK-NEXT: #loc17 = loc({{.*}}:12:12)
// CHECK-NEXT: #loc18 = loc({{.*}}:12:6)
// CHECK-NEXT: #loc19 = loc({{.*}}:13:8)
// CHECK-NEXT: #loc20 = loc({{.*}}:13:12)
// CHECK-NEXT: #loc21 = loc({{.*}}:13:6)
// CHECK-EMPTY:
