// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  function f(uint256 a) private {
    unchecked {
      require(a > 42);
      require(a > 42, "Foobar");
    }
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc3 = loc({{.*}}:3:13)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_21 {
// CHECK-NEXT:     sol.func @f_20(%arg0: ui256 loc({{.*}}:3:13)) attributes {state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<ui256, Stack> loc(#loc3)
// CHECK-NEXT:       sol.store %arg0, %0 : ui256, !sol.ptr<ui256, Stack> loc(#loc3)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc4)
// CHECK-NEXT:       %c42_ui8 = sol.constant 42 : ui8 loc(#loc5)
// CHECK-NEXT:       %2 = sol.ext %c42_ui8 : ui8 to ui256 loc(#loc5)
// CHECK-NEXT:       %3 = sol.cmp gt, %1, %2 : ui256 loc(#loc4)
// CHECK-NEXT:       sol.require %3, "" loc(#loc6)
// CHECK-NEXT:       %4 = sol.load %0 : !sol.ptr<ui256, Stack>, ui256 loc(#loc7)
// CHECK-NEXT:       %c42_ui8_0 = sol.constant 42 : ui8 loc(#loc8)
// CHECK-NEXT:       %5 = sol.ext %c42_ui8_0 : ui8 to ui256 loc(#loc8)
// CHECK-NEXT:       %6 = sol.cmp gt, %4, %5 : ui256 loc(#loc7)
// CHECK-NEXT:       sol.require %6, "Foobar" loc(#loc9)
// CHECK-NEXT:       sol.return loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:   } {interface_fns = [], kind = #sol<ContractKind Contract>} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:5:14)
// CHECK-NEXT: #loc5 = loc({{.*}}:5:18)
// CHECK-NEXT: #loc6 = loc({{.*}}:5:6)
// CHECK-NEXT: #loc7 = loc({{.*}}:6:14)
// CHECK-NEXT: #loc8 = loc({{.*}}:6:18)
// CHECK-NEXT: #loc9 = loc({{.*}}:6:6)
// CHECK-EMPTY:
