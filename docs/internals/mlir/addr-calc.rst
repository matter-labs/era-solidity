Address calculation
===================
Generation
----------
This documents talks about address in memory, storage etc., not the address type
in solidity. An address can be a `sol.pointer`, `sol.array`, `sol.struct` or a
`sol.mapping`. It is generated by any of the following:

- `sol.func` argument
- `sol.alloca` result
- `sol.malloc` result
- `sol.addr_of` result
- `sol.map` result
- `sol.gep` result

Calculation
-----------
An address calculation op should only yield an address. It can be represented
with an operation of 2 arguments: (base-address, index) in the case of an array
or a struct (where index is the member-index). (mapping-var, key) in the case of
mapping. Note that we don't access the underlying element, but only its address
(even with the mapping, i.e. we only get the address of the value corresponding
to the key).

Side effects
------------
Ideally, address calculation ops should not cause any side effect. But, for
instance, a key -> value mapping is done using `sol.keccak256` in EraVM and EVM
which writes the arguments in memory at offset 0. Can we ignore this side effect
(in the context of optimization/analysis) if offset 0 is only reserved for
keccak256?
